!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function o(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var d=function(){return(d=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function l(t,e,i,n){var o,d=arguments.length,l=d<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,i,n);else for(var r=t.length-1;r>=0;r--)(o=t[r])&&(l=(d<3?o(l):d>3?o(e,i,l):o(e,i))||l);return d>3&&l&&Object.defineProperty(e,i,l),l}function r(t,e,i,n){return new(i||(i=Promise))((function(o,d){function l(t){try{a(n.next(t))}catch(t){d(t)}}function r(t){try{a(n.throw(t))}catch(t){d(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}a((n=n.apply(t,e||[])).next())}))}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const a="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,s=(t,e,i=null)=>{for(;e!==i;){const i=e.nextSibling;t.removeChild(e),e=i}},c=`{{lit-${String(Math.random()).slice(2)}}}`,h=`\x3c!--${c}--\x3e`,m=new RegExp(`${c}|${h}`);class u{constructor(t,e){this.parts=[],this.element=e;const i=[],n=[],o=document.createTreeWalker(e.content,133,null,!1);let d=0,l=-1,r=0;const{strings:a,values:{length:s}}=t;for(;r<s;){const t=o.nextNode();if(null!==t){if(l++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:i}=e;let n=0;for(let t=0;t<i;t++)p(e[t].name,"$lit$")&&n++;for(;n-- >0;){const e=a[r],i=x.exec(e)[2],n=i.toLowerCase()+"$lit$",o=t.getAttribute(n);t.removeAttribute(n);const d=o.split(m);this.parts.push({type:"attribute",index:l,name:i,strings:d}),r+=d.length-1}}"TEMPLATE"===t.tagName&&(n.push(t),o.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(c)>=0){const n=t.parentNode,o=e.split(m),d=o.length-1;for(let e=0;e<d;e++){let i,d=o[e];if(""===d)i=g();else{const t=x.exec(d);null!==t&&p(t[2],"$lit$")&&(d=d.slice(0,t.index)+t[1]+t[2].slice(0,-"$lit$".length)+t[3]),i=document.createTextNode(d)}n.insertBefore(i,t),this.parts.push({type:"node",index:++l})}""===o[d]?(n.insertBefore(g(),t),i.push(t)):t.data=o[d],r+=d}}else if(8===t.nodeType)if(t.data===c){const e=t.parentNode;null!==t.previousSibling&&l!==d||(l++,e.insertBefore(g(),t)),d=l,this.parts.push({type:"node",index:l}),null===t.nextSibling?t.data="":(i.push(t),l--),r++}else{let e=-1;for(;-1!==(e=t.data.indexOf(c,e+1));)this.parts.push({type:"node",index:-1}),r++}}else o.currentNode=n.pop()}for(const t of i)t.parentNode.removeChild(t)}}const p=(t,e)=>{const i=t.length-e.length;return i>=0&&t.slice(i)===e},f=t=>-1!==t.index,g=()=>document.createComment(""),x=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function b(t,e){const{element:{content:i},parts:n}=t,o=document.createTreeWalker(i,133,null,!1);let d=v(n),l=n[d],r=-1,a=0;const s=[];let c=null;for(;o.nextNode();){r++;const t=o.currentNode;for(t.previousSibling===c&&(c=null),e.has(t)&&(s.push(t),null===c&&(c=t)),null!==c&&a++;void 0!==l&&l.index===r;)l.index=null!==c?-1:l.index-a,d=v(n,d),l=n[d]}s.forEach(t=>t.parentNode.removeChild(t))}const _=t=>{let e=11===t.nodeType?0:1;const i=document.createTreeWalker(t,133,null,!1);for(;i.nextNode();)e++;return e},v=(t,e=-1)=>{for(let i=e+1;i<t.length;i++){const e=t[i];if(f(e))return i}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const y=new WeakMap,w=t=>(...e)=>{const i=t(...e);return y.set(i,!0),i},C=t=>"function"==typeof t&&y.has(t),E={},S={};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class k{constructor(t,e,i){this.__parts=[],this.template=t,this.processor=e,this.options=i}update(t){let e=0;for(const i of this.__parts)void 0!==i&&i.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=a?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],i=this.template.parts,n=document.createTreeWalker(t,133,null,!1);let o,d=0,l=0,r=n.nextNode();for(;d<i.length;)if(o=i[d],f(o)){for(;l<o.index;)l++,"TEMPLATE"===r.nodeName&&(e.push(r),n.currentNode=r.content),null===(r=n.nextNode())&&(n.currentNode=e.pop(),r=n.nextNode());if("node"===o.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(r.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(r,o.name,o.strings,this.options));d++}else this.__parts.push(void 0),d++;return a&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const L=` ${c} `;class I{constructor(t,e,i,n){this.strings=t,this.values=e,this.type=i,this.processor=n}getHTML(){const t=this.strings.length-1;let e="",i=!1;for(let n=0;n<t;n++){const t=this.strings[n],o=t.lastIndexOf("\x3c!--");i=(o>-1||i)&&-1===t.indexOf("--\x3e",o+1);const d=x.exec(t);e+=null===d?t+(i?L:h):t.substr(0,d.index)+d[1]+d[2]+"$lit$"+d[3]+c}return e+=this.strings[t],e}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const O=t=>null===t||!("object"==typeof t||"function"==typeof t),A=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class N{constructor(t,e,i){this.dirty=!0,this.element=t,this.name=e,this.strings=i,this.parts=[];for(let t=0;t<i.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new T(this)}_getValue(){const t=this.strings,e=t.length-1;let i="";for(let n=0;n<e;n++){i+=t[n];const e=this.parts[n];if(void 0!==e){const t=e.value;if(O(t)||!A(t))i+="string"==typeof t?t:String(t);else for(const e of t)i+="string"==typeof e?e:String(e)}}return i+=t[e],i}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class T{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===E||O(t)&&t===this.value||(this.value=t,C(t)||(this.committer.dirty=!0))}commit(){for(;C(this.value);){const t=this.value;this.value=E,t(this)}this.value!==E&&this.committer.commit()}}class P{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(g()),this.endNode=t.appendChild(g())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=g()),t.__insert(this.endNode=g())}insertAfterPart(t){t.__insert(this.startNode=g()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;C(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=E,t(this)}const t=this.__pendingValue;t!==E&&(O(t)?t!==this.value&&this.__commitText(t):t instanceof I?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):A(t)?this.__commitIterable(t):t===S?(this.value=S,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,i="string"==typeof(t=null==t?"":t)?t:String(t);e===this.endNode.previousSibling&&3===e.nodeType?e.data=i:this.__commitNode(document.createTextNode(i)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof k&&this.value.template===e)this.value.update(t.values);else{const i=new k(e,t.processor,this.options),n=i._clone();i.update(t.values),this.__commitNode(n),this.value=i}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let i,n=0;for(const o of t)i=e[n],void 0===i&&(i=new P(this.options),e.push(i),0===n?i.appendIntoPart(this):i.insertAfterPart(e[n-1])),i.setValue(o),i.commit(),n++;n<e.length&&(e.length=n,this.clear(i&&i.endNode))}clear(t=this.startNode){s(this.startNode.parentNode,t.nextSibling,this.endNode)}}class M{constructor(t,e,i){if(this.value=void 0,this.__pendingValue=void 0,2!==i.length||""!==i[0]||""!==i[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=i}setValue(t){this.__pendingValue=t}commit(){for(;C(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=E,t(this)}if(this.__pendingValue===E)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=E}}class R extends N{constructor(t,e,i){super(t,e,i),this.single=2===i.length&&""===i[0]&&""===i[1]}_createPart(){return new F(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class F extends T{}let V=!1;(()=>{try{const t={get capture(){return V=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class ${constructor(t,e,i){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=i,this.__boundHandleEvent=t=>this.handleEvent(t)}setValue(t){this.__pendingValue=t}commit(){for(;C(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=E,t(this)}if(this.__pendingValue===E)return;const t=this.__pendingValue,e=this.value,i=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),n=null!=t&&(null==e||i);i&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),n&&(this.__options=H(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=E}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const H=t=>t&&(V?{capture:t.capture,passive:t.passive,once:t.once}:t.capture)
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */;function z(t){let e=j.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},j.set(t.type,e));let i=e.stringsArray.get(t.strings);if(void 0!==i)return i;const n=t.strings.join(c);return i=e.keyString.get(n),void 0===i&&(i=new u(t,t.getTemplateElement()),e.keyString.set(n,i)),e.stringsArray.set(t.strings,i),i}const j=new Map,U=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const B=new
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class{handleAttributeExpressions(t,e,i,n){const o=e[0];if("."===o){return new R(t,e.slice(1),i).parts}return"@"===o?[new $(t,e.slice(1),n.eventContext)]:"?"===o?[new M(t,e.slice(1),i)]:new N(t,e,i).parts}handleTextExpression(t){return new P(t)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const W=(t,...e)=>new I(t,e,"html",B),D=(t,e)=>`${t}--${e}`;let Y=!0;void 0===window.ShadyCSS?Y=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),Y=!1);const q=t=>e=>{const i=D(e.type,t);let n=j.get(i);void 0===n&&(n={stringsArray:new WeakMap,keyString:new Map},j.set(i,n));let o=n.stringsArray.get(e.strings);if(void 0!==o)return o;const d=e.strings.join(c);if(o=n.keyString.get(d),void 0===o){const i=e.getTemplateElement();Y&&window.ShadyCSS.prepareTemplateDom(i,t),o=new u(e,i),n.keyString.set(d,o)}return n.stringsArray.set(e.strings,o),o},X=["html","svg"],G=new Set,K=(t,e,i)=>{G.add(t);const n=i?i.element:document.createElement("template"),o=e.querySelectorAll("style"),{length:d}=o;if(0===d)return void window.ShadyCSS.prepareTemplateStyles(n,t);const l=document.createElement("style");for(let t=0;t<d;t++){const e=o[t];e.parentNode.removeChild(e),l.textContent+=e.textContent}(t=>{X.forEach(e=>{const i=j.get(D(e,t));void 0!==i&&i.keyString.forEach(t=>{const{element:{content:e}}=t,i=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{i.add(t)}),b(t,i)})})})(t);const r=n.content;i?function(t,e,i=null){const{element:{content:n},parts:o}=t;if(null==i)return void n.appendChild(e);const d=document.createTreeWalker(n,133,null,!1);let l=v(o),r=0,a=-1;for(;d.nextNode();){for(a++,d.currentNode===i&&(r=_(e),i.parentNode.insertBefore(e,i));-1!==l&&o[l].index===a;){if(r>0){for(;-1!==l;)o[l].index+=r,l=v(o,l);return}l=v(o,l)}}}(i,l,r.firstChild):r.insertBefore(l,r.firstChild),window.ShadyCSS.prepareTemplateStyles(n,t);const a=r.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==a)e.insertBefore(a.cloneNode(!0),e.firstChild);else if(i){r.insertBefore(l,r.firstChild);const t=new Set;t.add(l),b(i,t)}};window.JSCompiler_renameProperty=(t,e)=>t;const J={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},Q=(t,e)=>e!==t&&(e==e||t==t),Z={attribute:!0,type:String,converter:J,reflect:!1,hasChanged:Q};class tt extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,i)=>{const n=this._attributeNameForProperty(i,e);void 0!==n&&(this._attributeToPropertyMap.set(n,i),t.push(n))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=Z){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const i="symbol"==typeof t?Symbol():`__${t}`,n=this.getPropertyDescriptor(t,i,e);void 0!==n&&Object.defineProperty(this.prototype,t,n)}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(i){const n=this[t];this[e]=i,this._requestUpdate(t,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||Z}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty("finalized")||t.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const i of e)this.createProperty(i,t[i])}}static _attributeNameForProperty(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,i=Q){return i(t,e)}static _propertyValueFromAttribute(t,e){const i=e.type,n=e.converter||J,o="function"==typeof n?n:n.fromAttribute;return o?o(t,i):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const i=e.type,n=e.converter;return(n&&n.toAttribute||J.toAttribute)(t,i)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,i){e!==i&&this._attributeToProperty(t,i)}_propertyToAttribute(t,e,i=Z){const n=this.constructor,o=n._attributeNameForProperty(t,i);if(void 0!==o){const t=n._propertyValueToAttribute(e,i);if(void 0===t)return;this._updateState=8|this._updateState,null==t?this.removeAttribute(o):this.setAttribute(o,t),this._updateState=-9&this._updateState}}_attributeToProperty(t,e){if(8&this._updateState)return;const i=this.constructor,n=i._attributeToPropertyMap.get(t);if(void 0!==n){const t=i.getPropertyOptions(n);this._updateState=16|this._updateState,this[n]=i._propertyValueFromAttribute(e,t),this._updateState=-17&this._updateState}}_requestUpdate(t,e){let i=!0;if(void 0!==t){const n=this.constructor,o=n.getPropertyOptions(t);n._valueHasChanged(this[t],e,o.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==o.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,o))):i=!1}!this._hasRequestedUpdate&&i&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){this._updateState=4|this._updateState;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return 4&this._updateState}get hasUpdated(){return 1&this._updateState}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{t=this.shouldUpdate(e),t?this.update(e):this._markUpdated()}catch(e){throw t=!1,this._markUpdated(),e}t&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=-5&this._updateState}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}tt.finalized=!0;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const et=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:n}=e;return{kind:i,elements:n,finisher(e){window.customElements.define(t,e)}}})(t,e),it=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?Object.assign(Object.assign({},e),{finisher(i){i.createProperty(e.key,t)}}):{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function nt(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):it(t,e)}function ot(t){return(e,i)=>{const n={get(){return this.renderRoot.querySelector(t)},enumerable:!0,configurable:!0};return void 0!==i?dt(n,e,i):lt(n,e)}}const dt=(t,e,i)=>{Object.defineProperty(e,i,t)},lt=(t,e)=>({kind:"method",placement:"prototype",key:e.key,descriptor:t});
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const rt="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,at=Symbol();class st{constructor(t,e){if(e!==at)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){return void 0===this._styleSheet&&(rt?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const ct=(t,...e)=>{const i=e.reduce((e,i,n)=>e+(t=>{if(t instanceof st)return t.cssText;if("number"==typeof t)return t;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${t}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(i)+t[n+1],t[0]);return new st(i,at)};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const ht={};class mt extends tt{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const e=(t,i)=>t.reduceRight((t,i)=>Array.isArray(i)?e(i,t):(t.add(i),t),i),i=e(t,new Set),n=[];i.forEach(t=>n.unshift(t)),this._styles=n}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?rt?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const e=this.render();super.update(t),e!==ht&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){return ht}}mt.finalized=!0,mt.render=(t,e,i)=>{if(!i||"object"!=typeof i||!i.scopeName)throw new Error("The `scopeName` option is required.");const n=i.scopeName,o=U.has(e),d=Y&&11===e.nodeType&&!!e.host,l=d&&!G.has(n),r=l?document.createDocumentFragment():e;if(((t,e,i)=>{let n=U.get(e);void 0===n&&(s(e,e.firstChild),U.set(e,n=new P(Object.assign({templateFactory:z},i))),n.appendInto(e)),n.setValue(t),n.commit()})(t,r,Object.assign({templateFactory:q(n)},i)),l){const t=U.get(r);U.delete(r);const i=t.value instanceof k?t.value.template:void 0;K(n,r,i),s(e,e.firstChild),e.appendChild(r),U.set(e,t)}!o&&d&&window.ShadyCSS.styleElement(e.host)};var ut=ct`:host{padding-top:128px;display:flex;flex-direction:column;justify-content:flex-start;align-items:center;overflow:auto;transform:translateY(0) !important;opacity:1 !important}hp-search{width:100%;max-width:500px}
`;
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */let pt=!1;const ft=()=>{},gt={get passive(){return pt=!0,!1}};document.addEventListener("x",ft,gt),document.removeEventListener("x",ft);
/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class xt extends mt{createFoundation(){void 0!==this.mdcFoundation&&this.mdcFoundation.destroy(),this.mdcFoundationClass&&(this.mdcFoundation=new this.mdcFoundationClass(this.createAdapter()),this.mdcFoundation.init())}firstUpdated(){this.createFoundation()}}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var bt=function(){function t(t){void 0===t&&(t={}),this.adapter_=t}return Object.defineProperty(t,"cssClasses",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{}},enumerable:!0,configurable:!0}),t.prototype.init=function(){},t.prototype.destroy=function(){},t}(),_t={NOTCH_ELEMENT_SELECTOR:".mdc-notched-outline__notch"},vt={NOTCH_ELEMENT_PADDING:8},yt={NO_LABEL:"mdc-notched-outline--no-label",OUTLINE_NOTCHED:"mdc-notched-outline--notched",OUTLINE_UPGRADED:"mdc-notched-outline--upgraded"},wt=function(t){function e(i){return t.call(this,d({},e.defaultAdapter,i))||this}return o(e,t),Object.defineProperty(e,"strings",{get:function(){return _t},enumerable:!0,configurable:!0}),Object.defineProperty(e,"cssClasses",{get:function(){return yt},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return vt},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},setNotchWidthProperty:function(){},removeNotchWidthProperty:function(){}}},enumerable:!0,configurable:!0}),e.prototype.notch=function(t){var i=e.cssClasses.OUTLINE_NOTCHED;t>0&&(t+=vt.NOTCH_ELEMENT_PADDING),this.adapter_.setNotchWidthProperty(t),this.adapter_.addClass(i)},e.prototype.closeNotch=function(){var t=e.cssClasses.OUTLINE_NOTCHED;this.adapter_.removeClass(t),this.adapter_.removeNotchWidthProperty()},e}(bt);
/**
@license
Copyright 2019 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class Ct extends xt{constructor(){super(...arguments),this.mdcFoundationClass=wt,this.width=0,this.open=!1,this.lastOpen=this.open}createAdapter(){return{addClass:t=>this.mdcRoot.classList.add(t),removeClass:t=>this.mdcRoot.classList.remove(t),setNotchWidthProperty:t=>this.notchElement.style.setProperty("width",`${t}px`),removeNotchWidthProperty:()=>this.notchElement.style.removeProperty("width")}}openOrClose(t,e){this.mdcFoundation&&(t&&void 0!==e?this.mdcFoundation.notch(e):this.mdcFoundation.closeNotch())}render(){return this.openOrClose(this.open,this.width),W`
      <span class="mdc-notched-outline">
        <span class="mdc-notched-outline__leading"></span>
        <span class="mdc-notched-outline__notch">
          <slot></slot>
        </span>
        <span class="mdc-notched-outline__trailing"></span>
      </span>`}}l([ot(".mdc-notched-outline")],Ct.prototype,"mdcRoot",void 0),l([nt({type:Number})],Ct.prototype,"width",void 0),l([nt({type:Boolean,reflect:!0})],Ct.prototype,"open",void 0),l([ot(".mdc-notched-outline__notch")],Ct.prototype,"notchElement",void 0);
/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const Et=ct`.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / .75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{padding:0}:host{display:block;position:absolute;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] :host,:host[dir=rtl]{text-align:right}::slotted(.mdc-floating-label){display:inline-block;position:relative;top:17px;bottom:auto;max-width:100%}::slotted(.mdc-floating-label--float-above){text-overflow:clip}.mdc-notched-outline--upgraded ::slotted(.mdc-floating-label--float-above){max-width:calc(100% / .75)}.mdc-notched-outline__leading{width:12px;width:var(--mdc-notched-outline-leading-width, 12px);border-radius:4px 0 0 4px;border-radius:var(--mdc-notched-outline-leading-border-radius, 4px 0 0 4px)}.mdc-notched-outline__trailing{border-radius:0 4px 4px 0;border-radius:var(--mdc-notched-outline-trailing-border-radius, 0 4px 4px 0)}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{border-color:var(--mdc-notched-outline-border-color, var(--mdc-theme-primary, #6200ee));border-width:1px;border-width:var(--mdc-notched-outline-stroke-width, 1px)}`;
/**
@license
Copyright 2019 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/let St=class extends Ct{};St.styles=Et,St=l([et("mwc-notched-outline")],St);let kt=!1;const Lt=()=>{},It={get passive(){return kt=!0,!1}};document.addEventListener("x",Lt,It),document.removeEventListener("x",Lt);
/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class Ot extends mt{createFoundation(){void 0!==this.mdcFoundation&&this.mdcFoundation.destroy(),this.mdcFoundationClass&&(this.mdcFoundation=new this.mdcFoundationClass(this.createAdapter()),this.mdcFoundation.init())}firstUpdated(){this.createFoundation()}}
/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/class At extends Ot{createRenderRoot(){return this.attachShadow({mode:"open",delegatesFocus:!0})}click(){this.formElement&&(this.formElement.focus(),this.formElement.click())}setAriaLabel(t){this.formElement&&this.formElement.setAttribute("aria-label",t)}firstUpdated(){super.firstUpdated(),this.mdcRoot.addEventListener("change",t=>{this.dispatchEvent(new Event("change",t))})}}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Nt={LABEL_FLOAT_ABOVE:"mdc-floating-label--float-above",LABEL_SHAKE:"mdc-floating-label--shake",ROOT:"mdc-floating-label"},Tt=function(t){function e(i){var n=t.call(this,d({},e.defaultAdapter,i))||this;return n.shakeAnimationEndHandler_=function(){return n.handleShakeAnimationEnd_()},n}return o(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return Nt},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},getWidth:function(){return 0},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){}}},enumerable:!0,configurable:!0}),e.prototype.init=function(){this.adapter_.registerInteractionHandler("animationend",this.shakeAnimationEndHandler_)},e.prototype.destroy=function(){this.adapter_.deregisterInteractionHandler("animationend",this.shakeAnimationEndHandler_)},e.prototype.getWidth=function(){return this.adapter_.getWidth()},e.prototype.shake=function(t){var i=e.cssClasses.LABEL_SHAKE;t?this.adapter_.addClass(i):this.adapter_.removeClass(i)},e.prototype.float=function(t){var i=e.cssClasses,n=i.LABEL_FLOAT_ABOVE,o=i.LABEL_SHAKE;t?this.adapter_.addClass(n):(this.adapter_.removeClass(n),this.adapter_.removeClass(o))},e.prototype.handleShakeAnimationEnd_=function(){var t=e.cssClasses.LABEL_SHAKE;this.adapter_.removeClass(t)},e}(bt);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const Pt=new WeakMap,Mt=w(t=>e=>{const i=Pt.get(e);if(i){if(i.label!==t){const t=e.committer.element,i=new Event("labelchange");t.dispatchEvent(i)}}else{const i=e.committer.element;i.classList.add("mdc-floating-label");const n=(t=>({addClass:e=>t.classList.add(e),removeClass:e=>t.classList.remove(e),getWidth:()=>t.scrollWidth,registerInteractionHandler:(e,i)=>{t.addEventListener(e,i)},deregisterInteractionHandler:(e,i)=>{t.removeEventListener(e,i)}}))(i),o=new Tt(n);o.init(),e.setValue(o),Pt.set(e,{label:t,foundation:o})}});
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var Rt={LINE_RIPPLE_ACTIVE:"mdc-line-ripple--active",LINE_RIPPLE_DEACTIVATING:"mdc-line-ripple--deactivating"},Ft=function(t){function e(i){var n=t.call(this,d({},e.defaultAdapter,i))||this;return n.transitionEndHandler_=function(t){return n.handleTransitionEnd(t)},n}return o(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return Rt},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setStyle:function(){},registerEventHandler:function(){},deregisterEventHandler:function(){}}},enumerable:!0,configurable:!0}),e.prototype.init=function(){this.adapter_.registerEventHandler("transitionend",this.transitionEndHandler_)},e.prototype.destroy=function(){this.adapter_.deregisterEventHandler("transitionend",this.transitionEndHandler_)},e.prototype.activate=function(){this.adapter_.removeClass(Rt.LINE_RIPPLE_DEACTIVATING),this.adapter_.addClass(Rt.LINE_RIPPLE_ACTIVE)},e.prototype.setRippleCenter=function(t){this.adapter_.setStyle("transform-origin",t+"px center")},e.prototype.deactivate=function(){this.adapter_.addClass(Rt.LINE_RIPPLE_DEACTIVATING)},e.prototype.handleTransitionEnd=function(t){var e=this.adapter_.hasClass(Rt.LINE_RIPPLE_DEACTIVATING);"opacity"===t.propertyName&&e&&(this.adapter_.removeClass(Rt.LINE_RIPPLE_ACTIVE),this.adapter_.removeClass(Rt.LINE_RIPPLE_DEACTIVATING))},e}(bt);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const Vt=new WeakMap,$t=w(()=>t=>{if(!Vt.get(t)){const e=t.committer.element;e.classList.add("mdc-line-ripple");const i=(t=>({addClass:e=>t.classList.add(e),removeClass:e=>t.classList.remove(e),hasClass:e=>t.classList.contains(e),setStyle:(e,i)=>t.style.setProperty(e,i),registerEventHandler:(e,i)=>{t.addEventListener(e,i)},deregisterEventHandler:(e,i)=>{t.removeEventListener(e,i)}}))(e),n=new Ft(i);n.init(),t.setValue(n),Vt.set(t,n)}});
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var Ht={ARIA_CONTROLS:"aria-controls",INPUT_SELECTOR:".mdc-text-field__input",LABEL_SELECTOR:".mdc-floating-label",LEADING_ICON_SELECTOR:".mdc-text-field__icon--leading",LINE_RIPPLE_SELECTOR:".mdc-line-ripple",OUTLINE_SELECTOR:".mdc-notched-outline",TRAILING_ICON_SELECTOR:".mdc-text-field__icon--trailing"},zt={DISABLED:"mdc-text-field--disabled",FOCUSED:"mdc-text-field--focused",FULLWIDTH:"mdc-text-field--fullwidth",HELPER_LINE:"mdc-text-field-helper-line",INVALID:"mdc-text-field--invalid",LABEL_FLOATING:"mdc-text-field--label-floating",NO_LABEL:"mdc-text-field--no-label",OUTLINED:"mdc-text-field--outlined",ROOT:"mdc-text-field",TEXTAREA:"mdc-text-field--textarea",WITH_LEADING_ICON:"mdc-text-field--with-leading-icon",WITH_TRAILING_ICON:"mdc-text-field--with-trailing-icon"},jt={LABEL_SCALE:.75},Ut=["pattern","min","max","required","step","minlength","maxlength"],Bt=["color","date","datetime-local","month","range","time","week"],Wt=["mousedown","touchstart"],Dt=["click","keydown"],Yt=function(t){function e(i,n){void 0===n&&(n={});var o=t.call(this,d({},e.defaultAdapter,i))||this;return o.isFocused_=!1,o.receivedUserInput_=!1,o.isValid_=!0,o.useNativeValidation_=!0,o.helperText_=n.helperText,o.characterCounter_=n.characterCounter,o.leadingIcon_=n.leadingIcon,o.trailingIcon_=n.trailingIcon,o.inputFocusHandler_=function(){return o.activateFocus()},o.inputBlurHandler_=function(){return o.deactivateFocus()},o.inputInputHandler_=function(){return o.handleInput()},o.setPointerXOffset_=function(t){return o.setTransformOrigin(t)},o.textFieldInteractionHandler_=function(){return o.handleTextFieldInteraction()},o.validationAttributeChangeHandler_=function(t){return o.handleValidationAttributeChange(t)},o}return o(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return zt},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return Ht},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return jt},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"shouldAlwaysFloat_",{get:function(){var t=this.getNativeInput_().type;return Bt.indexOf(t)>=0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"shouldFloat",{get:function(){return this.shouldAlwaysFloat_||this.isFocused_||!!this.getValue()||this.isBadInput_()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"shouldShake",{get:function(){return!this.isFocused_&&!this.isValid()&&!!this.getValue()},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!0},registerTextFieldInteractionHandler:function(){},deregisterTextFieldInteractionHandler:function(){},registerInputInteractionHandler:function(){},deregisterInputInteractionHandler:function(){},registerValidationAttributeChangeHandler:function(){return new MutationObserver((function(){}))},deregisterValidationAttributeChangeHandler:function(){},getNativeInput:function(){return null},isFocused:function(){return!1},activateLineRipple:function(){},deactivateLineRipple:function(){},setLineRippleTransformOrigin:function(){},shakeLabel:function(){},floatLabel:function(){},hasLabel:function(){return!1},getLabelWidth:function(){return 0},hasOutline:function(){return!1},notchOutline:function(){},closeOutline:function(){}}},enumerable:!0,configurable:!0}),e.prototype.init=function(){var t=this;this.adapter_.isFocused()?this.inputFocusHandler_():this.adapter_.hasLabel()&&this.shouldFloat&&(this.notchOutline(!0),this.adapter_.floatLabel(!0),this.styleFloating_(!0)),this.adapter_.registerInputInteractionHandler("focus",this.inputFocusHandler_),this.adapter_.registerInputInteractionHandler("blur",this.inputBlurHandler_),this.adapter_.registerInputInteractionHandler("input",this.inputInputHandler_),Wt.forEach((function(e){t.adapter_.registerInputInteractionHandler(e,t.setPointerXOffset_)})),Dt.forEach((function(e){t.adapter_.registerTextFieldInteractionHandler(e,t.textFieldInteractionHandler_)})),this.validationObserver_=this.adapter_.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler_),this.setCharacterCounter_(this.getValue().length)},e.prototype.destroy=function(){var t=this;this.adapter_.deregisterInputInteractionHandler("focus",this.inputFocusHandler_),this.adapter_.deregisterInputInteractionHandler("blur",this.inputBlurHandler_),this.adapter_.deregisterInputInteractionHandler("input",this.inputInputHandler_),Wt.forEach((function(e){t.adapter_.deregisterInputInteractionHandler(e,t.setPointerXOffset_)})),Dt.forEach((function(e){t.adapter_.deregisterTextFieldInteractionHandler(e,t.textFieldInteractionHandler_)})),this.adapter_.deregisterValidationAttributeChangeHandler(this.validationObserver_)},e.prototype.handleTextFieldInteraction=function(){var t=this.adapter_.getNativeInput();t&&t.disabled||(this.receivedUserInput_=!0)},e.prototype.handleValidationAttributeChange=function(t){var e=this;t.some((function(t){return Ut.indexOf(t)>-1&&(e.styleValidity_(!0),!0)})),t.indexOf("maxlength")>-1&&this.setCharacterCounter_(this.getValue().length)},e.prototype.notchOutline=function(t){if(this.adapter_.hasOutline())if(t){var e=this.adapter_.getLabelWidth()*jt.LABEL_SCALE;this.adapter_.notchOutline(e)}else this.adapter_.closeOutline()},e.prototype.activateFocus=function(){this.isFocused_=!0,this.styleFocused_(this.isFocused_),this.adapter_.activateLineRipple(),this.adapter_.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter_.floatLabel(this.shouldFloat),this.styleFloating_(this.shouldFloat),this.adapter_.shakeLabel(this.shouldShake)),this.helperText_&&this.helperText_.showToScreenReader()},e.prototype.setTransformOrigin=function(t){var e=t.touches,i=e?e[0]:t,n=i.target.getBoundingClientRect(),o=i.clientX-n.left;this.adapter_.setLineRippleTransformOrigin(o)},e.prototype.handleInput=function(){this.autoCompleteFocus(),this.setCharacterCounter_(this.getValue().length)},e.prototype.autoCompleteFocus=function(){this.receivedUserInput_||this.activateFocus()},e.prototype.deactivateFocus=function(){this.isFocused_=!1,this.adapter_.deactivateLineRipple();var t=this.isValid();this.styleValidity_(t),this.styleFocused_(this.isFocused_),this.adapter_.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter_.floatLabel(this.shouldFloat),this.styleFloating_(this.shouldFloat),this.adapter_.shakeLabel(this.shouldShake)),this.shouldFloat||(this.receivedUserInput_=!1)},e.prototype.getValue=function(){return this.getNativeInput_().value},e.prototype.setValue=function(t){this.getValue()!==t&&(this.getNativeInput_().value=t),this.setCharacterCounter_(t.length);var e=this.isValid();this.styleValidity_(e),this.adapter_.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter_.floatLabel(this.shouldFloat),this.styleFloating_(this.shouldFloat),this.adapter_.shakeLabel(this.shouldShake))},e.prototype.isValid=function(){return this.useNativeValidation_?this.isNativeInputValid_():this.isValid_},e.prototype.setValid=function(t){this.isValid_=t,this.styleValidity_(t);var e=!t&&!this.isFocused_&&!!this.getValue();this.adapter_.hasLabel()&&this.adapter_.shakeLabel(e)},e.prototype.setUseNativeValidation=function(t){this.useNativeValidation_=t},e.prototype.isDisabled=function(){return this.getNativeInput_().disabled},e.prototype.setDisabled=function(t){this.getNativeInput_().disabled=t,this.styleDisabled_(t)},e.prototype.setHelperTextContent=function(t){this.helperText_&&this.helperText_.setContent(t)},e.prototype.setLeadingIconAriaLabel=function(t){this.leadingIcon_&&this.leadingIcon_.setAriaLabel(t)},e.prototype.setLeadingIconContent=function(t){this.leadingIcon_&&this.leadingIcon_.setContent(t)},e.prototype.setTrailingIconAriaLabel=function(t){this.trailingIcon_&&this.trailingIcon_.setAriaLabel(t)},e.prototype.setTrailingIconContent=function(t){this.trailingIcon_&&this.trailingIcon_.setContent(t)},e.prototype.setCharacterCounter_=function(t){if(this.characterCounter_){var e=this.getNativeInput_().maxLength;if(-1===e)throw new Error("MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.");this.characterCounter_.setCounterValue(t,e)}},e.prototype.isBadInput_=function(){return this.getNativeInput_().validity.badInput||!1},e.prototype.isNativeInputValid_=function(){return this.getNativeInput_().validity.valid},e.prototype.styleValidity_=function(t){var i=e.cssClasses.INVALID;t?this.adapter_.removeClass(i):this.adapter_.addClass(i),this.helperText_&&this.helperText_.setValidity(t)},e.prototype.styleFocused_=function(t){var i=e.cssClasses.FOCUSED;t?this.adapter_.addClass(i):this.adapter_.removeClass(i)},e.prototype.styleDisabled_=function(t){var i=e.cssClasses,n=i.DISABLED,o=i.INVALID;t?(this.adapter_.addClass(n),this.adapter_.removeClass(o)):this.adapter_.removeClass(n),this.leadingIcon_&&this.leadingIcon_.setDisabled(t),this.trailingIcon_&&this.trailingIcon_.setDisabled(t)},e.prototype.styleFloating_=function(t){var i=e.cssClasses.LABEL_FLOATING;t?this.adapter_.addClass(i):this.adapter_.removeClass(i)},e.prototype.getNativeInput_=function(){return(this.adapter_?this.adapter_.getNativeInput():null)||{disabled:!1,maxLength:-1,type:"input",validity:{badInput:!1,valid:!0},value:""}},e}(bt);
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class qt{constructor(t){this.classes=new Set,this.changed=!1,this.element=t;const e=(t.getAttribute("class")||"").split(/\s+/);for(const t of e)this.classes.add(t)}add(t){this.classes.add(t),this.changed=!0}remove(t){this.classes.delete(t),this.changed=!0}commit(){if(this.changed){let t="";this.classes.forEach(e=>t+=e+" "),this.element.setAttribute("class",t)}}}const Xt=new WeakMap,Gt=w(t=>e=>{if(!(e instanceof T)||e instanceof F||"class"!==e.committer.name||e.committer.parts.length>1)throw new Error("The `classMap` directive must be used in the `class` attribute and must be the only part in the attribute.");const{committer:i}=e,{element:n}=i;let o=Xt.get(e);void 0===o&&(n.setAttribute("class",i.strings.join(" ")),Xt.set(e,o=new Set));const d=n.classList||new qt(n);o.forEach(e=>{e in t||(d.remove(e),o.delete(e))});for(const e in t){const i=t[e];i!=o.has(e)&&(i?(d.add(e),o.add(e)):(d.remove(e),o.delete(e)))}"function"==typeof d.commit&&d.commit()}),Kt=new WeakMap,Jt=w(t=>e=>{const i=Kt.get(e);if(void 0===t&&e instanceof T){if(void 0!==i||!Kt.has(e)){const t=e.committer.name;e.committer.element.removeAttribute(t)}}else t!==i&&e.setValue(t);Kt.set(e,t)});
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var Qt={ROOT:"mdc-text-field-character-counter"},Zt={ROOT_SELECTOR:"."+Qt.ROOT},te=function(t){function e(i){return t.call(this,d({},e.defaultAdapter,i))||this}return o(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return Qt},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return Zt},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{setContent:function(){}}},enumerable:!0,configurable:!0}),e.prototype.setCounterValue=function(t,e){t=Math.min(t,e),this.adapter_.setContent(t+" / "+e)},e}(bt);const ee=new WeakMap,ie=w(()=>t=>{if(!ee.get(t)){const e=t.committer.element;e.classList.add("mdc-text-field-character-counter");const i=(t=>({setContent:e=>t.textContent=e}))(e),n=new te(i);n.init(),t.setValue(n),ee.set(t,n)}}),ne=["touchstart","touchmove","scroll","mousewheel"],oe=(t={})=>{const e={};for(const i in t)e[i]=t[i];return Object.assign({badInput:!1,customError:!1,patternMismatch:!1,rangeOverflow:!1,rangeUnderflow:!1,stepMismatch:!1,tooLong:!1,tooShort:!1,typeMismatch:!1,valid:!0,valueMissing:!1},e)};class de extends At{constructor(){super(...arguments),this.mdcFoundationClass=Yt,this.value="",this.type="text",this.placeholder="",this.label="",this.icon="",this.iconTrailing="",this.disabled=!1,this.required=!1,this.maxLength=-1,this.outlined=!1,this.fullWidth=!1,this.helper="",this.validateOnInitialRender=!1,this.validationMessage="",this.autoValidate=!1,this.pattern="",this.min="",this.max="",this.step=null,this.helperPersistent=!1,this.charCounter=!1,this.endAligned=!1,this.readOnly=!1,this.outlineOpen=!1,this.outlineWidth=0,this.isUiValid=!0,this._validity=oe(),this._outlineUpdateComplete=null,this._valueSetOnInputEvent=!1,this.validityTransform=null}get validity(){return this._checkValidity(this.value),this._validity}get willValidate(){return this.formElement.willValidate}get selectionStart(){return this.formElement.selectionStart}get selectionEnd(){return this.formElement.selectionEnd}get shouldRenderHelperText(){return!!this.helper||!!this.validationMessage||this.charCounterVisible}get charCounterVisible(){return this.charCounter&&-1!==this.maxLength}focus(){const t=new CustomEvent("focus");this.formElement.dispatchEvent(t),this.formElement.focus()}blur(){const t=new CustomEvent("blur");this.formElement.dispatchEvent(t),this.formElement.blur()}select(){this.formElement.select()}setSelectionRange(t,e,i){this.formElement.setSelectionRange(t,e,i)}render(){const t={"mdc-text-field--disabled":this.disabled,"mdc-text-field--no-label":!this.label,"mdc-text-field--outlined":this.outlined,"mdc-text-field--fullwidth":this.fullWidth,"mdc-text-field--with-leading-icon":this.icon,"mdc-text-field--with-trailing-icon":this.iconTrailing,"mdc-text-field--end-aligned":this.endAligned},e=this.outlined?"":W`<div class="mdc-text-field__ripple"></div>`;return W`
      <label class="mdc-text-field ${Gt(t)}">
        ${e}
        ${this.icon?this.renderIcon(this.icon):""}
        ${this.renderInput()}
        ${this.iconTrailing?this.renderIcon(this.iconTrailing,!0):""}
        ${this.outlined?this.renderOutlined():this.renderLabelText()}
      </label>
      ${this.renderHelperText(this.renderCharCounter())}
    `}updated(t){const e=t.get("maxLength"),i=-1===e&&-1!==this.maxLength,n=void 0!==e&&-1!==e&&-1===this.maxLength;(i||n)&&this.createFoundation(),t.has("value")&&void 0!==t.get("value")&&this.mdcFoundation.setValue(this.value)}renderInput(){const t=-1===this.maxLength?void 0:this.maxLength;return W`
      <input
          aria-labelledby="label"
          class="mdc-text-field__input"
          type="${this.type}"
          .value="${this.value}"
          ?disabled="${this.disabled}"
          placeholder="${this.placeholder}"
          ?required="${this.required}"
          ?readonly="${this.readOnly}"
          maxlength="${Jt(t)}"
          pattern="${Jt(this.pattern?this.pattern:void 0)}"
          min="${Jt(""===this.min?void 0:this.min)}"
          max="${Jt(""===this.max?void 0:this.max)}"
          step="${Jt(null===this.step?void 0:this.step)}"
          inputmode="${Jt(this.inputMode)}"
          @input="${this.handleInputChange}"
          @blur="${this.onInputBlur}">`}renderIcon(t,e=!1){return W`<i class="material-icons mdc-text-field__icon ${Gt({"mdc-text-field__icon--leading":!e,"mdc-text-field__icon--trailing":e})}">${t}</i>`}renderOutlined(){let t="";return this.label&&(t=W`
        <span
            .floatingLabelFoundation=${Mt(this.label)}
            @labelchange=${this.onLabelChange}
            id="label">
          ${this.label}
        </span>
      `),W`
      <mwc-notched-outline
          .width=${this.outlineWidth}
          .open=${this.outlineOpen}
          class="mdc-notched-outline">
        ${t}
      </mwc-notched-outline>`}renderLabelText(){let t="";return this.label&&!this.fullWidth&&(t=W`
      <span
          .floatingLabelFoundation=${Mt(this.label)}
          id="label">
        ${this.label}
      </span>`),W`
      ${t}
      <span .lineRippleFoundation=${$t()}></span>
    `}renderHelperText(t){const e=this.validationMessage&&!this.isUiValid,i={"mdc-text-field-helper-text--persistent":this.helperPersistent,"mdc-text-field-helper-text--validation-msg":e},n={hidden:!this.shouldRenderHelperText};return W`
      <div class="mdc-text-field-helper-line ${Gt(n)}">
        <div class="mdc-text-field-helper-text ${Gt(i)}">
          ${e?this.validationMessage:this.helper}
        </div>
        ${t}
      </div>
    `}renderCharCounter(){const t={hidden:!this.charCounterVisible};return W`
      <div
          class="${Gt(t)}"
          .charCounterFoundation=${ie()}>
      </div>`}onInputBlur(){this.reportValidity()}checkValidity(){const t=this._checkValidity(this.value);if(!t){const t=new Event("invalid",{bubbles:!1,cancelable:!0});this.dispatchEvent(t)}return t}reportValidity(){const t=this.checkValidity();return this.mdcFoundation.setValid(t),this.isUiValid=t,t}_checkValidity(t){const e=this.formElement.validity;let i=oe(e);if(this.validityTransform){const e=this.validityTransform(t,i);i=Object.assign(Object.assign({},i),e),this.mdcFoundation.setUseNativeValidation(!1)}else this.mdcFoundation.setUseNativeValidation(!0);return this._validity=i,this._validity.valid}setCustomValidity(t){this.validationMessage=t,this.formElement.setCustomValidity(t)}handleInputChange(){this._valueSetOnInputEvent=!0,this.value=this.formElement.value,this.autoValidate&&this.reportValidity()}shouldUpdate(t){return t.has("value")&&this._valueSetOnInputEvent?(this._valueSetOnInputEvent=!1,!1):super.shouldUpdate(t)}createFoundation(){void 0!==this.mdcFoundation&&this.mdcFoundation.destroy(),this.mdcFoundation=new this.mdcFoundationClass(this.createAdapter(),{characterCounter:-1!==this.maxLength?this.charCounterElement.charCounterFoundation:void 0}),this.mdcFoundation.init()}createAdapter(){return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},this.getRootAdapterMethods()),this.getInputAdapterMethods()),this.getLabelAdapterMethods()),this.getLineRippleAdapterMethods()),this.getOutlineAdapterMethods())}getRootAdapterMethods(){return Object.assign({registerTextFieldInteractionHandler:(t,e)=>this.addEventListener(t,e),deregisterTextFieldInteractionHandler:(t,e)=>this.removeEventListener(t,e),registerValidationAttributeChangeHandler:()=>{const t=new MutationObserver(t=>{-1!==(t=>t.map(t=>t.attributeName).filter(t=>t))(t).indexOf("maxlength")&&-1!==this.maxLength&&this.charCounterElement.charCounterFoundation.setCounterValue(this.value.length,this.maxLength)});return t.observe(this.formElement,{attributes:!0}),t},deregisterValidationAttributeChangeHandler:t=>t.disconnect()},(t=this.mdcRoot,{addClass:e=>{t.classList.add(e)},removeClass:e=>{t.classList.remove(e)},hasClass:e=>t.classList.contains(e)}));var t}getInputAdapterMethods(){return{getNativeInput:()=>this.formElement,isFocused:()=>!!this.shadowRoot&&this.shadowRoot.activeElement===this.formElement,registerInputInteractionHandler:(t,e)=>this.formElement.addEventListener(t,e,{passive:t in ne}),deregisterInputInteractionHandler:(t,e)=>this.formElement.removeEventListener(t,e)}}getLabelAdapterMethods(){return{floatLabel:t=>this.labelElement&&this.labelElement.floatingLabelFoundation.float(t),getLabelWidth:()=>this.labelElement?this.labelElement.floatingLabelFoundation.getWidth():0,hasLabel:()=>Boolean(this.labelElement),shakeLabel:t=>this.labelElement&&this.labelElement.floatingLabelFoundation.shake(t)}}getLineRippleAdapterMethods(){return{activateLineRipple:()=>{this.lineRippleElement&&this.lineRippleElement.lineRippleFoundation.activate()},deactivateLineRipple:()=>{this.lineRippleElement&&this.lineRippleElement.lineRippleFoundation.deactivate()},setLineRippleTransformOrigin:t=>{this.lineRippleElement&&this.lineRippleElement.lineRippleFoundation.setRippleCenter(t)}}}async _getUpdateComplete(){await super._getUpdateComplete(),await this._outlineUpdateComplete}async firstUpdated(){const t=this.outlineElement;t&&(this._outlineUpdateComplete=t.updateComplete,await this._outlineUpdateComplete),super.firstUpdated(),this.validateOnInitialRender&&this.reportValidity()}getOutlineAdapterMethods(){return{closeOutline:()=>this.outlineElement&&(this.outlineOpen=!1),hasOutline:()=>Boolean(this.outlineElement),notchOutline:t=>{this.outlineElement&&!this.outlineOpen&&(this.outlineWidth=t,this.outlineOpen=!0)}}}async onLabelChange(){this.label&&await this.layout()}async layout(){if(await this.updateComplete,this.labelElement&&this.outlineElement){const t=this.labelElement.floatingLabelFoundation.getWidth();this.outlineOpen&&(this.outlineWidth=t)}}}var le;l([ot(".mdc-text-field")],de.prototype,"mdcRoot",void 0),l([ot("input")],de.prototype,"formElement",void 0),l([ot(".mdc-floating-label")],de.prototype,"labelElement",void 0),l([ot(".mdc-line-ripple")],de.prototype,"lineRippleElement",void 0),l([ot("mwc-notched-outline")],de.prototype,"outlineElement",void 0),l([ot(".mdc-notched-outline__notch")],de.prototype,"notchElement",void 0),l([ot(".mdc-text-field-character-counter")],de.prototype,"charCounterElement",void 0),l([nt({type:String})],de.prototype,"value",void 0),l([nt({type:String})],de.prototype,"type",void 0),l([nt({type:String})],de.prototype,"placeholder",void 0),l([nt({type:String})],de.prototype,"label",void 0),l([nt({type:String})],de.prototype,"icon",void 0),l([nt({type:String})],de.prototype,"iconTrailing",void 0),l([nt({type:Boolean,reflect:!0})],de.prototype,"disabled",void 0),l([nt({type:Boolean})],de.prototype,"required",void 0),l([nt({type:Number})],de.prototype,"maxLength",void 0),l([nt({type:Boolean,reflect:!0})],de.prototype,"outlined",void 0),l([nt({type:Boolean,reflect:!0})],de.prototype,"fullWidth",void 0),l([nt({type:String})],de.prototype,"helper",void 0),l([nt({type:Boolean})],de.prototype,"validateOnInitialRender",void 0),l([nt({type:String})],de.prototype,"validationMessage",void 0),l([nt({type:Boolean})],de.prototype,"autoValidate",void 0),l([nt({type:String})],de.prototype,"pattern",void 0),l([nt({type:Number})],de.prototype,"min",void 0),l([nt({type:Number})],de.prototype,"max",void 0),l([nt({type:Number})],de.prototype,"step",void 0),l([nt({type:Boolean})],de.prototype,"helperPersistent",void 0),l([nt({type:Boolean})],de.prototype,"charCounter",void 0),l([nt({type:Boolean})],de.prototype,"endAligned",void 0),l([nt({type:String})],de.prototype,"inputMode",void 0),l([nt({type:Boolean})],de.prototype,"readOnly",void 0),l([nt({type:Boolean})],de.prototype,"outlineOpen",void 0),l([nt({type:Number})],de.prototype,"outlineWidth",void 0),l([nt({type:Boolean})],de.prototype,"isUiValid",void 0),l([(le={passive:!0},(t,e)=>void 0!==e?((t,e,i)=>{Object.assign(e[i],t)})(le,t,e):((t,e)=>Object.assign(Object.assign({},e),{finisher(i){Object.assign(i.prototype[e.key],t)}}))(le,t))],de.prototype,"handleInputChange",null);
/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const re=ct`.mdc-floating-label{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);position:absolute;left:0;transform-origin:left top;line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform;transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1)}[dir=rtl] .mdc-floating-label,.mdc-floating-label[dir=rtl]{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-floating-label--float-above{cursor:auto}.mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-standard 250ms 1}@keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-106%) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-106%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}}.mdc-line-ripple::before,.mdc-line-ripple::after{position:absolute;bottom:0;left:0;width:100%;border-bottom-style:solid;content:""}.mdc-line-ripple::before{border-bottom-width:1px;z-index:1}.mdc-line-ripple::after{transform:scaleX(0);border-bottom-width:2px;opacity:0;z-index:2}.mdc-line-ripple::after{transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-line-ripple--active::after{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating::after{opacity:0}.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / .75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{padding:0}.mdc-text-field-helper-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin:0;opacity:0;will-change:opacity;transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-text-field-helper-text::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}.mdc-text-field-helper-text--persistent{transition:none;opacity:1;will-change:initial}.mdc-text-field-character-counter{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin-left:auto;margin-right:0;padding-left:16px;padding-right:0;white-space:nowrap}.mdc-text-field-character-counter::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{padding-left:0;padding-right:16px}.mdc-text-field__icon{position:absolute;top:50%;transform:translateY(-50%);cursor:pointer}.mdc-text-field__icon:not([tabindex]),.mdc-text-field__icon[tabindex="-1"]{cursor:default;pointer-events:none}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-text-field{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-text-field .mdc-text-field__ripple::before,.mdc-text-field .mdc-text-field__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-text-field .mdc-text-field__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-text-field.mdc-ripple-upgraded .mdc-text-field__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field.mdc-ripple-upgraded .mdc-text-field__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-text-field.mdc-ripple-upgraded--unbounded .mdc-text-field__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-text-field.mdc-ripple-upgraded--foreground-activation .mdc-text-field__ripple::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-text-field.mdc-ripple-upgraded--foreground-deactivation .mdc-text-field__ripple::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field .mdc-text-field__ripple::before,.mdc-text-field .mdc-text-field__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-text-field.mdc-ripple-upgraded .mdc-text-field__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-text-field__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-text-field{height:56px;display:inline-flex;align-items:baseline;border-radius:4px 4px 0 0;display:inline-flex;padding:0 16px;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color}.mdc-text-field .mdc-text-field__ripple::before,.mdc-text-field .mdc-text-field__ripple::after{background-color:rgba(0,0,0,.87)}.mdc-text-field:hover .mdc-text-field__ripple::before{opacity:.04}.mdc-text-field.mdc-ripple-upgraded--background-focused .mdc-text-field__ripple::before,.mdc-text-field:not(.mdc-ripple-upgraded):focus .mdc-text-field__ripple::before{transition-duration:75ms;opacity:.12}.mdc-text-field::before{display:inline-block;width:0;height:40px;content:"";vertical-align:0}.mdc-text-field.mdc-text-field--outlined,.mdc-text-field.mdc-text-field--fullwidth,.mdc-text-field.mdc-text-field--textarea,.mdc-text-field.mdc-text-field--no-label{align-items:center}.mdc-text-field.mdc-text-field--outlined::before,.mdc-text-field.mdc-text-field--fullwidth::before,.mdc-text-field.mdc-text-field--textarea::before,.mdc-text-field.mdc-text-field--no-label::before{display:none}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{color:rgba(0,0,0,.87)}@media all{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:rgba(0,0,0,.54)}}@media all{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:rgba(0,0,0,.54)}}.mdc-text-field .mdc-text-field__input{caret-color:#6200ee;caret-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field:not(.mdc-text-field--disabled):hover .mdc-line-ripple::before{border-bottom-color:rgba(0,0,0,.87)}.mdc-text-field .mdc-line-ripple::after{border-bottom-color:#6200ee;border-bottom-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field-character-counter,.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--leading{color:rgba(0,0,0,.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:rgba(0,0,0,.54)}.mdc-text-field:not(.mdc-text-field--disabled){background-color:#f5f5f5}.mdc-text-field .mdc-floating-label{left:16px;right:initial;top:50%;transform:translateY(-50%);pointer-events:none}[dir=rtl] .mdc-text-field .mdc-floating-label,.mdc-text-field .mdc-floating-label[dir=rtl]{left:initial;right:16px}.mdc-text-field .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--textarea .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--textarea .mdc-floating-label,.mdc-text-field--textarea .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined--with-leading-icon .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--outlined--with-leading-icon .mdc-floating-label,.mdc-text-field--outlined--with-leading-icon .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above{left:40px;right:initial}[dir=rtl] .mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above,.mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above[dir=rtl]{left:initial;right:40px}.mdc-text-field__input{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);width:100%;height:28px;border:none;border-radius:0;background:none;appearance:none;padding:0;transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1)}@media all{.mdc-text-field__input::placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}}@media all{.mdc-text-field__input:-ms-input-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}}@media all{.mdc-text-field--fullwidth .mdc-text-field__input::placeholder,.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}}@media all{.mdc-text-field--fullwidth .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}.mdc-text-field__input:-webkit-autofill{z-index:auto !important}.mdc-text-field__input:-webkit-autofill+.mdc-floating-label{transform:translateY(-50%) scale(0.75);cursor:auto}.mdc-text-field--outlined{overflow:visible}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined 250ms 1}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-radius:4px 0 0 4px}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-radius:0 4px 4px 0}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-radius:0 4px 4px 0}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-radius:4px 0 0 4px}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1)}.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--outlined .mdc-text-field__ripple::before,.mdc-text-field--outlined .mdc-text-field__ripple::after{content:none}.mdc-text-field--outlined:not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--outlined .mdc-text-field__input{display:flex;border:none !important;background-color:transparent;z-index:1}.mdc-text-field--outlined .mdc-text-field__icon{z-index:2}.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--outlined.mdc-text-field--disabled{background-color:transparent}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.06)}@media screen and (-ms-high-contrast: active){.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:GrayText}}.mdc-text-field--with-leading-icon{padding-left:48px;padding-right:16px}.mdc-text-field--with-leading-icon .mdc-text-field__icon--leading{left:16px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-text-field__icon--leading,.mdc-text-field--with-leading-icon .mdc-text-field__icon--leading[dir=rtl]{left:initial;right:16px}[dir=rtl] .mdc-text-field--with-leading-icon,.mdc-text-field--with-leading-icon[dir=rtl]{padding-left:16px;padding-right:48px}.mdc-text-field--with-leading-icon .mdc-floating-label{left:48px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-floating-label,.mdc-text-field--with-leading-icon .mdc-floating-label[dir=rtl]{left:initial;right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon--leading{left:16px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon--leading,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon--leading[dir=rtl]{left:initial;right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) translateX(-32px) scale(1)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-37.25px) translateX(32px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) translateX(-32px) scale(0.75)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-34.75px) translateX(32px) scale(0.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake,.mdc-text-field--with-leading-icon.mdc-text-field--outlined[dir=rtl] .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl 250ms 1}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--with-trailing-icon{padding-left:16px;padding-right:48px}.mdc-text-field--with-trailing-icon .mdc-text-field__icon--trailing{left:initial;right:12px}[dir=rtl] .mdc-text-field--with-trailing-icon .mdc-text-field__icon--trailing,.mdc-text-field--with-trailing-icon .mdc-text-field__icon--trailing[dir=rtl]{left:12px;right:initial}[dir=rtl] .mdc-text-field--with-trailing-icon,.mdc-text-field--with-trailing-icon[dir=rtl]{padding-left:48px;padding-right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon{padding-right:48px;padding-left:48px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon--leading{left:16px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon--leading,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon--leading[dir=rtl]{left:initial;right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon--trailing{left:initial;right:12px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon--trailing,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon--trailing[dir=rtl]{left:12px;right:initial}.mdc-text-field__input:required~.mdc-floating-label::after,.mdc-text-field__input:required~.mdc-notched-outline .mdc-floating-label::after{margin-left:1px;content:"*"}.mdc-text-field--textarea{display:inline-flex;width:auto;height:auto;padding:0;overflow:visible;transition:none}.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--textarea .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-textarea 250ms 1}.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading{border-radius:4px 0 0 4px}[dir=rtl] .mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-radius:0 4px 4px 0}.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing{border-radius:0 4px 4px 0}[dir=rtl] .mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-radius:4px 0 0 4px}.mdc-text-field--textarea .mdc-text-field__ripple::before,.mdc-text-field--textarea .mdc-text-field__ripple::after{content:none}.mdc-text-field--textarea:not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--textarea .mdc-floating-label--float-above{transform:translateY(-144%) scale(1)}.mdc-text-field--textarea .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--textarea.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-130%) scale(0.75)}.mdc-text-field--textarea.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--textarea .mdc-text-field-character-counter{left:initial;right:16px;position:absolute;bottom:13px}[dir=rtl] .mdc-text-field--textarea .mdc-text-field-character-counter,.mdc-text-field--textarea .mdc-text-field-character-counter[dir=rtl]{left:16px;right:initial}.mdc-text-field--textarea .mdc-text-field__input{align-self:stretch;box-sizing:border-box;height:auto;margin-top:8px;margin-bottom:1px;margin-left:0;margin-right:1px;padding:0 16px 16px;line-height:1.75rem}[dir=rtl] .mdc-text-field--textarea .mdc-text-field__input,.mdc-text-field--textarea .mdc-text-field__input[dir=rtl]{margin-left:1px;margin-right:0}.mdc-text-field--textarea .mdc-text-field-character-counter+.mdc-text-field__input{margin-bottom:28px;padding-bottom:0}.mdc-text-field--textarea .mdc-floating-label{top:17px;width:auto;pointer-events:none}.mdc-text-field--textarea .mdc-floating-label:not(.mdc-floating-label--float-above){transform:none}.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--fullwidth{padding:0;width:100%}.mdc-text-field--fullwidth:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field--fullwidth.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea){display:flex}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea) .mdc-text-field__ripple::before,.mdc-text-field--fullwidth:not(.mdc-text-field--textarea) .mdc-text-field__ripple::after{content:none}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea):not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--fullwidth.mdc-text-field--textarea .mdc-text-field__input{resize:vertical}.mdc-text-field--fullwidth.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field-helper-line{display:flex;justify-content:space-between;box-sizing:border-box}.mdc-text-field+.mdc-text-field-helper-line{padding-right:16px;padding-left:16px}.mdc-form-field>.mdc-text-field+label{align-self:flex-start}.mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(98,0,238,.87)}.mdc-text-field--focused+.mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg){opacity:1}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-floating-label{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid .mdc-text-field__input{caret-color:#b00020;caret-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{opacity:1}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--disabled{background-color:#fafafa;pointer-events:none}.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:rgba(0,0,0,.06)}.mdc-text-field--disabled .mdc-text-field__input{color:rgba(0,0,0,.38)}@media all{.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:rgba(0,0,0,.38)}}@media all{.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:rgba(0,0,0,.38)}}.mdc-text-field--disabled .mdc-floating-label{color:rgba(0,0,0,.38)}.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.38)}.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0,0,0,.38)}.mdc-text-field--disabled .mdc-text-field__icon--leading{color:rgba(0,0,0,.3)}.mdc-text-field--disabled .mdc-text-field__icon--trailing{color:rgba(0,0,0,.3)}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:GrayText}}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:GrayText}}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:GrayText}}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled .mdc-floating-label{color:GrayText}}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:GrayText}}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:GrayText}}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__icon--leading{color:GrayText}}@media screen and (-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__icon--trailing{color:GrayText}}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.mdc-text-field--textarea.mdc-text-field--disabled{background-color:transparent;background-color:#f9f9f9}.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.06)}@media screen and (-ms-high-contrast: active){.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:GrayText}}.mdc-text-field--end-aligned .mdc-text-field__input{text-align:right}[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__input,.mdc-text-field--end-aligned .mdc-text-field__input[dir=rtl]{text-align:left}@keyframes mdc-floating-label-shake-float-above-text-field-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon{0%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl{0%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-textarea{0%{transform:translateX(calc(0 - 0%)) translateY(-130%) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-130%) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-130%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-130%) scale(0.75)}}.material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}.hidden,.hidden::before,.hidden::after{display:none}:host{display:inline-flex;flex-direction:column;outline:none}:host([fullwidth]){display:flex}.mdc-text-field{width:100%;border-radius:4px 4px 0 0;border-radius:var(--mdc-text-field-filled-border-radius, 4px 4px 0 0)}mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-idle-border-color, rgba(0, 0, 0, 0.38))}:host(:not([disabled]):hover) :not(.mdc-text-field--invalid):not(.mdc-text-field--focused) mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-hover-border-color, rgba(0, 0, 0, 0.87))}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-fill-color, whitesmoke)}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--outlined):not(.mdc-text-field--invalid) .mdc-text-field__input{border-bottom-color:var(--mdc-text-field-idle-line-color, black)}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--outlined):not(.mdc-text-field--invalid) .mdc-text-field__input:hover{border-bottom-color:var(--mdc-text-field-hover-line-color, #000001)}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-error-color, var(--mdc-theme-error, #b00020))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-character-counter,:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid .mdc-text-field__icon{color:var(--mdc-text-field-error-color, var(--mdc-theme-error, #b00020))}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused mwc-notched-outline{--mdc-notched-outline-stroke-width: 2px}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-focused-label-color, var(--mdc-theme-primary, rgba(98, 0, 238, 0.87)))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-floating-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-text-field__input:required~.mdc-floating-label::after,:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-text-field__input:required~.mdc-notched-outline .mdc-floating-label::after{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input{color:var(--mdc-text-field-ink-color, rgba(0, 0, 0, 0.87))}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg),:host(:not([disabled])) .mdc-text-field-helper-line:not(.mdc-text-field--invalid) .mdc-text-field-character-counter{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host([disabled]) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-disabled-fill-color, #fafafa)}:host([disabled]) .mdc-text-field.mdc-text-field--outlined mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-disabled-border-color, rgba(0, 0, 0, 0.06))}:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.38))}:host([disabled]) .mdc-text-field .mdc-text-field__input,:host([disabled]) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.38))}:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-helper-text,:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-character-counter{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.38))}`;
/**
@license
Copyright 2019 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/let ae=class extends de{};ae.styles=re,ae=l([et("mwc-textfield")],ae);const se=t=>Array.isArray?Array.isArray(t):"[object Array]"===Object.prototype.toString.call(t),ce=t=>"string"==typeof t,he=t=>"number"==typeof t,me=t=>null!=t,ue=t=>!t.trim().length;var pe={isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(t,e)=>t.score===e.score?t.idx<e.idx?-1:1:t.score<e.score?-1:1,includeMatches:!1,findAllMatches:!1,minMatchCharLength:1,location:0,threshold:.6,distance:100,...{useExtendedSearch:!1,getFn:function(t,e){let i=[],n=!1;const o=(t,e)=>{if(e){const d=e.indexOf(".");let l=e,r=null;-1!==d&&(l=e.slice(0,d),r=e.slice(d+1));const a=t[l];if(me(a))if(r||!ce(a)&&!he(a))if(se(a)){n=!0;for(let t=0,e=a.length;t<e;t+=1)o(a[t],r)}else r&&o(a,r);else i.push((t=>null==t?"":(t=>{if("string"==typeof t)return t;let e=t+"";return"0"==e&&1/t==-1/0?"-0":e})(t))(a))}else i.push(t)};return o(t,e),n?i:i[0]}}};function fe(t,{errors:e=0,currentLocation:i=0,expectedLocation:n=0,distance:o=pe.distance}={}){const d=e/t.length,l=Math.abs(n-i);return o?d+l/o:l?1:d}function ge(t,e,i,{location:n=pe.location,distance:o=pe.distance,threshold:d=pe.threshold,findAllMatches:l=pe.findAllMatches,minMatchCharLength:r=pe.minMatchCharLength,includeMatches:a=pe.includeMatches}={}){if(e.length>32)throw new Error("Pattern length exceeds max of 32.");const s=e.length,c=t.length,h=Math.max(0,Math.min(n,c));let m=d,u=h;const p=[];if(a)for(let t=0;t<c;t+=1)p[t]=0;let f;for(;(f=t.indexOf(e,u))>-1;){let t=fe(e,{currentLocation:f,expectedLocation:h,distance:o});if(m=Math.min(t,m),u=f+s,a){let t=0;for(;t<s;)p[f+t]=1,t+=1}}u=-1;let g=[],x=1,b=s+c;const _=1<<(s<=31?s-1:30);for(let n=0;n<s;n+=1){let d=0,r=b;for(;d<r;){fe(e,{errors:n,currentLocation:h+r,expectedLocation:h,distance:o})<=m?d=r:b=r,r=Math.floor((b-d)/2+d)}b=r;let f=Math.max(1,h-r+1),v=l?c:Math.min(h+r,c)+s,y=Array(v+2);y[v+1]=(1<<n)-1;for(let d=v;d>=f;d-=1){let l=d-1,r=i[t.charAt(l)];if(r&&a&&(p[l]=1),y[d]=(y[d+1]<<1|1)&r,0!==n&&(y[d]|=(g[d+1]|g[d])<<1|1|g[d+1]),y[d]&_&&(x=fe(e,{errors:n,currentLocation:l,expectedLocation:h,distance:o}),x<=m)){if(m=x,u=l,u<=h)break;f=Math.max(1,2*h-u)}}if(fe(e,{errors:n+1,currentLocation:h,expectedLocation:h,distance:o})>m)break;g=y}let v={isMatch:u>=0,score:x||.001};return a&&(v.matchedIndices=function(t=[],e=pe.minMatchCharLength){let i=[],n=-1,o=-1,d=0;for(let l=t.length;d<l;d+=1){let l=t[d];l&&-1===n?n=d:l||-1===n||(o=d-1,o-n+1>=e&&i.push([n,o]),n=-1)}return t[d-1]&&d-n>=e&&i.push([n,d-1]),i}(p,r)),v}function xe(t){let e={},i=t.length;for(let n=0;n<i;n+=1)e[t.charAt(n)]=0;for(let n=0;n<i;n+=1)e[t.charAt(n)]|=1<<i-n-1;return e}class be{constructor(t,{location:e=pe.location,threshold:i=pe.threshold,distance:n=pe.distance,includeMatches:o=pe.includeMatches,findAllMatches:d=pe.findAllMatches,minMatchCharLength:l=pe.minMatchCharLength,isCaseSensitive:r=pe.isCaseSensitive}={}){this.options={location:e,threshold:i,distance:n,includeMatches:o,findAllMatches:d,minMatchCharLength:l,isCaseSensitive:r},this.pattern=r?t:t.toLowerCase(),this.chunks=[];let a=0;for(;a<this.pattern.length;){let t=this.pattern.substring(a,a+32);this.chunks.push({pattern:t,alphabet:xe(t)}),a+=32}}searchIn(t){let e=t.$;return this.searchInString(e)}searchInString(t){const{isCaseSensitive:e,includeMatches:i}=this.options;if(e||(t=t.toLowerCase()),this.pattern===t){let e={isMatch:!0,score:0};return i&&(e.matchedIndices=[[0,t.length-1]]),e}const{location:n,distance:o,threshold:d,findAllMatches:l,minMatchCharLength:r}=this.options;let a=[],s=0,c=!1;for(let e=0,h=this.chunks.length;e<h;e+=1){let{pattern:h,alphabet:m}=this.chunks[e],u=ge(t,h,m,{location:n+32*e,distance:o,threshold:d,findAllMatches:l,minMatchCharLength:r,includeMatches:i});const{isMatch:p,score:f,matchedIndices:g}=u;p&&(c=!0),s+=f,p&&g&&(a=[...a,...g])}let h={isMatch:c,score:c?s/this.chunks.length:1};return c&&i&&(h.matchedIndices=a),h}}class _e{constructor(t){this.pattern=t}static isMultiMatch(t){return ve(t,this.multiRegex)}static isSingleMatch(t){return ve(t,this.singleRegex)}search(){}}function ve(t,e){const i=t.match(e);return i?i[1]:null}class ye extends _e{constructor(t){super(t)}static get type(){return"exact"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(t){let e,i=0;const n=[],o=this.pattern.length;for(;(e=t.indexOf(this.pattern,i))>-1;)i=e+o,n.push([e,i-1]);const d=!!n.length;return{isMatch:d,score:d?1:0,matchedIndices:n}}}class we extends _e{constructor(t,{location:e=pe.location,threshold:i=pe.threshold,distance:n=pe.distance,includeMatches:o=pe.includeMatches,findAllMatches:d=pe.findAllMatches,minMatchCharLength:l=pe.minMatchCharLength,isCaseSensitive:r=pe.isCaseSensitive}={}){super(t),this._bitapSearch=new be(t,{location:e,threshold:i,distance:n,includeMatches:o,findAllMatches:d,minMatchCharLength:l,isCaseSensitive:r})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(t){return this._bitapSearch.searchInString(t)}}const Ce=[ye,class extends _e{constructor(t){super(t)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(t){const e=t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,matchedIndices:[0,this.pattern.length-1]}}},class extends _e{constructor(t){super(t)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(t){const e=!t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,matchedIndices:[0,t.length-1]}}},class extends _e{constructor(t){super(t)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(t){const e=!t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,matchedIndices:[0,t.length-1]}}},class extends _e{constructor(t){super(t)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(t){const e=t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,matchedIndices:[t.length-this.pattern.length,t.length-1]}}},class extends _e{constructor(t){super(t)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(t){const e=-1===t.indexOf(this.pattern);return{isMatch:e,score:e?0:1,matchedIndices:[0,t.length-1]}}},we],Ee=Ce.length,Se=/ +(?=([^\"]*\"[^\"]*\")*[^\"]*$)/;const ke=new Set([we.type,ye.type]);const Le=/[^ ]+/g;function Ie(t,e,{getFn:i=pe.getFn}={}){let n=[];if(ce(e[0]))for(let t=0,i=e.length;t<i;t+=1){const i=e[t];if(me(i)&&!ue(i)){let e={$:i,idx:t,t:i.match(Le).length};n.push(e)}}else{const o=t.length;for(let d=0,l=e.length;d<l;d+=1){let l=e[d],r={idx:d,$:{}};for(let e=0;e<o;e+=1){let n=t[e],o=i(l,n);if(me(o))if(se(o)){let t=[];const e=[{arrayIndex:-1,value:o}];for(;e.length;){const{arrayIndex:i,value:n}=e.pop();if(me(n))if(ce(n)&&!ue(n)){let e={$:n,idx:i,t:n.match(Le).length};t.push(e)}else if(se(n))for(let t=0,i=n.length;t<i;t+=1)e.push({arrayIndex:t,value:n[t]})}r.$[n]=t}else if(!ue(o)){let t={$:o,t:o.match(Le).length};r.$[n]=t}}n.push(r)}}return n}class Oe{constructor(t){if(this._keys={},this._keyNames=[],this._length=t.length,t.length&&ce(t[0]))for(let e=0;e<this._length;e+=1){const i=t[e];this._keys[i]={weight:1},this._keyNames.push(i)}else{let e=0;for(let i=0;i<this._length;i+=1){const n=t[i];if(!Object.prototype.hasOwnProperty.call(n,"name"))throw new Error('Missing "name" property in key object');const o=n.name;if(this._keyNames.push(o),!Object.prototype.hasOwnProperty.call(n,"weight"))throw new Error('Missing "weight" property in key object');const d=n.weight;if(d<=0||d>=1)throw new Error('"weight" property in key must be in the range of (0, 1)');this._keys[o]={weight:d},e+=d}for(let t=0;t<this._length;t+=1){const i=this._keyNames[t],n=this._keys[i].weight;this._keys[i].weight=n/e}}}get(t,e){return this._keys[t]?this._keys[t][e]:-1}keys(){return this._keyNames}count(){return this._length}toJSON(){return JSON.stringify(this._keys)}}function Ae(t,e){const i=t.matches;if(e.matches=[],me(i))for(let t=0,n=i.length;t<n;t+=1){let n=i[t];if(!me(n.indices)||0===n.indices.length)continue;let o={indices:n.indices,value:n.value};n.key&&(o.key=n.key),n.idx>-1&&(o.refIndex=n.idx),e.matches.push(o)}}function Ne(t,e){e.score=t.score}const Te=[];class Pe{constructor(t,e={},i=null){this.options={...pe,...e},this._processKeys(this.options.keys),this.setCollection(t,i)}setCollection(t,e=null){this.list=t,this.listIsStringArray=ce(t[0]),e?this.setIndex(e):this.setIndex(this._createIndex())}setIndex(t){this._indexedList=t}_processKeys(t){this._keyStore=new Oe(t)}_createIndex(){return Ie(this._keyStore.keys(),this.list,{getFn:this.options.getFn})}search(t,e={limit:!1}){if(!(t=t.trim()).length)return[];const{shouldSort:i}=this.options;let n=null;for(let e=0,i=Te.length;e<i;e+=1){let i=Te[e];if(i.condition(t,this.options)){n=new i(t,this.options);break}}n||(n=new be(t,this.options));let o=this._searchUsing(n);return this._computeScore(o),i&&this._sort(o),e.limit&&he(e.limit)&&(o=o.slice(0,e.limit)),this._format(o)}_searchUsing(t){const e=this._indexedList,i=[],{includeMatches:n}=this.options;if(this.listIsStringArray)for(let o=0,d=e.length;o<d;o+=1){let d=e[o],{$:l,idx:r,t:a}=d;if(!me(l))continue;let s=t.searchIn(d);const{isMatch:c,score:h}=s;if(!c)continue;let m={score:h,value:l,t:a};n&&(m.indices=s.matchedIndices),i.push({item:l,idx:r,matches:[m]})}else{const o=this._keyStore.keys(),d=this._keyStore.count();for(let l=0,r=e.length;l<r;l+=1){let{$:r,idx:a}=e[l];if(!me(r))continue;let s=[];for(let e=0;e<d;e+=1){let i=o[e],d=r[i];if(me(d))if(se(d))for(let e=0,o=d.length;e<o;e+=1){let o=d[e];const{$:l,idx:r,t:a}=o;if(!me(l))continue;let c=t.searchIn(o);const{isMatch:h,score:m}=c;if(!h)continue;let u={score:m,key:i,value:l,idx:r,t:a};n&&(u.indices=c.matchedIndices),s.push(u)}else{const{$:e,t:o}=d;let l=t.searchIn(d);const{isMatch:r,score:a}=l;if(!r)continue;let c={score:a,key:i,value:e,t:o};n&&(c.indices=l.matchedIndices),s.push(c)}}s.length&&i.push({idx:a,item:r,matches:s})}}return i}_computeScore(t){const e=t.length;for(let i=0;i<e;i+=1){const e=t[i],n=e.matches,o=n.length;let d=1;for(let t=0;t<o;t+=1){const e=n[t],{key:i,t:o}=e,l=this._keyStore.get(i,"weight"),r=l>-1?l:1,a=0===e.score&&l>-1?Number.EPSILON:e.score,s=1/Math.sqrt(o);d*=Math.pow(a,r*s)}e.score=d}}_sort(t){t.sort(this.options.sortFn)}_format(t){const e=[],{includeMatches:i,includeScore:n}=this.options;let o=[];i&&o.push(Ae),n&&o.push(Ne);for(let i=0,n=t.length;i<n;i+=1){const n=t[i],{idx:d}=n,l={item:this.list[d],refIndex:d};if(o.length)for(let t=0,e=o.length;t<e;t+=1)o[t](n,l);e.push(l)}return e}}!function(...t){Te.push(...t)}(class{constructor(t,{isCaseSensitive:e=pe.isCaseSensitive,includeMatches:i=pe.includeMatches,minMatchCharLength:n=pe.minMatchCharLength,findAllMatches:o=pe.findAllMatches,location:d=pe.location,threshold:l=pe.threshold,distance:r=pe.distance}={}){this.query=null,this.options={isCaseSensitive:e,includeMatches:i,minMatchCharLength:n,findAllMatches:o,location:d,threshold:l,distance:r},this.pattern=e?t:t.toLowerCase(),this.query=function(t,e={}){return t.split("|").map(t=>{let i=t.trim().split(Se).filter(t=>t&&!!t.trim()),n=[];for(let t=0,o=i.length;t<o;t+=1){const o=i[t];let d=!1,l=-1;for(;!d&&++l<Ee;){const t=Ce[l];let i=t.isMultiMatch(o);i&&(n.push(new t(i,e)),d=!0)}if(!d)for(l=-1;++l<Ee;){const t=Ce[l];let i=t.isSingleMatch(o);if(i){n.push(new t(i,e));break}}}return n})}(this.pattern,this.options)}static condition(t,e){return e.useExtendedSearch}searchIn(t){const e=this.query;if(!e)return{isMatch:!1,score:1};let i=t.$;const{includeMatches:n,isCaseSensitive:o}=this.options;i=o?i:i.toLowerCase();let d=0,l=[],r=0;for(let t=0,o=e.length;t<o;t+=1){const o=e[t];l.length=0,d=0;for(let t=0,e=o.length;t<e;t+=1){const e=o[t],{isMatch:a,matchedIndices:s,score:c}=e.search(i);if(!a){r=0,d=0,l.length=0;break}if(d+=1,r+=c,n){const t=e.constructor.type;ke.has(t)?l=[...l,...s]:l.push(s)}}if(d){let t={isMatch:!0,score:r/d};return n&&(t.matchedIndices=l),t}}return{isMatch:!1,score:1}}}),Pe.version="5.2.3",Pe.createIndex=Ie,Pe.config=pe;var Me=Pe,Re=ct`:host{display:block;overflow:auto}.shortcuts{margin-bottom:4px;color:#999;font-size:14px;text-align:center}.shortcuts span:not(:last-child){margin-right:8px}.search-input{width:100%;--mdc-theme-primary: #888;--mdc-text-field-fill-color: rgba(0,0,0,.8);--mdc-text-field-ink-color: #ddd;--mdc-text-field-filled-border-radius: 8px 8px 0 0}.results{max-height:480px;background:rgba(0,0,0,0.7);border-radius:0 0 8px 8px;overflow-y:scroll;overflow-y:-moz-scrollbars-none;-ms-overflow-style:none;scrollbar-width:thin}.results::-webkit-scrollbar{display:none}.no-results{text-align:center;padding:12px 0;color:#444;font-size:14px}
`,Fe={apiBaseUrl:"http://localhost:3000/api",title:"New Tab",search:{maxResults:8},links:[{name:"translate",action:{prefix:"translate: ",url:"https://translate.google.com/#view=home&op=translate&sl=auto&tl=auto&text="},tags:["action"]},{name:"google",action:{prefix:"google: ",url:"https://www.google.com/search?q="},tags:["action"]},{name:"load",action:{prefix:"load: ",internal:!0},tags:["action"]}]};var Ve=new class{constructor(){this.isLoading=!0,this._subs=[],this.links=[...Fe.links],this._initLinks()}_getState(){return{links:this.links,isLoading:this.isLoading}}_setLinks(t){this.links=[...t],this._updateSubscribers()}_setLoading(t){this.isLoading=t,this._updateSubscribers()}_updateSubscribers(){this._subs.forEach(t=>t(this._getState()))}subscribe(t){const e=this._subs.length;return this._subs.push(t),t(this._getState()),()=>{this._subs.splice(e,1)}}_initLinks(){return r(this,void 0,void 0,(function*(){const t=function(t){const e=document.cookie.match("(^|;)\\s*"+t+"\\s*=\\s*([^;]+)");return decodeURIComponent(e&&e.pop()||"")}("links-source");if(!t)return void this._setLoading(!1);const e=yield this._fetchLinks(t);e&&(this._setLinks([...e,...Fe.links]),this._setLoading(!1))}))}load(t){return r(this,void 0,void 0,(function*(){if(this._setLoading(!0),t.match(/^https:\/\/.*\.json$/)){!function(t,e,i,n){let o="";if(i){const t=new Date;t.setTime(t.getTime()+24*i*60*60*1e3),o="; expires= "+t.toUTCString()}let d=function(t){var e=t.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);if(null!=e&&e.length>2&&"string"==typeof e[2]&&e[2].length>0)return e[2];return null}(location.href);"localhost"!==d&&(d="."+d);const l=!0===n?"":"; domain="+d,r=encodeURIComponent(t)+"="+encodeURIComponent(e)+o+l+"; path=/;";console.log(r),document.cookie=r}("links-source",t,0,!0);const e=yield this._fetchLinks(t);this._setLoading(!1),e&&this._setLinks([...e,...Fe.links])}}))}_fetchLinks(t){return r(this,void 0,void 0,(function*(){try{const e=yield fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(t)}`);if(e.ok){const t=yield e.json();return JSON.parse(t.contents)}}catch(t){}return[]}))}};
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const $e=new WeakMap,He=w(t=>e=>{if(!(e instanceof T)||e instanceof F||"style"!==e.committer.name||e.committer.parts.length>1)throw new Error("The `styleMap` directive must be used in the style attribute and must be the only part in the attribute.");const{committer:i}=e,{style:n}=i.element;let o=$e.get(e);void 0===o&&(n.cssText=i.strings.join(" "),$e.set(e,o=new Set)),o.forEach(e=>{e in t||(o.delete(e),-1===e.indexOf("-")?n[e]=null:n.removeProperty(e))});for(const e in t)o.add(e),-1===e.indexOf("-")?n[e]=t[e]:n.setProperty(e,t[e])});var ze=ct`:host{position:relative;padding:8px 8px;display:block;cursor:pointer}:host([placeholder]){height:40px}a{display:flex;flex-direction:row;align-items:flex-start;font-size:16px;color:#bbb;text-decoration:none}i{margin-right:4px;display:block;width:24px;height:24px;overflow:hidden;background-position:bottom 4px center;background-repeat:no-repeat}.content{display:flex;flex-direction:column;justify-content:center}.name{font-weight:500}.url{font-size:13px;font-weight:300;max-width:300px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tags{position:absolute;right:6px;top:4px}.tags span{margin-right:4px;font-size:13px;font-weight:400;color:#b18de1}:host(:not([hovered])){opacity:.8}:host([hovered]),:host(:hover){background:rgba(255,255,255,0.08)}:host([hovered]) a,:host(:hover) a{color:#f3f3f3}
`;let je=class extends mt{constructor(){super(...arguments),this.hovered=!1,this.placeholder=!1}static get styles(){return[ze]}render(){if(this.placeholder)return"";if(!this.link)return"";const t={backgroundImage:`url(https://www.google.com/s2/favicons?domain=${this.link.faviconUrl||this.link.url})`};return W`
      <a href="${this.link.url}">
        <i style="${He(t)}"></i>

        <div class="content">
          <div class="name">${this.link.name}</div>
          <div class="url">${this.link.url}</div>
        </div>

        <div class="tags">
          ${this.link.tags.map(t=>W`
              <span>${t}</span>
            `)}
        </div>
      </a>
    `}};l([nt({type:Boolean,reflect:!0})],je.prototype,"hovered",void 0),l([nt({type:Object})],je.prototype,"link",void 0),l([nt({type:Boolean,reflect:!0})],je.prototype,"placeholder",void 0),je=l([et("hp-link")],je);let Ue=class extends mt{constructor(){super(...arguments),this.links=[],this.isLoading=!0,this.hovered=0,this.results=[],this.value="",this._stateChanged=t=>{this.links=t.links,this.isLoading=t.isLoading,this._updateResults()},this._updateResults=()=>{let t=Array.from(this.value.matchAll(/^(\w+: )/g),t=>t[0]);if(t.length)return void(this.results=this.links.filter(e=>{var i;return(null===(i=e.action)||void 0===i?void 0:i.prefix)===t[0]}));let e=this.value.split(" ").reduce((t,e)=>{if(!e)return t;return t=new Me(t,{keys:["tags","name"],threshold:.4,findAllMatches:!0}).search(e).map(t=>t.item)},this.links||[]);this.results=e},this._onKeyDown=t=>{let e=!1;if((t.ctrlKey&&"j"===t.key||"ArrowDown"===t.key)&&(this.hovered++,e=!0),(t.ctrlKey&&"k"===t.key||"ArrowUp"===t.key)&&(this.hovered--,e=!0),"Tab"===t.key){let t=this.results[this.hovered];t&&t.action&&(this.input.value=t.action.prefix),e=!0}if("Enter"===t.key){let t=this.results[this.hovered];if(t)if(t.action){let e=this.value.slice(t.action.prefix.length);if(t.action.internal){const i=this[`_${t.name}_action`];"function"==typeof i&&i(e)}else t.action.url&&(window.location.href=`${t.action.url}${e}`)}else t.url&&(window.location.href=t.url);e=!0}e&&(t.preventDefault(),t.stopPropagation()),this.hovered>=this.results.length&&(this.hovered=this.results.length-1),this.hovered<0&&(this.hovered=0)},this._load_action=t=>r(this,void 0,void 0,(function*(){yield Ve.load(t),this.value="",this.input.value="",this._updateResults()})),this._onInput=t=>{var e;this.value=null===(e=t.target)||void 0===e?void 0:e.value,this._updateResults()},this._updateResultsScroll=()=>{var t,e;const i=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector(".results"),n=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("hp-link[hovered]"),o=null==i?void 0:i.getBoundingClientRect(),d=null==n?void 0:n.getBoundingClientRect();if(!o||!d)return;const l=(null==d?void 0:d.top)-(null==o?void 0:o.top);if(l<0)return void(null==i||i.scrollBy({top:l,behavior:"smooth"}));const r=(null==d?void 0:d.bottom)-(null==o?void 0:o.bottom);r>0&&(null==i||i.scrollBy({top:r,behavior:"smooth"}))}}connectedCallback(){this._unsub=Ve.subscribe(this._stateChanged),super.connectedCallback()}disconnectedCallback(){"function"==typeof this._unsub&&this._unsub(),window.removeEventListener("keydown",this._onKeyDown),super.disconnectedCallback()}firstUpdated(){this.input=this.shadowRoot.getElementById("input"),window.addEventListener("keydown",this._onKeyDown)}updated(t){t.has("hovered")&&setTimeout(this._updateResultsScroll,0),t.has("results")&&setTimeout(()=>this.hovered=0,0)}render(){return W`
      <div class="shortcuts">
        <span>CTRL-J=&#8595;</span>
        <span>CTRL-K=&#8593;</span>
        <span>TAB=Autocomplete</span>
        <span>ENTER=Accept</span>
      </div>

      <mwc-textfield
        id="input"
        class="search-input"
        autofocus
        @input=${this._onInput}
      ></mwc-textfield>

      <div class="results">
        ${this.isLoading?new Array(10).fill(0).map(t=>W`
                <hp-link placeholder></hp-link>
              `):this.results.map(t=>W`
                <hp-link
                  .link=${t}
                  ?hovered=${this.results.indexOf(t)===this.hovered}
                ></hp-link>
              `)}

        ${0===this.results.length?W`
              <div class="no-results">No matches</div>
            `:""}
      </div>
    `}};Ue.styles=[Re],l([nt({type:Array})],Ue.prototype,"links",void 0),l([nt({type:Boolean})],Ue.prototype,"isLoading",void 0),l([nt({type:Number})],Ue.prototype,"hovered",void 0),l([nt({type:Array})],Ue.prototype,"results",void 0),l([nt({type:String})],Ue.prototype,"value",void 0),Ue=l([et("hp-search")],Ue);let Be=class extends mt{static get styles(){return[ut]}render(){return W`
      <hp-search></hp-search>
    `}};Be=l([et("hp-app")],Be),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("./service-worker.js").then(t=>{}).catch(t=>{})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvZG9tLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL21vZGlmeS10ZW1wbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi90ZW1wbGF0ZS1yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saXQtaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9zaGFkeS1yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saWIvdXBkYXRpbmctZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xpdC1lbGVtZW50L2xpYi9kZWNvcmF0b3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGliL2Nzcy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saXQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcC9ocC1hcHAuc2FzcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9td2Mtbm90Y2hlZC1vdXRsaW5lL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbXdjLWJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbXdjLW5vdGNoZWQtb3V0bGluZS9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy1iYXNlL2Jhc2UtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbm90Y2hlZC1vdXRsaW5lL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9ub3RjaGVkLW91dGxpbmUvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9td2Mtbm90Y2hlZC1vdXRsaW5lL213Yy1ub3RjaGVkLW91dGxpbmUtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9td2Mtbm90Y2hlZC1vdXRsaW5lL213Yy1ub3RjaGVkLW91dGxpbmUtY3NzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy1ub3RjaGVkLW91dGxpbmUvbXdjLW5vdGNoZWQtb3V0bGluZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9td2MtdGV4dGZpZWxkL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbXdjLWJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbXdjLXRleHRmaWVsZC9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy1iYXNlL2Jhc2UtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9td2MtdGV4dGZpZWxkL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbXdjLWJhc2UvZm9ybS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2Zsb2F0aW5nLWxhYmVsL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mbG9hdGluZy1sYWJlbC9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy1mbG9hdGluZy1sYWJlbC9td2MtZmxvYXRpbmctbGFiZWwtZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2xpbmUtcmlwcGxlL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9saW5lLXJpcHBsZS9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy1saW5lLXJpcHBsZS9td2MtbGluZS1yaXBwbGUtZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RleHRmaWVsZC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90ZXh0ZmllbGQvY2hhcmFjdGVyLWNvdW50ZXIvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RleHRmaWVsZC9jaGFyYWN0ZXItY291bnRlci9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy10ZXh0ZmllbGQvbXdjLWNoYXJhY3Rlci1jb3VudGVyLWRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9td2MtdGV4dGZpZWxkL213Yy10ZXh0ZmllbGQtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9td2MtdGV4dGZpZWxkL213Yy10ZXh0ZmllbGQtY3NzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL213Yy10ZXh0ZmllbGQvbXdjLXRleHRmaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Z1c2UuanMvZGlzdC9mdXNlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NlYXJjaC9ocC1zZWFyY2guc2FzcyIsIndlYnBhY2s6Ly8vLi91dGlscy9jb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4vY29uZmlnLmRldi50cyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NlYXJjaC9zdG9yZS50cyIsIndlYnBhY2s6Ly8vLi91dGlscy9jb29raWVzLnRzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zZWFyY2gvbGluay9ocC1saW5rLnNhc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zZWFyY2gvbGluay9ocC1saW5rLnRzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc2VhcmNoL2hwLXNlYXJjaC50cyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcC9ocC1hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfX2V4dGVuZHMiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIl9fYXNzaWduIiwiYXNzaWduIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJpc0NFUG9seWZpbGwiLCJ3aW5kb3ciLCJjdXN0b21FbGVtZW50cyIsInVuZGVmaW5lZCIsInBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2siLCJyZW1vdmVOb2RlcyIsImNvbnRhaW5lciIsInN0YXJ0IiwiZW5kIiwibmV4dFNpYmxpbmciLCJyZW1vdmVDaGlsZCIsIm1hcmtlciIsIlN0cmluZyIsIk1hdGgiLCJyYW5kb20iLCJzbGljZSIsIm5vZGVNYXJrZXIiLCJtYXJrZXJSZWdleCIsIlJlZ0V4cCIsIlRlbXBsYXRlIiwiZWxlbWVudCIsInBhcnRzIiwibm9kZXNUb1JlbW92ZSIsInN0YWNrIiwid2Fsa2VyIiwiZG9jdW1lbnQiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiY29udGVudCIsImxhc3RQYXJ0SW5kZXgiLCJpbmRleCIsInBhcnRJbmRleCIsInN0cmluZ3MiLCJ2YWx1ZXMiLCJub2RlIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiY291bnQiLCJlbmRzV2l0aCIsInN0cmluZ0ZvclBhcnQiLCJsYXN0QXR0cmlidXRlTmFtZVJlZ2V4IiwiZXhlYyIsImF0dHJpYnV0ZUxvb2t1cE5hbWUiLCJ0b0xvd2VyQ2FzZSIsImF0dHJpYnV0ZVZhbHVlIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwic3RhdGljcyIsInNwbGl0IiwicHVzaCIsInR5cGUiLCJ0YWdOYW1lIiwiY3VycmVudE5vZGUiLCJkYXRhIiwiaW5kZXhPZiIsInBhcmVudCIsInBhcmVudE5vZGUiLCJsYXN0SW5kZXgiLCJpbnNlcnQiLCJjcmVhdGVNYXJrZXIiLCJtYXRjaCIsImNyZWF0ZVRleHROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicHJldmlvdXNTaWJsaW5nIiwicG9wIiwic3RyIiwic3VmZml4IiwiaXNUZW1wbGF0ZVBhcnRBY3RpdmUiLCJwYXJ0IiwiY3JlYXRlQ29tbWVudCIsInJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlIiwidGVtcGxhdGUiLCJuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMiLCJub2RlSW5kZXgiLCJyZW1vdmVDb3VudCIsIm5vZGVzVG9SZW1vdmVJblRlbXBsYXRlIiwiY3VycmVudFJlbW92aW5nTm9kZSIsImhhcyIsImZvckVhY2giLCJjb3VudE5vZGVzIiwic3RhcnRJbmRleCIsImRpcmVjdGl2ZXMiLCJXZWFrTWFwIiwiZiIsImFyZ3MiLCJzZXQiLCJpc0RpcmVjdGl2ZSIsIm5vQ2hhbmdlIiwibm90aGluZyIsInByb2Nlc3NvciIsIm9wdGlvbnMiLCJfX3BhcnRzIiwic2V0VmFsdWUiLCJjb21taXQiLCJmcmFnbWVudCIsImNsb25lTm9kZSIsImltcG9ydE5vZGUiLCJub2RlTmFtZSIsImhhbmRsZVRleHRFeHByZXNzaW9uIiwiaW5zZXJ0QWZ0ZXJOb2RlIiwiaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMiLCJhZG9wdE5vZGUiLCJ1cGdyYWRlIiwiY29tbWVudE1hcmtlciIsImh0bWwiLCJpc0NvbW1lbnRCaW5kaW5nIiwiY29tbWVudE9wZW4iLCJsYXN0SW5kZXhPZiIsImF0dHJpYnV0ZU1hdGNoIiwic3Vic3RyIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImdldEhUTUwiLCJpc1ByaW1pdGl2ZSIsImlzSXRlcmFibGUiLCJpc0FycmF5IiwiaXRlcmF0b3IiLCJBdHRyaWJ1dGVDb21taXR0ZXIiLCJkaXJ0eSIsIl9jcmVhdGVQYXJ0IiwidGV4dCIsInYiLCJzZXRBdHRyaWJ1dGUiLCJfZ2V0VmFsdWUiLCJjb21taXR0ZXIiLCJkaXJlY3RpdmUiLCJfX3BlbmRpbmdWYWx1ZSIsInN0YXJ0Tm9kZSIsImFwcGVuZENoaWxkIiwiZW5kTm9kZSIsInJlZiIsIl9faW5zZXJ0IiwiX19jb21taXRUZXh0IiwiX19jb21taXRUZW1wbGF0ZVJlc3VsdCIsIk5vZGUiLCJfX2NvbW1pdE5vZGUiLCJfX2NvbW1pdEl0ZXJhYmxlIiwiY2xlYXIiLCJ2YWx1ZUFzU3RyaW5nIiwidGVtcGxhdGVGYWN0b3J5IiwidXBkYXRlIiwiaW5zdGFuY2UiLCJfY2xvbmUiLCJpdGVtUGFydHMiLCJpdGVtUGFydCIsIml0ZW0iLCJhcHBlbmRJbnRvUGFydCIsImluc2VydEFmdGVyUGFydCIsIkVycm9yIiwiUHJvcGVydHlDb21taXR0ZXIiLCJzdXBlciIsInNpbmdsZSIsIlByb3BlcnR5UGFydCIsImV2ZW50T3B0aW9uc1N1cHBvcnRlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2UiLCJldmVudE5hbWUiLCJldmVudENvbnRleHQiLCJfX2JvdW5kSGFuZGxlRXZlbnQiLCJoYW5kbGVFdmVudCIsIm5ld0xpc3RlbmVyIiwib2xkTGlzdGVuZXIiLCJzaG91bGRSZW1vdmVMaXN0ZW5lciIsImNhcHR1cmUiLCJvbmNlIiwicGFzc2l2ZSIsInNob3VsZEFkZExpc3RlbmVyIiwiX19vcHRpb25zIiwiZ2V0T3B0aW9ucyIsImV2ZW50IiwidGVtcGxhdGVDYWNoZSIsInRlbXBsYXRlQ2FjaGVzIiwic3RyaW5nc0FycmF5Iiwia2V5U3RyaW5nIiwiTWFwIiwiam9pbiIsImdldFRlbXBsYXRlRWxlbWVudCIsImRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciIsInByZWZpeCIsImdldFRlbXBsYXRlQ2FjaGVLZXkiLCJzY29wZU5hbWUiLCJjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uIiwiU2hhZHlDU1MiLCJwcmVwYXJlVGVtcGxhdGVEb20iLCJjb25zb2xlIiwid2FybiIsInNoYWR5VGVtcGxhdGVGYWN0b3J5IiwiY2FjaGVLZXkiLCJURU1QTEFURV9UWVBFUyIsInNoYWR5UmVuZGVyU2V0IiwiU2V0IiwicHJlcGFyZVRlbXBsYXRlU3R5bGVzIiwicmVuZGVyZWRET00iLCJhZGQiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJzdHlsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29uZGVuc2VkU3R5bGUiLCJzdHlsZSIsInRleHRDb250ZW50IiwidGVtcGxhdGVzIiwiZnJvbSIsInJlbW92ZVN0eWxlc0Zyb21MaXRUZW1wbGF0ZXMiLCJyZWZOb2RlIiwiaW5zZXJ0Q291bnQiLCJ3YWxrZXJJbmRleCIsImluc2VydE5vZGVJbnRvVGVtcGxhdGUiLCJmaXJzdENoaWxkIiwicXVlcnlTZWxlY3RvciIsIm5hdGl2ZVNoYWRvdyIsInJlbW92ZXMiLCJKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5IiwicHJvcCIsIl9vYmoiLCJkZWZhdWx0Q29udmVydGVyIiwiQm9vbGVhbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJOdW1iZXIiLCJwYXJzZSIsIm5vdEVxdWFsIiwib2xkIiwiZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb24iLCJhdHRyaWJ1dGUiLCJjb252ZXJ0ZXIiLCJyZWZsZWN0IiwiaGFzQ2hhbmdlZCIsIlVwZGF0aW5nRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiX3VwZGF0ZVN0YXRlIiwiX2luc3RhbmNlUHJvcGVydGllcyIsIl91cGRhdGVQcm9taXNlIiwicmVzIiwiX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIiLCJfY2hhbmdlZFByb3BlcnRpZXMiLCJfcmVmbGVjdGluZ1Byb3BlcnRpZXMiLCJpbml0aWFsaXplIiwiZmluYWxpemUiLCJfY2xhc3NQcm9wZXJ0aWVzIiwiYXR0ciIsIl9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkiLCJfYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcCIsInN1cGVyUHJvcGVydGllcyIsImdldFByb3RvdHlwZU9mIiwiayIsIl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMiLCJub0FjY2Vzc29yIiwiZGVzY3JpcHRvciIsImdldFByb3BlcnR5RGVzY3JpcHRvciIsIl9vcHRpb25zIiwib2xkVmFsdWUiLCJfcmVxdWVzdFVwZGF0ZSIsImNvbmZpZ3VyYWJsZSIsInN1cGVyQ3RvciIsInByb3BzIiwicHJvcGVydGllcyIsInByb3BLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNyZWF0ZVByb3BlcnR5IiwiZnJvbUF0dHJpYnV0ZSIsInRvQXR0cmlidXRlIiwiX3NhdmVJbnN0YW5jZVByb3BlcnRpZXMiLCJfdiIsImVuYWJsZVVwZGF0aW5nIiwiX2F0dHJpYnV0ZVRvUHJvcGVydHkiLCJjdG9yIiwiYXR0clZhbHVlIiwiX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZSIsInByb3BOYW1lIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwiX3Byb3BlcnR5VmFsdWVGcm9tQXR0cmlidXRlIiwic2hvdWxkUmVxdWVzdFVwZGF0ZSIsIl92YWx1ZUhhc0NoYW5nZWQiLCJfaGFzUmVxdWVzdGVkVXBkYXRlIiwiX2VucXVldWVVcGRhdGUiLCJ1cGRhdGVDb21wbGV0ZSIsInBlcmZvcm1VcGRhdGUiLCJfYXBwbHlJbnN0YW5jZVByb3BlcnRpZXMiLCJzaG91bGRVcGRhdGUiLCJjaGFuZ2VkUHJvcGVydGllcyIsIl9tYXJrVXBkYXRlZCIsImZpcnN0VXBkYXRlZCIsInVwZGF0ZWQiLCJfZ2V0VXBkYXRlQ29tcGxldGUiLCJzaXplIiwiX3Byb3BlcnR5VG9BdHRyaWJ1dGUiLCJjdXN0b21FbGVtZW50IiwiY2xhc3NPckRlc2NyaXB0b3IiLCJjbGF6eiIsImRlZmluZSIsImxlZ2FjeUN1c3RvbUVsZW1lbnQiLCJraW5kIiwiZWxlbWVudHMiLCJzdGFuZGFyZEN1c3RvbUVsZW1lbnQiLCJzdGFuZGFyZFByb3BlcnR5IiwicGxhY2VtZW50IiwiaW5pdGlhbGl6ZXIiLCJwcm90b09yRGVzY3JpcHRvciIsInByb3RvIiwibGVnYWN5UHJvcGVydHkiLCJxdWVyeSIsInNlbGVjdG9yIiwicmVuZGVyUm9vdCIsImxlZ2FjeVF1ZXJ5Iiwic3RhbmRhcmRRdWVyeSIsInN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyIsIkRvY3VtZW50IiwiQ1NTU3R5bGVTaGVldCIsImNvbnN0cnVjdGlvblRva2VuIiwiQ1NTUmVzdWx0IiwiY3NzVGV4dCIsInNhZmVUb2tlbiIsIl9zdHlsZVNoZWV0IiwicmVwbGFjZVN5bmMiLCJjc3MiLCJyZWR1Y2UiLCJhY2MiLCJpZHgiLCJ0ZXh0RnJvbUNTU1Jlc3VsdCIsInJlbmRlck5vdEltcGxlbWVudGVkIiwidXNlclN0eWxlcyIsImdldFN0eWxlcyIsIl9zdHlsZXMiLCJhZGRTdHlsZXMiLCJyZWR1Y2VSaWdodCIsInVuc2hpZnQiLCJfZ2V0VW5pcXVlU3R5bGVzIiwiY3JlYXRlUmVuZGVyUm9vdCIsIlNoYWRvd1Jvb3QiLCJhZG9wdFN0eWxlcyIsImF0dGFjaFNoYWRvdyIsImFkb3B0ZWRTdHlsZVNoZWV0cyIsIm1hcCIsInN0eWxlU2hlZXQiLCJfbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzIiwiU2NvcGluZ1NoaW0iLCJwcmVwYXJlQWRvcHRlZENzc1RleHQiLCJsb2NhbE5hbWUiLCJjb25uZWN0ZWRDYWxsYmFjayIsImhhc1VwZGF0ZWQiLCJzdHlsZUVsZW1lbnQiLCJ0ZW1wbGF0ZVJlc3VsdCIsInJlbmRlciIsImhhc1JlbmRlcmVkIiwibmVlZHNTY29waW5nIiwiaG9zdCIsImZpcnN0U2NvcGVSZW5kZXIiLCJyZW5kZXJDb250YWluZXIiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYXBwZW5kSW50byIsImRlbGV0ZSIsInN1cHBvcnRzUGFzc2l2ZSIsImZuIiwib3B0aW9uc0Jsb2NrIiwibWRjRm91bmRhdGlvbiIsImRlc3Ryb3kiLCJtZGNGb3VuZGF0aW9uQ2xhc3MiLCJjcmVhdGVBZGFwdGVyIiwiaW5pdCIsImNyZWF0ZUZvdW5kYXRpb24iLCJNRENGb3VuZGF0aW9uIiwiYWRhcHRlciIsImFkYXB0ZXJfIiwiTk9UQ0hfRUxFTUVOVF9TRUxFQ1RPUiIsIm51bWJlcnMiLCJOT1RDSF9FTEVNRU5UX1BBRERJTkciLCJjc3NDbGFzc2VzIiwiTk9fTEFCRUwiLCJPVVRMSU5FX05PVENIRUQiLCJPVVRMSU5FX1VQR1JBREVEIiwiX3N1cGVyIiwiTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uIiwiZGVmYXVsdEFkYXB0ZXIiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwic2V0Tm90Y2hXaWR0aFByb3BlcnR5IiwicmVtb3ZlTm90Y2hXaWR0aFByb3BlcnR5Iiwibm90Y2giLCJub3RjaFdpZHRoIiwiY2xvc2VOb3RjaCIsIndpZHRoIiwib3BlbiIsImxhc3RPcGVuIiwiY2xhc3NOYW1lIiwibWRjUm9vdCIsImNsYXNzTGlzdCIsInJlbW92ZSIsIm5vdGNoRWxlbWVudCIsInNldFByb3BlcnR5IiwicmVtb3ZlUHJvcGVydHkiLCJzaG91bGRPcGVuIiwib3Blbk9yQ2xvc2UiLCJkZWxlZ2F0ZXNGb2N1cyIsImZvcm1FbGVtZW50IiwiZm9jdXMiLCJjbGljayIsImxhYmVsIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiTEFCRUxfRkxPQVRfQUJPVkUiLCJMQUJFTF9TSEFLRSIsIlJPT1QiLCJNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbiIsIl90aGlzIiwic2hha2VBbmltYXRpb25FbmRIYW5kbGVyXyIsImhhbmRsZVNoYWtlQW5pbWF0aW9uRW5kXyIsImdldFdpZHRoIiwicmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIiLCJkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyIiwic2hha2UiLCJzaG91bGRTaGFrZSIsImZsb2F0Iiwic2hvdWxkRmxvYXQiLCJfYSIsInBhcnRUb0ZvdW5kYXRpb25NYXAiLCJmbG9hdGluZ0xhYmVsIiwibGFzdEZvdW5kYXRpb24iLCJsYWJlbEVsZW1lbnQiLCJsYWJlbENoYW5nZUV2ZW50Iiwic2Nyb2xsV2lkdGgiLCJldnRUeXBlIiwiaGFuZGxlciIsImZvdW5kYXRpb24iLCJMSU5FX1JJUFBMRV9BQ1RJVkUiLCJMSU5FX1JJUFBMRV9ERUFDVElWQVRJTkciLCJNRENMaW5lUmlwcGxlRm91bmRhdGlvbiIsInRyYW5zaXRpb25FbmRIYW5kbGVyXyIsImV2dCIsImhhbmRsZVRyYW5zaXRpb25FbmQiLCJoYXNDbGFzcyIsInNldFN0eWxlIiwicmVnaXN0ZXJFdmVudEhhbmRsZXIiLCJkZXJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwiYWN0aXZhdGUiLCJzZXRSaXBwbGVDZW50ZXIiLCJ4Q29vcmRpbmF0ZSIsImRlYWN0aXZhdGUiLCJpc0RlYWN0aXZhdGluZyIsInByb3BlcnR5TmFtZSIsImxpbmVSaXBwbGUiLCJsaW5lRWxlbWVudCIsImNvbnRhaW5zIiwiQVJJQV9DT05UUk9MUyIsIklOUFVUX1NFTEVDVE9SIiwiTEFCRUxfU0VMRUNUT1IiLCJMRUFESU5HX0lDT05fU0VMRUNUT1IiLCJMSU5FX1JJUFBMRV9TRUxFQ1RPUiIsIk9VVExJTkVfU0VMRUNUT1IiLCJUUkFJTElOR19JQ09OX1NFTEVDVE9SIiwiRElTQUJMRUQiLCJGT0NVU0VEIiwiRlVMTFdJRFRIIiwiSEVMUEVSX0xJTkUiLCJJTlZBTElEIiwiTEFCRUxfRkxPQVRJTkciLCJPVVRMSU5FRCIsIlRFWFRBUkVBIiwiV0lUSF9MRUFESU5HX0lDT04iLCJXSVRIX1RSQUlMSU5HX0lDT04iLCJMQUJFTF9TQ0FMRSIsIlZBTElEQVRJT05fQVRUUl9XSElURUxJU1QiLCJBTFdBWVNfRkxPQVRfVFlQRVMiLCJQT0lOVEVSRE9XTl9FVkVOVFMiLCJJTlRFUkFDVElPTl9FVkVOVFMiLCJNRENUZXh0RmllbGRGb3VuZGF0aW9uIiwiZm91bmRhdGlvbk1hcCIsImlzRm9jdXNlZF8iLCJyZWNlaXZlZFVzZXJJbnB1dF8iLCJpc1ZhbGlkXyIsInVzZU5hdGl2ZVZhbGlkYXRpb25fIiwiaGVscGVyVGV4dF8iLCJoZWxwZXJUZXh0IiwiY2hhcmFjdGVyQ291bnRlcl8iLCJjaGFyYWN0ZXJDb3VudGVyIiwibGVhZGluZ0ljb25fIiwibGVhZGluZ0ljb24iLCJ0cmFpbGluZ0ljb25fIiwidHJhaWxpbmdJY29uIiwiaW5wdXRGb2N1c0hhbmRsZXJfIiwiYWN0aXZhdGVGb2N1cyIsImlucHV0Qmx1ckhhbmRsZXJfIiwiZGVhY3RpdmF0ZUZvY3VzIiwiaW5wdXRJbnB1dEhhbmRsZXJfIiwiaGFuZGxlSW5wdXQiLCJzZXRQb2ludGVyWE9mZnNldF8iLCJzZXRUcmFuc2Zvcm1PcmlnaW4iLCJ0ZXh0RmllbGRJbnRlcmFjdGlvbkhhbmRsZXJfIiwiaGFuZGxlVGV4dEZpZWxkSW50ZXJhY3Rpb24iLCJ2YWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcl8iLCJhdHRyaWJ1dGVzTGlzdCIsImhhbmRsZVZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2UiLCJnZXROYXRpdmVJbnB1dF8iLCJzaG91bGRBbHdheXNGbG9hdF8iLCJnZXRWYWx1ZSIsImlzQmFkSW5wdXRfIiwiaXNWYWxpZCIsInJlZ2lzdGVyVGV4dEZpZWxkSW50ZXJhY3Rpb25IYW5kbGVyIiwiZGVyZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlciIsInJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIiLCJkZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIiLCJyZWdpc3RlclZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyIiwiTXV0YXRpb25PYnNlcnZlciIsImRlcmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlciIsImdldE5hdGl2ZUlucHV0IiwiaXNGb2N1c2VkIiwiYWN0aXZhdGVMaW5lUmlwcGxlIiwiZGVhY3RpdmF0ZUxpbmVSaXBwbGUiLCJzZXRMaW5lUmlwcGxlVHJhbnNmb3JtT3JpZ2luIiwic2hha2VMYWJlbCIsImZsb2F0TGFiZWwiLCJoYXNMYWJlbCIsImdldExhYmVsV2lkdGgiLCJoYXNPdXRsaW5lIiwibm90Y2hPdXRsaW5lIiwiY2xvc2VPdXRsaW5lIiwic3R5bGVGbG9hdGluZ18iLCJ2YWxpZGF0aW9uT2JzZXJ2ZXJfIiwic2V0Q2hhcmFjdGVyQ291bnRlcl8iLCJuYXRpdmVJbnB1dCIsImRpc2FibGVkIiwic29tZSIsImF0dHJpYnV0ZU5hbWUiLCJzdHlsZVZhbGlkaXR5XyIsIm9wZW5Ob3RjaCIsImxhYmVsV2lkdGgiLCJzdHlsZUZvY3VzZWRfIiwic2hvd1RvU2NyZWVuUmVhZGVyIiwidG91Y2hlcyIsInRhcmdldEV2ZW50IiwidGFyZ2V0Q2xpZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm5vcm1hbGl6ZWRYIiwiY2xpZW50WCIsImxlZnQiLCJhdXRvQ29tcGxldGVGb2N1cyIsImlzTmF0aXZlSW5wdXRWYWxpZF8iLCJzZXRWYWxpZCIsInNldFVzZU5hdGl2ZVZhbGlkYXRpb24iLCJ1c2VOYXRpdmVWYWxpZGF0aW9uIiwiaXNEaXNhYmxlZCIsInNldERpc2FibGVkIiwic3R5bGVEaXNhYmxlZF8iLCJzZXRIZWxwZXJUZXh0Q29udGVudCIsInNldENvbnRlbnQiLCJzZXRMZWFkaW5nSWNvbkFyaWFMYWJlbCIsInNldEFyaWFMYWJlbCIsInNldExlYWRpbmdJY29uQ29udGVudCIsInNldFRyYWlsaW5nSWNvbkFyaWFMYWJlbCIsInNldFRyYWlsaW5nSWNvbkNvbnRlbnQiLCJjdXJyZW50TGVuZ3RoIiwibWF4TGVuZ3RoIiwic2V0Q291bnRlclZhbHVlIiwidmFsaWRpdHkiLCJiYWRJbnB1dCIsInZhbGlkIiwic2V0VmFsaWRpdHkiLCJpc0Zsb2F0aW5nIiwiQ2xhc3NMaXN0IiwiY2xhc3NlcyIsImNoYW5nZWQiLCJjbHMiLCJjbGFzc1N0cmluZyIsInByZXZpb3VzQ2xhc3Nlc0NhY2hlIiwiY2xhc3NNYXAiLCJjbGFzc0luZm8iLCJwcmV2aW91c0NsYXNzZXMiLCJwcmV2aW91c1ZhbHVlcyIsImlmRGVmaW5lZCIsInByZXZpb3VzVmFsdWUiLCJST09UX1NFTEVDVE9SIiwiTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24iLCJtaW4iLCJob3N0RWxlbWVudCIsInBhc3NpdmVFdmVudHMiLCJjcmVhdGVWYWxpZGl0eU9iaiIsImN1c3RvbVZhbGlkaXR5Iiwib2JqZWN0aWZpZWRDdXN0b21WYWxpZGl0eSIsImN1c3RvbUVycm9yIiwicGF0dGVybk1pc21hdGNoIiwicmFuZ2VPdmVyZmxvdyIsInJhbmdlVW5kZXJmbG93Iiwic3RlcE1pc21hdGNoIiwidG9vTG9uZyIsInRvb1Nob3J0IiwidHlwZU1pc21hdGNoIiwidmFsdWVNaXNzaW5nIiwicGxhY2Vob2xkZXIiLCJpY29uIiwiaWNvblRyYWlsaW5nIiwicmVxdWlyZWQiLCJvdXRsaW5lZCIsImZ1bGxXaWR0aCIsImhlbHBlciIsInZhbGlkYXRlT25Jbml0aWFsUmVuZGVyIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJhdXRvVmFsaWRhdGUiLCJwYXR0ZXJuIiwibWF4IiwiaGVscGVyUGVyc2lzdGVudCIsImNoYXJDb3VudGVyIiwiZW5kQWxpZ25lZCIsInJlYWRPbmx5Iiwib3V0bGluZU9wZW4iLCJvdXRsaW5lV2lkdGgiLCJpc1VpVmFsaWQiLCJfdmFsaWRpdHkiLCJfb3V0bGluZVVwZGF0ZUNvbXBsZXRlIiwiX3ZhbHVlU2V0T25JbnB1dEV2ZW50IiwidmFsaWRpdHlUcmFuc2Zvcm0iLCJfY2hlY2tWYWxpZGl0eSIsIndpbGxWYWxpZGF0ZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiY2hhckNvdW50ZXJWaXNpYmxlIiwiZm9jdXNFdnQiLCJDdXN0b21FdmVudCIsImJsdXJFdnQiLCJibHVyIiwic2VsZWN0Iiwic2VsZWN0aW9uRGlyZWN0aW9uIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJyaXBwbGUiLCJyZW5kZXJJY29uIiwicmVuZGVySW5wdXQiLCJyZW5kZXJPdXRsaW5lZCIsInJlbmRlckxhYmVsVGV4dCIsInJlbmRlckhlbHBlclRleHQiLCJyZW5kZXJDaGFyQ291bnRlciIsIm1heExlbmd0aEJlY2FtZURlZmluZWQiLCJtYXhMZW5ndGhCZWNhbWVVbmRlZmluZWQiLCJtYXhPclVuZGVmIiwiaW5wdXRNb2RlIiwiaGFuZGxlSW5wdXRDaGFuZ2UiLCJvbklucHV0Qmx1ciIsImlzVHJhaWxpbmdJY29uIiwibGFiZWxUZW1wbGF0ZSIsIm9uTGFiZWxDaGFuZ2UiLCJjaGFyQ291bnRlclRlbXBsYXRlIiwic2hvd1ZhbGlkYXRpb25NZXNzYWdlIiwicm9vdENsYXNzZXMiLCJoaWRkZW4iLCJzaG91bGRSZW5kZXJIZWxwZXJUZXh0IiwiY291bnRlckNsYXNzZXMiLCJyZXBvcnRWYWxpZGl0eSIsImludmFsaWRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hlY2tWYWxpZGl0eSIsIm5hdGl2ZVZhbGlkaXR5IiwibWVzc2FnZSIsInNldEN1c3RvbVZhbGlkaXR5IiwiY2hhckNvdW50ZXJFbGVtZW50IiwiY2hhckNvdW50ZXJGb3VuZGF0aW9uIiwiZ2V0Um9vdEFkYXB0ZXJNZXRob2RzIiwiZ2V0SW5wdXRBZGFwdGVyTWV0aG9kcyIsImdldExhYmVsQWRhcHRlck1ldGhvZHMiLCJnZXRMaW5lUmlwcGxlQWRhcHRlck1ldGhvZHMiLCJnZXRPdXRsaW5lQWRhcHRlck1ldGhvZHMiLCJvYnNlcnZlciIsIm11dGF0aW9uc0xpc3QiLCJtdXRhdGlvbiIsImZpbHRlciIsImdldEF0dHJpYnV0ZXNMaXN0Iiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJzaGFkb3dSb290IiwiYWN0aXZlRWxlbWVudCIsImZsb2F0aW5nTGFiZWxGb3VuZGF0aW9uIiwibGluZVJpcHBsZUVsZW1lbnQiLCJsaW5lUmlwcGxlRm91bmRhdGlvbiIsIm91dGxpbmVFbGVtZW50IiwibGF5b3V0IiwibGVnYWN5RXZlbnRPcHRpb25zIiwic3RhbmRhcmRFdmVudE9wdGlvbnMiLCJ0b1N0cmluZyIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RlZmluZWQiLCJpc0JsYW5rIiwidHJpbSIsIkNvbmZpZyIsImlzQ2FzZVNlbnNpdGl2ZSIsImluY2x1ZGVTY29yZSIsImtleXMiLCJzaG91bGRTb3J0Iiwic29ydEZuIiwiYSIsInNjb3JlIiwiaW5jbHVkZU1hdGNoZXMiLCJmaW5kQWxsTWF0Y2hlcyIsIm1pbk1hdGNoQ2hhckxlbmd0aCIsImxvY2F0aW9uIiwidGhyZXNob2xkIiwiZGlzdGFuY2UiLCJ1c2VFeHRlbmRlZFNlYXJjaCIsImdldEZuIiwib2JqIiwicGF0aCIsImxpc3QiLCJhcnIiLCJfZ2V0IiwiZG90SW5kZXgiLCJyZW1haW5pbmciLCJsZW4iLCJiYXNlVG9TdHJpbmciLCJjb21wdXRlU2NvcmUiLCJlcnJvcnMiLCJjdXJyZW50TG9jYXRpb24iLCJleHBlY3RlZExvY2F0aW9uIiwiYWNjdXJhY3kiLCJwcm94aW1pdHkiLCJhYnMiLCJzZWFyY2giLCJwYXR0ZXJuQWxwaGFiZXQiLCJwYXR0ZXJuTGVuIiwidGV4dExlbiIsImN1cnJlbnRUaHJlc2hvbGQiLCJiZXN0TG9jYXRpb24iLCJtYXRjaE1hc2siLCJsYXN0Qml0QXJyIiwiZmluYWxTY29yZSIsImJpbk1heCIsIm1hc2siLCJNQVhfQklUUyIsImJpbk1pbiIsImJpbk1pZCIsImZsb29yIiwiZmluaXNoIiwiYml0QXJyIiwiaiIsImNoYXJNYXRjaCIsImNoYXJBdCIsImlzTWF0Y2giLCJtYXRjaGVkSW5kaWNlcyIsIm1hdGNobWFzayIsImNvbnZlcnRNYXNrVG9JbmRpY2VzIiwiY3JlYXRlUGF0dGVybkFscGhhYmV0IiwiQml0YXBTZWFyY2giLCJjaHVua3MiLCJzdWJzdHJpbmciLCJhbHBoYWJldCIsIiQiLCJzZWFyY2hJblN0cmluZyIsImFsbE1hdGNoZWRJbmRpY2VzIiwidG90YWxTY29yZSIsImhhc01hdGNoZXMiLCJCYXNlTWF0Y2giLCJnZXRNYXRjaCIsIm11bHRpUmVnZXgiLCJzaW5nbGVSZWdleCIsImV4cCIsIm1hdGNoZXMiLCJFeGFjdE1hdGNoIiwiRnV6enlNYXRjaCIsIl9iaXRhcFNlYXJjaCIsInNlYXJjaGVycyIsInN0YXJ0c1dpdGgiLCJzZWFyY2hlcnNMZW4iLCJTUEFDRV9SRSIsIk11bHRpTWF0Y2hTZXQiLCJTUEFDRSIsImNyZWF0ZUluZGV4IiwiaW5kZXhlZExpc3QiLCJyZWNvcmQiLCJrZXlzTGVuIiwic3ViUmVjb3JkcyIsImFycmF5SW5kZXgiLCJzdWJSZWNvcmQiLCJhcnJMZW4iLCJLZXlTdG9yZSIsIl9rZXlzIiwiX2tleU5hbWVzIiwiX2xlbmd0aCIsIndlaWdodCIsInRvdGFsV2VpZ2h0Iiwia2V5TmFtZSIsImtleVdlaWdodCIsInRyYW5zZm9ybU1hdGNoZXMiLCJpbmRpY2VzIiwicmVmSW5kZXgiLCJ0cmFuc2Zvcm1TY29yZSIsInJlZ2lzdGVyZWRTZWFyY2hlcnMiLCJGdXNlIiwiX3Byb2Nlc3NLZXlzIiwic2V0Q29sbGVjdGlvbiIsImxpc3RJc1N0cmluZ0FycmF5Iiwic2V0SW5kZXgiLCJfY3JlYXRlSW5kZXgiLCJsaXN0SW5kZXgiLCJfaW5kZXhlZExpc3QiLCJfa2V5U3RvcmUiLCJvcHRzIiwibGltaXQiLCJzZWFyY2hlciIsInNlYXJjaGVyQ2xhc3MiLCJjb25kaXRpb24iLCJyZXN1bHRzIiwiX3NlYXJjaFVzaW5nIiwiX2NvbXB1dGVTY29yZSIsIl9zb3J0IiwiX2Zvcm1hdCIsInNlYXJjaFJlc3VsdCIsInNlYXJjaEluIiwia2V5TmFtZXMiLCJhcnJJdGVtIiwicmVzdWx0c0xlbiIsIm51bU1hdGNoZXMiLCJFUFNJTE9OIiwibm9ybSIsInNxcnQiLCJwb3ciLCJzb3J0IiwiZmluYWxPdXRwdXQiLCJ0cmFuc2Zvcm1lcnMiLCJyZWdpc3RlciIsInF1ZXJ5SXRlbSIsImZvdW5kIiwidG9rZW4iLCJpc011bHRpTWF0Y2giLCJpc1NpbmdsZU1hdGNoIiwicGFyc2VRdWVyeSIsIl8iLCJxTGVuIiwicExlbiIsInZlcnNpb24iLCJjb25maWciLCJhcGlCYXNlVXJsIiwidGl0bGUiLCJtYXhSZXN1bHRzIiwibGlua3MiLCJhY3Rpb24iLCJ1cmwiLCJ0YWdzIiwiaW50ZXJuYWwiLCJpc0xvYWRpbmciLCJfc3VicyIsIl9pbml0TGlua3MiLCJfdXBkYXRlU3Vic2NyaWJlcnMiLCJ2YWwiLCJfZ2V0U3RhdGUiLCJjYiIsImluZCIsInNwbGljZSIsImNvb2tpZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImdldENvb2tpZSIsIl9zZXRMb2FkaW5nIiwiX2ZldGNoTGlua3MiLCJfc2V0TGlua3MiLCJkYXlzIiwibm9Eb21haW4iLCJleHBpcmVzIiwiZGF0ZSIsIkRhdGUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInRvVVRDU3RyaW5nIiwiZG9tYWluTmFtZSIsImdldEhvc3ROYW1lIiwiaHJlZiIsImRvbWFpbiIsImNvb2tpZVN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsImxvZyIsInNldENvb2tpZSIsImZldGNoIiwib2siLCJqc29uIiwiY29udGVudHMiLCJlcnIiLCJwcmV2aW91c1N0eWxlUHJvcGVydHlDYWNoZSIsInN0eWxlTWFwIiwic3R5bGVJbmZvIiwicHJldmlvdXNTdHlsZVByb3BlcnRpZXMiLCJob3ZlcmVkIiwibGluayIsImJhY2tncm91bmRJbWFnZSIsImZhdmljb25VcmwiLCJfc3RhdGVDaGFuZ2VkIiwic3RhdGUiLCJfdXBkYXRlUmVzdWx0cyIsIm1hdGNoQWxsIiwiX29uS2V5RG93biIsIm1hdGNoZWQiLCJjdHJsS2V5IiwiaW5wdXQiLCJhY3Rpb25GbiIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX2xvYWRfYWN0aW9uIiwic3RvcmUiLCJsb2FkIiwiX29uSW5wdXQiLCJfdXBkYXRlUmVzdWx0c1Njcm9sbCIsInJlc1JlY3QiLCJpdGVtUmVjdCIsInRvcERpZmYiLCJ0b3AiLCJzY3JvbGxCeSIsImJlaGF2aW9yIiwiYm90dG9tRGlmZiIsImJvdHRvbSIsIl91bnN1YiIsInN1YnNjcmliZSIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGFuZ2VzIiwic2V0VGltZW91dCIsImZpbGwiLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0cmF0aW9uIiwiY2F0Y2giLCJyZWdpc3RyYXRpb25FcnJvciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxl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QWJQLEdBQVEsR0FEcEJxUixHQUFjLGNBQ0YsSUNKYixJQUFhLEdBQWIsY0FBMkIsR0FDekIsb0JBQ0UsTUFBTyxDQUFFLElBR1gsU0FDRSxPQUFPLENBQUk7O1FBTkYsR0FBSyxHQURqQkEsR0FBYyxXQUNGLElDTlQsa0JBQW1CK21CLFdBQ3JCLzRCLE9BQU8wSixpQkFBaUIsT0FBUSxLQUM5QnF2QixVQUFVQyxjQUNUaEcsU0FBUyx1QkFDUGx6QixLQUFLbTVCLE9BR0xDLE1BQU1DIiwiZmlsZSI6InNjcmlwdHMvYXBwLjJlMzQ4NGE0MDljZGZkN2NjNzQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBUcnVlIGlmIHRoZSBjdXN0b20gZWxlbWVudHMgcG9seWZpbGwgaXMgaW4gdXNlLlxuICovXG5leHBvcnQgY29uc3QgaXNDRVBvbHlmaWxsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB3aW5kb3cuY3VzdG9tRWxlbWVudHMgIT0gbnVsbCAmJlxuICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrICE9PVxuICAgICAgICB1bmRlZmluZWQ7XG4vKipcbiAqIFJlcGFyZW50cyBub2Rlcywgc3RhcnRpbmcgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLFxuICogaW50byBhbm90aGVyIGNvbnRhaW5lciAoY291bGQgYmUgdGhlIHNhbWUgY29udGFpbmVyKSwgYmVmb3JlIGBiZWZvcmVgLiBJZlxuICogYGJlZm9yZWAgaXMgbnVsbCwgaXQgYXBwZW5kcyB0aGUgbm9kZXMgdG8gdGhlIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGFyZW50Tm9kZXMgPSAoY29udGFpbmVyLCBzdGFydCwgZW5kID0gbnVsbCwgYmVmb3JlID0gbnVsbCkgPT4ge1xuICAgIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgICAgIGNvbnN0IG4gPSBzdGFydC5uZXh0U2libGluZztcbiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShzdGFydCwgYmVmb3JlKTtcbiAgICAgICAgc3RhcnQgPSBuO1xuICAgIH1cbn07XG4vKipcbiAqIFJlbW92ZXMgbm9kZXMsIHN0YXJ0aW5nIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSwgZnJvbVxuICogYGNvbnRhaW5lcmAuXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVOb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsKSA9PiB7XG4gICAgd2hpbGUgKHN0YXJ0ICE9PSBlbmQpIHtcbiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nO1xuICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoc3RhcnQpO1xuICAgICAgICBzdGFydCA9IG47XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvbS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrZXIgPSBge3tsaXQtJHtTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMil9fX1gO1xuLyoqXG4gKiBBbiBleHByZXNzaW9uIG1hcmtlciB1c2VkIHRleHQtcG9zaXRpb25zLCBtdWx0aS1iaW5kaW5nIGF0dHJpYnV0ZXMsIGFuZFxuICogYXR0cmlidXRlcyB3aXRoIG1hcmt1cC1saWtlIHRleHQgdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3Qgbm9kZU1hcmtlciA9IGA8IS0tJHttYXJrZXJ9LS0+YDtcbmV4cG9ydCBjb25zdCBtYXJrZXJSZWdleCA9IG5ldyBSZWdFeHAoYCR7bWFya2VyfXwke25vZGVNYXJrZXJ9YCk7XG4vKipcbiAqIFN1ZmZpeCBhcHBlbmRlZCB0byBhbGwgYm91bmQgYXR0cmlidXRlIG5hbWVzLlxuICovXG5leHBvcnQgY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuLyoqXG4gKiBBbiB1cGRhdGFibGUgVGVtcGxhdGUgdGhhdCB0cmFja3MgdGhlIGxvY2F0aW9uIG9mIGR5bmFtaWMgcGFydHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZSB7XG4gICAgY29uc3RydWN0b3IocmVzdWx0LCBlbGVtZW50KSB7XG4gICAgICAgIHRoaXMucGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdO1xuICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgICAgICAvLyBFZGdlIG5lZWRzIGFsbCA0IHBhcmFtZXRlcnMgcHJlc2VudDsgSUUxMSBuZWVkcyAzcmQgcGFyYW1ldGVyIHRvIGJlIG51bGxcbiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50LmNvbnRlbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgbGFzdCBpbmRleCBhc3NvY2lhdGVkIHdpdGggYSBwYXJ0LiBXZSB0cnkgdG8gZGVsZXRlXG4gICAgICAgIC8vIHVubmVjZXNzYXJ5IG5vZGVzLCBidXQgd2UgbmV2ZXIgd2FudCB0byBhc3NvY2lhdGUgdHdvIGRpZmZlcmVudCBwYXJ0c1xuICAgICAgICAvLyB0byB0aGUgc2FtZSBpbmRleC4gVGhleSBtdXN0IGhhdmUgYSBjb25zdGFudCBub2RlIGJldHdlZW4uXG4gICAgICAgIGxldCBsYXN0UGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIHZhbHVlczogeyBsZW5ndGggfSB9ID0gcmVzdWx0O1xuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHdlIHN0aWxsIGhhdmUgcGFydHMgKHRoZSBvdXRlciBmb3ItbG9vcCksIHdlIGtub3c6XG4gICAgICAgICAgICAgICAgLy8gLSBUaGVyZSBpcyBhIHRlbXBsYXRlIGluIHRoZSBzdGFja1xuICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxIC8qIE5vZGUuRUxFTUVOVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBhdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICAvLyBQZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hbWVkTm9kZU1hcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmV0dXJuZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHBhcnRpY3VsYXIsIEVkZ2UvSUUgY2FuIHJldHVybiB0aGVtIG91dCBvZiBvcmRlciwgc28gd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc3VtZSBhIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gcGFydCBpbmRleCBhbmQgYXR0cmlidXRlIGluZGV4LlxuICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kc1dpdGgoYXR0cmlidXRlc1tpXS5uYW1lLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0ZW1wbGF0ZSBsaXRlcmFsIHNlY3Rpb24gbGVhZGluZyB1cCB0byB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gaW4gdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0ZvclBhcnQgPSBzdHJpbmdzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzdHJpbmdGb3JQYXJ0KVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGwgYm91bmQgYXR0cmlidXRlcyBoYXZlIGhhZCBhIHN1ZmZpeCBhZGRlZCBpblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVtcGxhdGVSZXN1bHQjZ2V0SFRNTCB0byBvcHQgb3V0IG9mIHNwZWNpYWwgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGluZy4gVG8gbG9vayB1cCB0aGUgYXR0cmlidXRlIHZhbHVlIHdlIGFsc28gbmVlZCB0byBhZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzdWZmaXguXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVMb29rdXBOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpICsgYm91bmRBdHRyaWJ1dGVTdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZUxvb2t1cE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0aWNzID0gYXR0cmlidXRlVmFsdWUuc3BsaXQobWFya2VyUmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ2F0dHJpYnV0ZScsIGluZGV4LCBuYW1lLCBzdHJpbmdzOiBzdGF0aWNzIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IHN0YXRpY3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzIC8qIE5vZGUuVEVYVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKG1hcmtlcikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ3MgPSBkYXRhLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyB0ZXh0IG5vZGUgZm9yIGVhY2ggbGl0ZXJhbCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIG5vZGVzIGFyZSBhbHNvIHVzZWQgYXMgdGhlIG1hcmtlcnMgZm9yIG5vZGUgcGFydHNcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc2VydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCA9IGNyZWF0ZU1hcmtlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsICYmIGVuZHNXaXRoKG1hdGNoWzJdLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgbWF0Y2hbMV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0uc2xpY2UoMCwgLWJvdW5kQXR0cmlidXRlU3VmZml4Lmxlbmd0aCkgKyBtYXRjaFszXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGluc2VydCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnbm9kZScsIGluZGV4OiArK2luZGV4IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gdGV4dCwgd2UgbXVzdCBpbnNlcnQgYSBjb21tZW50IHRvIG1hcmsgb3VyIHBsYWNlLlxuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlLCB3ZSBjYW4gdHJ1c3QgaXQgd2lsbCBzdGljayBhcm91bmQgYWZ0ZXIgY2xvbmluZy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3NbbGFzdEluZGV4XSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gc3RyaW5nc1tsYXN0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBwYXJ0IGZvciBlYWNoIG1hdGNoIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBOb2RlLkNPTU1FTlRfTk9ERSAqLykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09IG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBhIG5ldyBtYXJrZXIgbm9kZSB0byBiZSB0aGUgc3RhcnROb2RlIG9mIHRoZSBQYXJ0IGlmIGFueSBvZlxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGFyZSB0cnVlOlxuICAgICAgICAgICAgICAgICAgICAvLyAgKiBXZSBkb24ndCBoYXZlIGEgcHJldmlvdXNTaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vICAqIFRoZSBwcmV2aW91c1NpYmxpbmcgaXMgYWxyZWFkeSB0aGUgc3RhcnQgb2YgYSBwcmV2aW91cyBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PT0gbnVsbCB8fCBpbmRleCA9PT0gbGFzdFBhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQYXJ0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ25vZGUnLCBpbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG5leHRTaWJsaW5nLCBrZWVwIHRoaXMgbm9kZSBzbyB3ZSBoYXZlIGFuIGVuZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gRWxzZSwgd2UgY2FuIHJlbW92ZSBpdCB0byBzYXZlIGZ1dHVyZSBjb3N0cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoaSA9IG5vZGUuZGF0YS5pbmRleE9mKG1hcmtlciwgaSArIDEpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1lbnQgbm9kZSBoYXMgYSBiaW5kaW5nIG1hcmtlciBpbnNpZGUsIG1ha2UgYW4gaW5hY3RpdmUgcGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGJpbmRpbmcgd29uJ3Qgd29yaywgYnV0IHN1YnNlcXVlbnQgYmluZGluZ3Mgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGNvbnNpZGVyIHdoZXRoZXIgaXQncyBldmVuIHdvcnRoIGl0IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGJpbmRpbmdzIGluIGNvbW1lbnRzIHdvcmtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXg6IC0xIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHRleHQgYmluZGluZyBub2RlcyBhZnRlciB0aGUgd2FsayB0byBub3QgZGlzdHVyYiB0aGUgVHJlZVdhbGtlclxuICAgICAgICBmb3IgKGNvbnN0IG4gb2Ygbm9kZXNUb1JlbW92ZSkge1xuICAgICAgICAgICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzdWZmaXgpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoO1xuICAgIHJldHVybiBpbmRleCA+PSAwICYmIHN0ci5zbGljZShpbmRleCkgPT09IHN1ZmZpeDtcbn07XG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgPSAocGFydCkgPT4gcGFydC5pbmRleCAhPT0gLTE7XG4vLyBBbGxvd3MgYGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpYCB0byBiZSByZW5hbWVkIGZvciBhXG4vLyBzbWFsbCBtYW51YWwgc2l6ZS1zYXZpbmdzLlxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuLyoqXG4gKiBUaGlzIHJlZ2V4IGV4dHJhY3RzIHRoZSBhdHRyaWJ1dGUgbmFtZSBwcmVjZWRpbmcgYW4gYXR0cmlidXRlLXBvc2l0aW9uXG4gKiBleHByZXNzaW9uLiBJdCBkb2VzIHRoaXMgYnkgbWF0Y2hpbmcgdGhlIHN5bnRheCBhbGxvd2VkIGZvciBhdHRyaWJ1dGVzXG4gKiBhZ2FpbnN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseSBwcmVjZWRpbmcgdGhlIGV4cHJlc3Npb24sIGFzc3VtaW5nIHRoYXRcbiAqIHRoZSBleHByZXNzaW9uIGlzIGluIGFuIGF0dHJpYnV0ZS12YWx1ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgYXR0cmlidXRlcyBpbiB0aGUgSFRNTCBzcGVjOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnRzLWF0dHJpYnV0ZXNcbiAqXG4gKiBcIiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzcGFjZS1jaGFyYWN0ZXJzXG4gKlxuICogXCJcXDAtXFx4MUZcXHg3Ri1cXHg5RlwiIGFyZSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVycywgd2hpY2ggaW5jbHVkZXMgZXZlcnlcbiAqIHNwYWNlIGNoYXJhY3RlciBleGNlcHQgXCIgXCIuXG4gKlxuICogU28gYW4gYXR0cmlidXRlIGlzOlxuICogICogVGhlIG5hbWU6IGFueSBjaGFyYWN0ZXIgZXhjZXB0IGEgY29udHJvbCBjaGFyYWN0ZXIsIHNwYWNlIGNoYXJhY3RlciwgKCcpLFxuICogICAgKFwiKSwgXCI+XCIsIFwiPVwiLCBvciBcIi9cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5IFwiPVwiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnk6XG4gKiAgICAqIEFueSBjaGFyYWN0ZXIgZXhjZXB0IHNwYWNlLCAoJyksIChcIiksIFwiPFwiLCBcIj5cIiwgXCI9XCIsIChgKSwgb3JcbiAqICAgICogKFwiKSB0aGVuIGFueSBub24tKFwiKSwgb3JcbiAqICAgICogKCcpIHRoZW4gYW55IG5vbi0oJylcbiAqL1xuZXhwb3J0IGNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXggPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4vKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKShbXlxcMC1cXHgxRlxceDdGLVxceDlGIFwiJz49L10rKShbIFxceDA5XFx4MGFcXHgwY1xceDBkXSo9WyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qKD86W14gXFx4MDlcXHgwYVxceDBjXFx4MGRcIidgPD49XSp8XCJbXlwiXSp8J1teJ10qKSkkLztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQG1vZHVsZSBzaGFkeS1yZW5kZXJcbiAqL1xuaW1wb3J0IHsgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbmNvbnN0IHdhbGtlck5vZGVGaWx0ZXIgPSAxMzMgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR8VEVYVH0gKi87XG4vKipcbiAqIFJlbW92ZXMgdGhlIGxpc3Qgb2Ygbm9kZXMgZnJvbSBhIFRlbXBsYXRlIHNhZmVseS4gSW4gYWRkaXRpb24gdG8gcmVtb3ZpbmdcbiAqIG5vZGVzIGZyb20gdGhlIFRlbXBsYXRlLCB0aGUgVGVtcGxhdGUgcGFydCBpbmRpY2VzIGFyZSB1cGRhdGVkIHRvIG1hdGNoXG4gKiB0aGUgbXV0YXRlZCBUZW1wbGF0ZSBET00uXG4gKlxuICogQXMgdGhlIHRlbXBsYXRlIGlzIHdhbGtlZCB0aGUgcmVtb3ZhbCBzdGF0ZSBpcyB0cmFja2VkIGFuZFxuICogcGFydCBpbmRpY2VzIGFyZSBhZGp1c3RlZCBhcyBuZWVkZWQuXG4gKlxuICogZGl2XG4gKiAgIGRpdiMxIChyZW1vdmUpIDwtLSBzdGFydCByZW1vdmluZyAocmVtb3Zpbmcgbm9kZSBpcyBkaXYjMSlcbiAqICAgICBkaXZcbiAqICAgICAgIGRpdiMyIChyZW1vdmUpICA8LS0gY29udGludWUgcmVtb3ZpbmcgKHJlbW92aW5nIG5vZGUgaXMgc3RpbGwgZGl2IzEpXG4gKiAgICAgICAgIGRpdlxuICogZGl2IDwtLSBzdG9wIHJlbW92aW5nIHNpbmNlIHByZXZpb3VzIHNpYmxpbmcgaXMgdGhlIHJlbW92aW5nIG5vZGUgKGRpdiMxLFxuICogcmVtb3ZlZCA0IG5vZGVzKVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTm9kZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsIG5vZGVzVG9SZW1vdmUpIHtcbiAgICBjb25zdCB7IGVsZW1lbnQ6IHsgY29udGVudCB9LCBwYXJ0cyB9ID0gdGVtcGxhdGU7XG4gICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihjb250ZW50LCB3YWxrZXJOb2RlRmlsdGVyLCBudWxsLCBmYWxzZSk7XG4gICAgbGV0IHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cyk7XG4gICAgbGV0IHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuICAgIGxldCBub2RlSW5kZXggPSAtMTtcbiAgICBsZXQgcmVtb3ZlQ291bnQgPSAwO1xuICAgIGNvbnN0IG5vZGVzVG9SZW1vdmVJblRlbXBsYXRlID0gW107XG4gICAgbGV0IGN1cnJlbnRSZW1vdmluZ05vZGUgPSBudWxsO1xuICAgIHdoaWxlICh3YWxrZXIubmV4dE5vZGUoKSkge1xuICAgICAgICBub2RlSW5kZXgrKztcbiAgICAgICAgY29uc3Qgbm9kZSA9IHdhbGtlci5jdXJyZW50Tm9kZTtcbiAgICAgICAgLy8gRW5kIHJlbW92YWwgaWYgc3RlcHBlZCBwYXN0IHRoZSByZW1vdmluZyBub2RlXG4gICAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PT0gY3VycmVudFJlbW92aW5nTm9kZSkge1xuICAgICAgICAgICAgY3VycmVudFJlbW92aW5nTm9kZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQSBub2RlIHRvIHJlbW92ZSB3YXMgZm91bmQgaW4gdGhlIHRlbXBsYXRlXG4gICAgICAgIGlmIChub2Rlc1RvUmVtb3ZlLmhhcyhub2RlKSkge1xuICAgICAgICAgICAgbm9kZXNUb1JlbW92ZUluVGVtcGxhdGUucHVzaChub2RlKTtcbiAgICAgICAgICAgIC8vIFRyYWNrIG5vZGUgd2UncmUgcmVtb3ZpbmdcbiAgICAgICAgICAgIGlmIChjdXJyZW50UmVtb3ZpbmdOb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFJlbW92aW5nTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiByZW1vdmluZywgaW5jcmVtZW50IGNvdW50IGJ5IHdoaWNoIHRvIGFkanVzdCBzdWJzZXF1ZW50IHBhcnQgaW5kaWNlc1xuICAgICAgICBpZiAoY3VycmVudFJlbW92aW5nTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVtb3ZlQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAocGFydCAhPT0gdW5kZWZpbmVkICYmIHBhcnQuaW5kZXggPT09IG5vZGVJbmRleCkge1xuICAgICAgICAgICAgLy8gSWYgcGFydCBpcyBpbiBhIHJlbW92ZWQgbm9kZSBkZWFjdGl2YXRlIGl0IGJ5IHNldHRpbmcgaW5kZXggdG8gLTEgb3JcbiAgICAgICAgICAgIC8vIGFkanVzdCB0aGUgaW5kZXggYXMgbmVlZGVkLlxuICAgICAgICAgICAgcGFydC5pbmRleCA9IGN1cnJlbnRSZW1vdmluZ05vZGUgIT09IG51bGwgPyAtMSA6IHBhcnQuaW5kZXggLSByZW1vdmVDb3VudDtcbiAgICAgICAgICAgIC8vIGdvIHRvIHRoZSBuZXh0IGFjdGl2ZSBwYXJ0LlxuICAgICAgICAgICAgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzLCBwYXJ0SW5kZXgpO1xuICAgICAgICAgICAgcGFydCA9IHBhcnRzW3BhcnRJbmRleF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbm9kZXNUb1JlbW92ZUluVGVtcGxhdGUuZm9yRWFjaCgobikgPT4gbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pKTtcbn1cbmNvbnN0IGNvdW50Tm9kZXMgPSAobm9kZSkgPT4ge1xuICAgIGxldCBjb3VudCA9IChub2RlLm5vZGVUeXBlID09PSAxMSAvKiBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgKi8pID8gMCA6IDE7XG4gICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihub2RlLCB3YWxrZXJOb2RlRmlsdGVyLCBudWxsLCBmYWxzZSk7XG4gICAgd2hpbGUgKHdhbGtlci5uZXh0Tm9kZSgpKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn07XG5jb25zdCBuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMgPSAocGFydHMsIHN0YXJ0SW5kZXggPSAtMSkgPT4ge1xuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4ICsgMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgaWYgKGlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59O1xuLyoqXG4gKiBJbnNlcnRzIHRoZSBnaXZlbiBub2RlIGludG8gdGhlIFRlbXBsYXRlLCBvcHRpb25hbGx5IGJlZm9yZSB0aGUgZ2l2ZW5cbiAqIHJlZk5vZGUuIEluIGFkZGl0aW9uIHRvIGluc2VydGluZyB0aGUgbm9kZSBpbnRvIHRoZSBUZW1wbGF0ZSwgdGhlIFRlbXBsYXRlXG4gKiBwYXJ0IGluZGljZXMgYXJlIHVwZGF0ZWQgdG8gbWF0Y2ggdGhlIG11dGF0ZWQgVGVtcGxhdGUgRE9NLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0Tm9kZUludG9UZW1wbGF0ZSh0ZW1wbGF0ZSwgbm9kZSwgcmVmTm9kZSA9IG51bGwpIHtcbiAgICBjb25zdCB7IGVsZW1lbnQ6IHsgY29udGVudCB9LCBwYXJ0cyB9ID0gdGVtcGxhdGU7XG4gICAgLy8gSWYgdGhlcmUncyBubyByZWZOb2RlLCB0aGVuIHB1dCBub2RlIGF0IGVuZCBvZiB0ZW1wbGF0ZS5cbiAgICAvLyBObyBwYXJ0IGluZGljZXMgbmVlZCB0byBiZSBzaGlmdGVkIGluIHRoaXMgY2FzZS5cbiAgICBpZiAocmVmTm9kZSA9PT0gbnVsbCB8fCByZWZOb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGNvbnRlbnQsIHdhbGtlck5vZGVGaWx0ZXIsIG51bGwsIGZhbHNlKTtcbiAgICBsZXQgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzKTtcbiAgICBsZXQgaW5zZXJ0Q291bnQgPSAwO1xuICAgIGxldCB3YWxrZXJJbmRleCA9IC0xO1xuICAgIHdoaWxlICh3YWxrZXIubmV4dE5vZGUoKSkge1xuICAgICAgICB3YWxrZXJJbmRleCsrO1xuICAgICAgICBjb25zdCB3YWxrZXJOb2RlID0gd2Fsa2VyLmN1cnJlbnROb2RlO1xuICAgICAgICBpZiAod2Fsa2VyTm9kZSA9PT0gcmVmTm9kZSkge1xuICAgICAgICAgICAgaW5zZXJ0Q291bnQgPSBjb3VudE5vZGVzKG5vZGUpO1xuICAgICAgICAgICAgcmVmTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCByZWZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAocGFydEluZGV4ICE9PSAtMSAmJiBwYXJ0c1twYXJ0SW5kZXhdLmluZGV4ID09PSB3YWxrZXJJbmRleCkge1xuICAgICAgICAgICAgLy8gSWYgd2UndmUgaW5zZXJ0ZWQgdGhlIG5vZGUsIHNpbXBseSBhZGp1c3QgYWxsIHN1YnNlcXVlbnQgcGFydHNcbiAgICAgICAgICAgIGlmIChpbnNlcnRDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAocGFydEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0c1twYXJ0SW5kZXhdLmluZGV4ICs9IGluc2VydENvdW50O1xuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXggPSBuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMocGFydHMsIHBhcnRJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cywgcGFydEluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGlmeS10ZW1wbGF0ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5jb25zdCBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogQnJhbmRzIGEgZnVuY3Rpb24gYXMgYSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBzbyB0aGF0IGxpdC1odG1sIHdpbGwgY2FsbFxuICogdGhlIGZ1bmN0aW9uIGR1cmluZyB0ZW1wbGF0ZSByZW5kZXJpbmcsIHJhdGhlciB0aGFuIHBhc3NpbmcgYXMgYSB2YWx1ZS5cbiAqXG4gKiBBIF9kaXJlY3RpdmVfIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIFBhcnQgYXMgYW4gYXJndW1lbnQuIEl0IGhhcyB0aGVcbiAqIHNpZ25hdHVyZTogYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC5cbiAqXG4gKiBBIGRpcmVjdGl2ZSBfZmFjdG9yeV8gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGFyZ3VtZW50cyBmb3IgZGF0YSBhbmRcbiAqIGNvbmZpZ3VyYXRpb24gYW5kIHJldHVybnMgYSBkaXJlY3RpdmUuIFVzZXJzIG9mIGRpcmVjdGl2ZSB1c3VhbGx5IHJlZmVyIHRvXG4gKiB0aGUgZGlyZWN0aXZlIGZhY3RvcnkgYXMgdGhlIGRpcmVjdGl2ZS4gRm9yIGV4YW1wbGUsIFwiVGhlIHJlcGVhdCBkaXJlY3RpdmVcIi5cbiAqXG4gKiBVc3VhbGx5IGEgdGVtcGxhdGUgYXV0aG9yIHdpbGwgaW52b2tlIGEgZGlyZWN0aXZlIGZhY3RvcnkgaW4gdGhlaXIgdGVtcGxhdGVcbiAqIHdpdGggcmVsZXZhbnQgYXJndW1lbnRzLCB3aGljaCB3aWxsIHRoZW4gcmV0dXJuIGEgZGlyZWN0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIHVzaW5nIHRoZSBgcmVwZWF0KClgIGRpcmVjdGl2ZSBmYWN0b3J5IHRoYXQgdGFrZXMgYW5cbiAqIGFycmF5IGFuZCBhIGZ1bmN0aW9uIHRvIHJlbmRlciBhbiBpdGVtOlxuICpcbiAqIGBgYGpzXG4gKiBodG1sYDx1bD48JHtyZXBlYXQoaXRlbXMsIChpdGVtKSA9PiBodG1sYDxsaT4ke2l0ZW19PC9saT5gKX08L3VsPmBcbiAqIGBgYFxuICpcbiAqIFdoZW4gYHJlcGVhdGAgaXMgaW52b2tlZCwgaXQgcmV0dXJucyBhIGRpcmVjdGl2ZSBmdW5jdGlvbiB0aGF0IGNsb3NlcyBvdmVyXG4gKiBgaXRlbXNgIGFuZCB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uIFdoZW4gdGhlIG91dGVyIHRlbXBsYXRlIGlzIHJlbmRlcmVkLCB0aGVcbiAqIHJldHVybiBkaXJlY3RpdmUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIFBhcnQgZm9yIHRoZSBleHByZXNzaW9uLlxuICogYHJlcGVhdGAgdGhlbiBwZXJmb3JtcyBpdCdzIGN1c3RvbSBsb2dpYyB0byByZW5kZXIgbXVsdGlwbGUgaXRlbXMuXG4gKlxuICogQHBhcmFtIGYgVGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uLiBNdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFcbiAqIGZ1bmN0aW9uIG9mIHRoZSBzaWduYXR1cmUgYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC4gVGhlIHJldHVybmVkIGZ1bmN0aW9uIHdpbGxcbiAqIGJlIGNhbGxlZCB3aXRoIHRoZSBwYXJ0IG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCB7ZGlyZWN0aXZlLCBodG1sfSBmcm9tICdsaXQtaHRtbCc7XG4gKlxuICogY29uc3QgaW1tdXRhYmxlID0gZGlyZWN0aXZlKCh2KSA9PiAocGFydCkgPT4ge1xuICogICBpZiAocGFydC52YWx1ZSAhPT0gdikge1xuICogICAgIHBhcnQuc2V0VmFsdWUodilcbiAqICAgfVxuICogfSk7XG4gKi9cbmV4cG9ydCBjb25zdCBkaXJlY3RpdmUgPSAoZikgPT4gKCguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgZCA9IGYoLi4uYXJncyk7XG4gICAgZGlyZWN0aXZlcy5zZXQoZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGQ7XG59KTtcbmV4cG9ydCBjb25zdCBpc0RpcmVjdGl2ZSA9IChvKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnZnVuY3Rpb24nICYmIGRpcmVjdGl2ZXMuaGFzKG8pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEEgc2VudGluZWwgdmFsdWUgdGhhdCBzaWduYWxzIHRoYXQgYSB2YWx1ZSB3YXMgaGFuZGxlZCBieSBhIGRpcmVjdGl2ZSBhbmRcbiAqIHNob3VsZCBub3QgYmUgd3JpdHRlbiB0byB0aGUgRE9NLlxuICovXG5leHBvcnQgY29uc3Qgbm9DaGFuZ2UgPSB7fTtcbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgYSBOb2RlUGFydCB0byBmdWxseSBjbGVhciBpdHMgY29udGVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdGhpbmcgPSB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cbmltcG9ydCB7IGlzQ0VQb2x5ZmlsbCB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGlzVGVtcGxhdGVQYXJ0QWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgYFRlbXBsYXRlYCB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgRE9NIGFuZCB1cGRhdGVkXG4gKiB3aXRoIG5ldyB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZUluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZSwgcHJvY2Vzc29yLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX19wYXJ0cyA9IFtdO1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICB1cGRhdGUodmFsdWVzKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuX19wYXJ0cykge1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcnQuc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKSB7XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFydC5jb21taXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2xvbmUoKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBhIG51bWJlciBvZiBzdGVwcyBpbiB0aGUgbGlmZWN5Y2xlIG9mIGEgdGVtcGxhdGUgaW5zdGFuY2Unc1xuICAgICAgICAvLyBET00gZnJhZ21lbnQ6XG4gICAgICAgIC8vICAxLiBDbG9uZSAtIGNyZWF0ZSB0aGUgaW5zdGFuY2UgZnJhZ21lbnRcbiAgICAgICAgLy8gIDIuIEFkb3B0IC0gYWRvcHQgaW50byB0aGUgbWFpbiBkb2N1bWVudFxuICAgICAgICAvLyAgMy4gUHJvY2VzcyAtIGZpbmQgcGFydCBtYXJrZXJzIGFuZCBjcmVhdGUgcGFydHNcbiAgICAgICAgLy8gIDQuIFVwZ3JhZGUgLSB1cGdyYWRlIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICAvLyAgNS4gVXBkYXRlIC0gc2V0IG5vZGUsIGF0dHJpYnV0ZSwgcHJvcGVydHksIGV0Yy4sIHZhbHVlc1xuICAgICAgICAvLyAgNi4gQ29ubmVjdCAtIGNvbm5lY3QgdG8gdGhlIGRvY3VtZW50LiBPcHRpb25hbCBhbmQgb3V0c2lkZSBvZiB0aGlzXG4gICAgICAgIC8vICAgICBtZXRob2QuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGhhdmUgYSBmZXcgY29uc3RyYWludHMgb24gdGhlIG9yZGVyaW5nIG9mIHRoZXNlIHN0ZXBzOlxuICAgICAgICAvLyAgKiBXZSBuZWVkIHRvIHVwZ3JhZGUgYmVmb3JlIHVwZGF0aW5nLCBzbyB0aGF0IHByb3BlcnR5IHZhbHVlcyB3aWxsIHBhc3NcbiAgICAgICAgLy8gICAgdGhyb3VnaCBhbnkgcHJvcGVydHkgc2V0dGVycy5cbiAgICAgICAgLy8gICogV2Ugd291bGQgbGlrZSB0byBwcm9jZXNzIGJlZm9yZSB1cGdyYWRpbmcgc28gdGhhdCB3ZSdyZSBzdXJlIHRoYXQgdGhlXG4gICAgICAgIC8vICAgIGNsb25lZCBmcmFnbWVudCBpcyBpbmVydCBhbmQgbm90IGRpc3R1cmJlZCBieSBzZWxmLW1vZGlmeWluZyBET00uXG4gICAgICAgIC8vICAqIFdlIHdhbnQgY3VzdG9tIGVsZW1lbnRzIHRvIHVwZ3JhZGUgZXZlbiBpbiBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiB0aGVzZSBjb25zdHJhaW50cywgd2l0aCBmdWxsIGN1c3RvbSBlbGVtZW50cyBzdXBwb3J0IHdlIHdvdWxkXG4gICAgICAgIC8vIHByZWZlciB0aGUgb3JkZXI6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLCBDb25uZWN0XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEJ1dCBTYWZhcmkgZG9lcyBub3QgaW1wbGVtZW50IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSN1cGdyYWRlLCBzbyB3ZVxuICAgICAgICAvLyBjYW4gbm90IGltcGxlbWVudCB0aGF0IG9yZGVyIGFuZCBzdGlsbCBoYXZlIHVwZ3JhZGUtYmVmb3JlLXVwZGF0ZSBhbmRcbiAgICAgICAgLy8gdXBncmFkZSBkaXNjb25uZWN0ZWQgZnJhZ21lbnRzLiBTbyB3ZSBpbnN0ZWFkIHNhY3JpZmljZSB0aGVcbiAgICAgICAgLy8gcHJvY2Vzcy1iZWZvcmUtdXBncmFkZSBjb25zdHJhaW50LCBzaW5jZSBpbiBDdXN0b20gRWxlbWVudHMgdjEgZWxlbWVudHNcbiAgICAgICAgLy8gbXVzdCBub3QgbW9kaWZ5IHRoZWlyIGxpZ2h0IERPTSBpbiB0aGUgY29uc3RydWN0b3IuIFdlIHN0aWxsIGhhdmUgaXNzdWVzXG4gICAgICAgIC8vIHdoZW4gY28tZXhpc3Rpbmcgd2l0aCBDRXYwIGVsZW1lbnRzIGxpa2UgUG9seW1lciAxLCBhbmQgd2l0aCBwb2x5ZmlsbHNcbiAgICAgICAgLy8gdGhhdCBkb24ndCBzdHJpY3RseSBhZGhlcmUgdG8gdGhlIG5vLW1vZGlmaWNhdGlvbiBydWxlIGJlY2F1c2Ugc2hhZG93XG4gICAgICAgIC8vIERPTSwgd2hpY2ggbWF5IGJlIGNyZWF0ZWQgaW4gdGhlIGNvbnN0cnVjdG9yLCBpcyBlbXVsYXRlZCBieSBiZWluZyBwbGFjZWRcbiAgICAgICAgLy8gaW4gdGhlIGxpZ2h0IERPTS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIHJlc3VsdGluZyBvcmRlciBpcyBvbiBuYXRpdmUgaXM6IENsb25lLCBBZG9wdCwgVXBncmFkZSwgUHJvY2VzcyxcbiAgICAgICAgLy8gVXBkYXRlLCBDb25uZWN0LiBkb2N1bWVudC5pbXBvcnROb2RlKCkgcGVyZm9ybXMgQ2xvbmUsIEFkb3B0LCBhbmQgVXBncmFkZVxuICAgICAgICAvLyBpbiBvbmUgc3RlcC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIEN1c3RvbSBFbGVtZW50cyB2MSBwb2x5ZmlsbCBzdXBwb3J0cyB1cGdyYWRlKCksIHNvIHRoZSBvcmRlciB3aGVuXG4gICAgICAgIC8vIHBvbHlmaWxsZWQgaXMgdGhlIG1vcmUgaWRlYWw6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLFxuICAgICAgICAvLyBDb25uZWN0LlxuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgOlxuICAgICAgICAgICAgZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy50ZW1wbGF0ZS5wYXJ0cztcbiAgICAgICAgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZSBudWxsXG4gICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZnJhZ21lbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDA7XG4gICAgICAgIGxldCBwYXJ0O1xuICAgICAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBub2RlcyBhbmQgcGFydHMgb2YgYSB0ZW1wbGF0ZVxuICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZVBhcnRBY3RpdmUocGFydCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvZ3Jlc3MgdGhlIHRyZWUgd2Fsa2VyIHVudGlsIHdlIGZpbmQgb3VyIG5leHQgcGFydCdzIG5vZGUuXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgbXVsdGlwbGUgcGFydHMgbWF5IHNoYXJlIHRoZSBzYW1lIG5vZGUgKGF0dHJpYnV0ZSBwYXJ0c1xuICAgICAgICAgICAgLy8gb24gYSBzaW5nbGUgZWxlbWVudCksIHNvIHRoaXMgbG9vcCBtYXkgbm90IHJ1biBhdCBhbGwuXG4gICAgICAgICAgICB3aGlsZSAobm9kZUluZGV4IDwgcGFydC5pbmRleCkge1xuICAgICAgICAgICAgICAgIG5vZGVJbmRleCsrO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChub2RlID0gd2Fsa2VyLm5leHROb2RlKCkpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBzdGlsbCBoYXZlIHBhcnRzICh0aGUgb3V0ZXIgZm9yLWxvb3ApLCB3ZSBrbm93OlxuICAgICAgICAgICAgICAgICAgICAvLyAtIFRoZXJlIGlzIGEgdGVtcGxhdGUgaW4gdGhlIHN0YWNrXG4gICAgICAgICAgICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlJ3ZlIGFycml2ZWQgYXQgb3VyIHBhcnQncyBub2RlLlxuICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gJ25vZGUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHRoaXMucHJvY2Vzc29yLmhhbmRsZVRleHRFeHByZXNzaW9uKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnNlcnRBZnRlck5vZGUobm9kZS5wcmV2aW91c1NpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2goLi4udGhpcy5wcm9jZXNzb3IuaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMobm9kZSwgcGFydC5uYW1lLCBwYXJ0LnN0cmluZ3MsIHRoaXMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ0VQb2x5ZmlsbCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRvcHROb2RlKGZyYWdtZW50KTtcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLnVwZ3JhZGUoZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1pbnN0YW5jZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuaW1wb3J0IHsgcmVwYXJlbnROb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGJvdW5kQXR0cmlidXRlU3VmZml4LCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LCBtYXJrZXIsIG5vZGVNYXJrZXIgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbmNvbnN0IGNvbW1lbnRNYXJrZXIgPSBgICR7bWFya2VyfSBgO1xuLyoqXG4gKiBUaGUgcmV0dXJuIHR5cGUgb2YgYGh0bWxgLCB3aGljaCBob2xkcyBhIFRlbXBsYXRlIGFuZCB0aGUgdmFsdWVzIGZyb21cbiAqIGludGVycG9sYXRlZCBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihzdHJpbmdzLCB2YWx1ZXMsIHR5cGUsIHByb2Nlc3Nvcikge1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgb2YgSFRNTCB1c2VkIHRvIGNyZWF0ZSBhIGA8dGVtcGxhdGU+YCBlbGVtZW50LlxuICAgICAqL1xuICAgIGdldEhUTUwoKSB7XG4gICAgICAgIGNvbnN0IGwgPSB0aGlzLnN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IGh0bWwgPSAnJztcbiAgICAgICAgbGV0IGlzQ29tbWVudEJpbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLnN0cmluZ3NbaV07XG4gICAgICAgICAgICAvLyBGb3IgZWFjaCBiaW5kaW5nIHdlIHdhbnQgdG8gZGV0ZXJtaW5lIHRoZSBraW5kIG9mIG1hcmtlciB0byBpbnNlcnRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIHRlbXBsYXRlIHNvdXJjZSBiZWZvcmUgaXQncyBwYXJzZWQgYnkgdGhlIGJyb3dzZXIncyBIVE1MXG4gICAgICAgICAgICAvLyBwYXJzZXIuIFRoZSBtYXJrZXIgdHlwZSBpcyBiYXNlZCBvbiB3aGV0aGVyIHRoZSBleHByZXNzaW9uIGlzIGluIGFuXG4gICAgICAgICAgICAvLyBhdHRyaWJ1dGUsIHRleHQsIG9yIGNvbW1lbnQgcG9zaXRpb24uXG4gICAgICAgICAgICAvLyAgICogRm9yIG5vZGUtcG9zaXRpb24gYmluZGluZ3Mgd2UgaW5zZXJ0IGEgY29tbWVudCB3aXRoIHRoZSBtYXJrZXJcbiAgICAgICAgICAgIC8vICAgICBzZW50aW5lbCBhcyBpdHMgdGV4dCBjb250ZW50LCBsaWtlIDwhLS17e2xpdC1ndWlkfX0tLT4uXG4gICAgICAgICAgICAvLyAgICogRm9yIGF0dHJpYnV0ZSBiaW5kaW5ncyB3ZSBpbnNlcnQganVzdCB0aGUgbWFya2VyIHNlbnRpbmVsIGZvciB0aGVcbiAgICAgICAgICAgIC8vICAgICBmaXJzdCBiaW5kaW5nLCBzbyB0aGF0IHdlIHN1cHBvcnQgdW5xdW90ZWQgYXR0cmlidXRlIGJpbmRpbmdzLlxuICAgICAgICAgICAgLy8gICAgIFN1YnNlcXVlbnQgYmluZGluZ3MgY2FuIHVzZSBhIGNvbW1lbnQgbWFya2VyIGJlY2F1c2UgbXVsdGktYmluZGluZ1xuICAgICAgICAgICAgLy8gICAgIGF0dHJpYnV0ZXMgbXVzdCBiZSBxdW90ZWQuXG4gICAgICAgICAgICAvLyAgICogRm9yIGNvbW1lbnQgYmluZGluZ3Mgd2UgaW5zZXJ0IGp1c3QgdGhlIG1hcmtlciBzZW50aW5lbCBzbyB3ZSBkb24ndFxuICAgICAgICAgICAgLy8gICAgIGNsb3NlIHRoZSBjb21tZW50LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBzY2FucyB0aGUgdGVtcGxhdGUgc291cmNlLCBidXQgaXMgKm5vdCogYW4gSFRNTFxuICAgICAgICAgICAgLy8gcGFyc2VyLiBXZSBkb24ndCBuZWVkIHRvIHRyYWNrIHRoZSB0cmVlIHN0cnVjdHVyZSBvZiB0aGUgSFRNTCwgb25seVxuICAgICAgICAgICAgLy8gd2hldGhlciBhIGJpbmRpbmcgaXMgaW5zaWRlIGEgY29tbWVudCwgYW5kIGlmIG5vdCwgaWYgaXQgYXBwZWFycyB0byBiZVxuICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGJpbmRpbmcgaW4gYW4gYXR0cmlidXRlLlxuICAgICAgICAgICAgY29uc3QgY29tbWVudE9wZW4gPSBzLmxhc3RJbmRleE9mKCc8IS0tJyk7XG4gICAgICAgICAgICAvLyBXZSdyZSBpbiBjb21tZW50IHBvc2l0aW9uIGlmIHdlIGhhdmUgYSBjb21tZW50IG9wZW4gd2l0aCBubyBmb2xsb3dpbmdcbiAgICAgICAgICAgIC8vIGNvbW1lbnQgY2xvc2UuIEJlY2F1c2UgPC0tIGNhbiBhcHBlYXIgaW4gYW4gYXR0cmlidXRlIHZhbHVlIHRoZXJlIGNhblxuICAgICAgICAgICAgLy8gYmUgZmFsc2UgcG9zaXRpdmVzLlxuICAgICAgICAgICAgaXNDb21tZW50QmluZGluZyA9IChjb21tZW50T3BlbiA+IC0xIHx8IGlzQ29tbWVudEJpbmRpbmcpICYmXG4gICAgICAgICAgICAgICAgcy5pbmRleE9mKCctLT4nLCBjb21tZW50T3BlbiArIDEpID09PSAtMTtcbiAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGFuIGF0dHJpYnV0ZS1saWtlIHNlcXVlbmNlIHByZWNlZGluZyB0aGVcbiAgICAgICAgICAgIC8vIGV4cHJlc3Npb24uIFRoaXMgY2FuIG1hdGNoIFwibmFtZT12YWx1ZVwiIGxpa2Ugc3RydWN0dXJlcyBpbiB0ZXh0LFxuICAgICAgICAgICAgLy8gY29tbWVudHMsIGFuZCBhdHRyaWJ1dGUgdmFsdWVzLCBzbyB0aGVyZSBjYW4gYmUgZmFsc2UtcG9zaXRpdmVzLlxuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlTWF0Y2ggPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMocyk7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlTWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSdyZSBvbmx5IGluIHRoaXMgYnJhbmNoIGlmIHdlIGRvbid0IGhhdmUgYSBhdHRyaWJ1dGUtbGlrZVxuICAgICAgICAgICAgICAgIC8vIHByZWNlZGluZyBzZXF1ZW5jZS4gRm9yIGNvbW1lbnRzLCB0aGlzIGd1YXJkcyBhZ2FpbnN0IHVudXN1YWxcbiAgICAgICAgICAgICAgICAvLyBhdHRyaWJ1dGUgdmFsdWVzIGxpa2UgPGRpdiBmb289XCI8IS0tJHsnYmFyJ31cIj4uIENhc2VzIGxpa2VcbiAgICAgICAgICAgICAgICAvLyA8IS0tIGZvbz0keydiYXInfS0tPiBhcmUgaGFuZGxlZCBjb3JyZWN0bHkgaW4gdGhlIGF0dHJpYnV0ZSBicmFuY2hcbiAgICAgICAgICAgICAgICAvLyBiZWxvdy5cbiAgICAgICAgICAgICAgICBodG1sICs9IHMgKyAoaXNDb21tZW50QmluZGluZyA/IGNvbW1lbnRNYXJrZXIgOiBub2RlTWFya2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEZvciBhdHRyaWJ1dGVzIHdlIHVzZSBqdXN0IGEgbWFya2VyIHNlbnRpbmVsLCBhbmQgYWxzbyBhcHBlbmQgYVxuICAgICAgICAgICAgICAgIC8vICRsaXQkIHN1ZmZpeCB0byB0aGUgbmFtZSB0byBvcHQtb3V0IG9mIGF0dHJpYnV0ZS1zcGVjaWZpYyBwYXJzaW5nXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBJRSBhbmQgRWRnZSBkbyBmb3Igc3R5bGUgYW5kIGNlcnRhaW4gU1ZHIGF0dHJpYnV0ZXMuXG4gICAgICAgICAgICAgICAgaHRtbCArPSBzLnN1YnN0cigwLCBhdHRyaWJ1dGVNYXRjaC5pbmRleCkgKyBhdHRyaWJ1dGVNYXRjaFsxXSArXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZU1hdGNoWzJdICsgYm91bmRBdHRyaWJ1dGVTdWZmaXggKyBhdHRyaWJ1dGVNYXRjaFszXSArXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBodG1sICs9IHRoaXMuc3RyaW5nc1tsXTtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICAgIGdldFRlbXBsYXRlRWxlbWVudCgpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB0aGlzLmdldEhUTUwoKTtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbn1cbi8qKlxuICogQSBUZW1wbGF0ZVJlc3VsdCBmb3IgU1ZHIGZyYWdtZW50cy5cbiAqXG4gKiBUaGlzIGNsYXNzIHdyYXBzIEhUTUwgaW4gYW4gYDxzdmc+YCB0YWcgaW4gb3JkZXIgdG8gcGFyc2UgaXRzIGNvbnRlbnRzIGluIHRoZVxuICogU1ZHIG5hbWVzcGFjZSwgdGhlbiBtb2RpZmllcyB0aGUgdGVtcGxhdGUgdG8gcmVtb3ZlIHRoZSBgPHN2Zz5gIHRhZyBzbyB0aGF0XG4gKiBjbG9uZXMgb25seSBjb250YWluZXIgdGhlIG9yaWdpbmFsIGZyYWdtZW50LlxuICovXG5leHBvcnQgY2xhc3MgU1ZHVGVtcGxhdGVSZXN1bHQgZXh0ZW5kcyBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgZ2V0SFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIGA8c3ZnPiR7c3VwZXIuZ2V0SFRNTCgpfTwvc3ZnPmA7XG4gICAgfVxuICAgIGdldFRlbXBsYXRlRWxlbWVudCgpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBzdXBlci5nZXRUZW1wbGF0ZUVsZW1lbnQoKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQ7XG4gICAgICAgIGNvbnN0IHN2Z0VsZW1lbnQgPSBjb250ZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGNvbnRlbnQucmVtb3ZlQ2hpbGQoc3ZnRWxlbWVudCk7XG4gICAgICAgIHJlcGFyZW50Tm9kZXMoY29udGVudCwgc3ZnRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLXJlc3VsdC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuaW1wb3J0IHsgaXNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgeyByZW1vdmVOb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IG5vQ2hhbmdlLCBub3RoaW5nIH0gZnJvbSAnLi9wYXJ0LmpzJztcbmltcG9ydCB7IFRlbXBsYXRlSW5zdGFuY2UgfSBmcm9tICcuL3RlbXBsYXRlLWluc3RhbmNlLmpzJztcbmltcG9ydCB7IFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuaW1wb3J0IHsgY3JlYXRlTWFya2VyIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5leHBvcnQgY29uc3QgaXNQcmltaXRpdmUgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gKHZhbHVlID09PSBudWxsIHx8XG4gICAgICAgICEodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpKTtcbn07XG5leHBvcnQgY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAhISh2YWx1ZSAmJiB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKTtcbn07XG4vKipcbiAqIFdyaXRlcyBhdHRyaWJ1dGUgdmFsdWVzIHRvIHRoZSBET00gZm9yIGEgZ3JvdXAgb2YgQXR0cmlidXRlUGFydHMgYm91bmQgdG8gYVxuICogc2luZ2xlIGF0dHJpYnV0ZS4gVGhlIHZhbHVlIGlzIG9ubHkgc2V0IG9uY2UgZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHNcbiAqIGZvciBhbiBhdHRyaWJ1dGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVDb21taXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgIHRoaXMucGFydHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5wYXJ0c1tpXSA9IHRoaXMuX2NyZWF0ZVBhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2luZ2xlIHBhcnQuIE92ZXJyaWRlIHRoaXMgdG8gY3JlYXRlIGEgZGlmZmVybnQgdHlwZSBvZiBwYXJ0LlxuICAgICAqL1xuICAgIF9jcmVhdGVQYXJ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IEF0dHJpYnV0ZVBhcnQodGhpcyk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZSgpIHtcbiAgICAgICAgY29uc3Qgc3RyaW5ncyA9IHRoaXMuc3RyaW5ncztcbiAgICAgICAgY29uc3QgbCA9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IHRleHQgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHRleHQgKz0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnQgPSB0aGlzLnBhcnRzW2ldO1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBwYXJ0LnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2KSB8fCAhaXNJdGVyYWJsZSh2KSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB2ID09PSAnc3RyaW5nJyA/IHYgOiBTdHJpbmcodik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0eXBlb2YgdCA9PT0gJ3N0cmluZycgPyB0IDogU3RyaW5nKHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRleHQgKz0gc3RyaW5nc1tsXTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCB0aGlzLl9nZXRWYWx1ZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQSBQYXJ0IHRoYXQgY29udHJvbHMgYWxsIG9yIHBhcnQgb2YgYW4gYXR0cmlidXRlIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlUGFydCB7XG4gICAgY29uc3RydWN0b3IoY29tbWl0dGVyKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29tbWl0dGVyID0gY29tbWl0dGVyO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IG5vQ2hhbmdlICYmICghaXNQcmltaXRpdmUodmFsdWUpIHx8IHZhbHVlICE9PSB0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGEgbm90IGEgZGlyZWN0aXZlLCBkaXJ0eSB0aGUgY29tbWl0dGVyIHNvIHRoYXQgaXQnbGxcbiAgICAgICAgICAgIC8vIGNhbGwgc2V0QXR0cmlidXRlLiBJZiB0aGUgdmFsdWUgaXMgYSBkaXJlY3RpdmUsIGl0J2xsIGRpcnR5IHRoZVxuICAgICAgICAgICAgLy8gY29tbWl0dGVyIGlmIGl0IGNhbGxzIHNldFZhbHVlKCkuXG4gICAgICAgICAgICBpZiAoIWlzRGlyZWN0aXZlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWl0dGVyLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbW1pdHRlci5jb21taXQoKTtcbiAgICB9XG59XG4vKipcbiAqIEEgUGFydCB0aGF0IGNvbnRyb2xzIGEgbG9jYXRpb24gd2l0aGluIGEgTm9kZSB0cmVlLiBMaWtlIGEgUmFuZ2UsIE5vZGVQYXJ0XG4gKiBoYXMgc3RhcnQgYW5kIGVuZCBsb2NhdGlvbnMgYW5kIGNhbiBzZXQgYW5kIHVwZGF0ZSB0aGUgTm9kZXMgYmV0d2VlbiB0aG9zZVxuICogbG9jYXRpb25zLlxuICpcbiAqIE5vZGVQYXJ0cyBzdXBwb3J0IHNldmVyYWwgdmFsdWUgdHlwZXM6IHByaW1pdGl2ZXMsIE5vZGVzLCBUZW1wbGF0ZVJlc3VsdHMsXG4gKiBhcyB3ZWxsIGFzIGFycmF5cyBhbmQgaXRlcmFibGVzIG9mIHRob3NlIHR5cGVzLlxuICovXG5leHBvcnQgY2xhc3MgTm9kZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGlzIHBhcnQgaW50byBhIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGFwcGVuZEludG8oY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuc3RhcnROb2RlID0gY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgdGhpcy5lbmROb2RlID0gY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZU1hcmtlcigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB0aGlzIHBhcnQgYWZ0ZXIgdGhlIGByZWZgIG5vZGUgKGJldHdlZW4gYHJlZmAgYW5kIGByZWZgJ3MgbmV4dFxuICAgICAqIHNpYmxpbmcpLiBCb3RoIGByZWZgIGFuZCBpdHMgbmV4dCBzaWJsaW5nIG11c3QgYmUgc3RhdGljLCB1bmNoYW5naW5nIG5vZGVzXG4gICAgICogc3VjaCBhcyB0aG9zZSB0aGF0IGFwcGVhciBpbiBhIGxpdGVyYWwgc2VjdGlvbiBvZiBhIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgaW5zZXJ0QWZ0ZXJOb2RlKHJlZikge1xuICAgICAgICB0aGlzLnN0YXJ0Tm9kZSA9IHJlZjtcbiAgICAgICAgdGhpcy5lbmROb2RlID0gcmVmLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHRoaXMgcGFydCBpbnRvIGEgcGFyZW50IHBhcnQuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBhcHBlbmRJbnRvUGFydChwYXJ0KSB7XG4gICAgICAgIHBhcnQuX19pbnNlcnQodGhpcy5zdGFydE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgIHBhcnQuX19pbnNlcnQodGhpcy5lbmROb2RlID0gY3JlYXRlTWFya2VyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoaXMgcGFydCBhZnRlciB0aGUgYHJlZmAgcGFydC5cbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGluc2VydEFmdGVyUGFydChyZWYpIHtcbiAgICAgICAgcmVmLl9faW5zZXJ0KHRoaXMuc3RhcnROb2RlID0gY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSByZWYuZW5kTm9kZTtcbiAgICAgICAgcmVmLmVuZE5vZGUgPSB0aGlzLnN0YXJ0Tm9kZTtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0Tm9kZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0SXRlcmFibGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBub3RoaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbm90aGluZztcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrLCB3aWxsIHJlbmRlciB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uXG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX19pbnNlcnQobm9kZSkge1xuICAgICAgICB0aGlzLmVuZE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgdGhpcy5lbmROb2RlKTtcbiAgICB9XG4gICAgX19jb21taXROb2RlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fX2luc2VydCh2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgX19jb21taXRUZXh0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgLy8gSWYgYHZhbHVlYCBpc24ndCBhbHJlYWR5IGEgc3RyaW5nLCB3ZSBleHBsaWNpdGx5IGNvbnZlcnQgaXQgaGVyZSBpbiBjYXNlXG4gICAgICAgIC8vIGl0IGNhbid0IGJlIGltcGxpY2l0bHkgY29udmVydGVkIC0gaS5lLiBpdCdzIGEgc3ltYm9sLlxuICAgICAgICBjb25zdCB2YWx1ZUFzU3RyaW5nID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuZW5kTm9kZS5wcmV2aW91c1NpYmxpbmcgJiZcbiAgICAgICAgICAgIG5vZGUubm9kZVR5cGUgPT09IDMgLyogTm9kZS5URVhUX05PREUgKi8pIHtcbiAgICAgICAgICAgIC8vIElmIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSB0ZXh0IG5vZGUgYmV0d2VlbiB0aGUgbWFya2Vycywgd2UgY2FuIGp1c3RcbiAgICAgICAgICAgIC8vIHNldCBpdHMgdmFsdWUsIHJhdGhlciB0aGFuIHJlcGxhY2luZyBpdC5cbiAgICAgICAgICAgIC8vIFRPRE8oanVzdGluZmFnbmFuaSk6IENhbiB3ZSBqdXN0IGNoZWNrIGlmIHRoaXMudmFsdWUgaXMgcHJpbWl0aXZlP1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gdmFsdWVBc1N0cmluZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlQXNTdHJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIF9fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGVGYWN0b3J5KHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZUluc3RhbmNlICYmXG4gICAgICAgICAgICB0aGlzLnZhbHVlLnRlbXBsYXRlID09PSB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZS51cGRhdGUodmFsdWUudmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBwcm9wYWdhdGUgdGhlIHRlbXBsYXRlIHByb2Nlc3NvciBmcm9tIHRoZSBUZW1wbGF0ZVJlc3VsdFxuICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSB1c2UgaXRzIHN5bnRheCBleHRlbnNpb24sIGV0Yy4gVGhlIHRlbXBsYXRlIGZhY3RvcnkgY29tZXNcbiAgICAgICAgICAgIC8vIGZyb20gdGhlIHJlbmRlciBmdW5jdGlvbiBvcHRpb25zIHNvIHRoYXQgaXQgY2FuIGNvbnRyb2wgdGVtcGxhdGVcbiAgICAgICAgICAgIC8vIGNhY2hpbmcgYW5kIHByZXByb2Nlc3NpbmcuXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBUZW1wbGF0ZUluc3RhbmNlKHRlbXBsYXRlLCB2YWx1ZS5wcm9jZXNzb3IsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IGluc3RhbmNlLl9jbG9uZSgpO1xuICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKHZhbHVlLnZhbHVlcyk7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZShmcmFnbWVudCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX19jb21taXRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgICAvLyBGb3IgYW4gSXRlcmFibGUsIHdlIGNyZWF0ZSBhIG5ldyBJbnN0YW5jZVBhcnQgcGVyIGl0ZW0sIHRoZW4gc2V0IGl0c1xuICAgICAgICAvLyB2YWx1ZSB0byB0aGUgaXRlbS4gVGhpcyBpcyBhIGxpdHRsZSBiaXQgb2Ygb3ZlcmhlYWQgZm9yIGV2ZXJ5IGl0ZW0gaW5cbiAgICAgICAgLy8gYW4gSXRlcmFibGUsIGJ1dCBpdCBsZXRzIHVzIHJlY3Vyc2UgZWFzaWx5IGFuZCBlZmZpY2llbnRseSB1cGRhdGUgQXJyYXlzXG4gICAgICAgIC8vIG9mIFRlbXBsYXRlUmVzdWx0cyB0aGF0IHdpbGwgYmUgY29tbW9ubHkgcmV0dXJuZWQgZnJvbSBleHByZXNzaW9ucyBsaWtlOlxuICAgICAgICAvLyBhcnJheS5tYXAoKGkpID0+IGh0bWxgJHtpfWApLCBieSByZXVzaW5nIGV4aXN0aW5nIFRlbXBsYXRlSW5zdGFuY2VzLlxuICAgICAgICAvLyBJZiBfdmFsdWUgaXMgYW4gYXJyYXksIHRoZW4gdGhlIHByZXZpb3VzIHJlbmRlciB3YXMgb2YgYW5cbiAgICAgICAgLy8gaXRlcmFibGUgYW5kIF92YWx1ZSB3aWxsIGNvbnRhaW4gdGhlIE5vZGVQYXJ0cyBmcm9tIHRoZSBwcmV2aW91c1xuICAgICAgICAvLyByZW5kZXIuIElmIF92YWx1ZSBpcyBub3QgYW4gYXJyYXksIGNsZWFyIHRoaXMgcGFydCBhbmQgbWFrZSBhIG5ld1xuICAgICAgICAvLyBhcnJheSBmb3IgTm9kZVBhcnRzLlxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMZXRzIHVzIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgaXRlbXMgd2Ugc3RhbXBlZCBzbyB3ZSBjYW4gY2xlYXIgbGVmdG92ZXJcbiAgICAgICAgLy8gaXRlbXMgZnJvbSBhIHByZXZpb3VzIHJlbmRlclxuICAgICAgICBjb25zdCBpdGVtUGFydHMgPSB0aGlzLnZhbHVlO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IGl0ZW1QYXJ0O1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFRyeSB0byByZXVzZSBhbiBleGlzdGluZyBwYXJ0XG4gICAgICAgICAgICBpdGVtUGFydCA9IGl0ZW1QYXJ0c1twYXJ0SW5kZXhdO1xuICAgICAgICAgICAgLy8gSWYgbm8gZXhpc3RpbmcgcGFydCwgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgaWYgKGl0ZW1QYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpdGVtUGFydCA9IG5ldyBOb2RlUGFydCh0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGl0ZW1QYXJ0cy5wdXNoKGl0ZW1QYXJ0KTtcbiAgICAgICAgICAgICAgICBpZiAocGFydEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1QYXJ0LmFwcGVuZEludG9QYXJ0KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVBhcnQuaW5zZXJ0QWZ0ZXJQYXJ0KGl0ZW1QYXJ0c1twYXJ0SW5kZXggLSAxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbVBhcnQuc2V0VmFsdWUoaXRlbSk7XG4gICAgICAgICAgICBpdGVtUGFydC5jb21taXQoKTtcbiAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0SW5kZXggPCBpdGVtUGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBUcnVuY2F0ZSB0aGUgcGFydHMgYXJyYXkgc28gX3ZhbHVlIHJlZmxlY3RzIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICAgICAgICBpdGVtUGFydHMubGVuZ3RoID0gcGFydEluZGV4O1xuICAgICAgICAgICAgdGhpcy5jbGVhcihpdGVtUGFydCAmJiBpdGVtUGFydC5lbmROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhcihzdGFydE5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSkge1xuICAgICAgICByZW1vdmVOb2Rlcyh0aGlzLnN0YXJ0Tm9kZS5wYXJlbnROb2RlLCBzdGFydE5vZGUubmV4dFNpYmxpbmcsIHRoaXMuZW5kTm9kZSk7XG4gICAgfVxufVxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgYm9vbGVhbiBhdHRyaWJ1dGUsIHJvdWdobHkgYXMgZGVmaW5lZCBpbiB0aGUgSFRNTFxuICogc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgaXMgdHJ1dGh5LCB0aGVuIHRoZSBhdHRyaWJ1dGUgaXMgcHJlc2VudCB3aXRoIGEgdmFsdWUgb2ZcbiAqICcnLiBJZiB0aGUgdmFsdWUgaXMgZmFsc2V5LCB0aGUgYXR0cmlidXRlIGlzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuQXR0cmlidXRlUGFydCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgbmFtZSwgc3RyaW5ncykge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoc3RyaW5ncy5sZW5ndGggIT09IDIgfHwgc3RyaW5nc1swXSAhPT0gJycgfHwgc3RyaW5nc1sxXSAhPT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQm9vbGVhbiBhdHRyaWJ1dGVzIGNhbiBvbmx5IGNvbnRhaW4gYSBzaW5nbGUgZXhwcmVzc2lvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgfVxuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX19wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSAhIXRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgfVxufVxuLyoqXG4gKiBTZXRzIGF0dHJpYnV0ZSB2YWx1ZXMgZm9yIFByb3BlcnR5UGFydHMsIHNvIHRoYXQgdGhlIHZhbHVlIGlzIG9ubHkgc2V0IG9uY2VcbiAqIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzIGZvciBhIHByb3BlcnR5LlxuICpcbiAqIElmIGFuIGV4cHJlc3Npb24gY29udHJvbHMgdGhlIHdob2xlIHByb3BlcnR5IHZhbHVlLCB0aGVuIHRoZSB2YWx1ZSBpcyBzaW1wbHlcbiAqIGFzc2lnbmVkIHRvIHRoZSBwcm9wZXJ0eSB1bmRlciBjb250cm9sLiBJZiB0aGVyZSBhcmUgc3RyaW5nIGxpdGVyYWxzIG9yXG4gKiBtdWx0aXBsZSBleHByZXNzaW9ucywgdGhlbiB0aGUgc3RyaW5ncyBhcmUgZXhwcmVzc2lvbnMgYXJlIGludGVycG9sYXRlZCBpbnRvXG4gKiBhIHN0cmluZyBmaXJzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFByb3BlcnR5Q29tbWl0dGVyIGV4dGVuZHMgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgICAgICB0aGlzLnNpbmdsZSA9XG4gICAgICAgICAgICAoc3RyaW5ncy5sZW5ndGggPT09IDIgJiYgc3RyaW5nc1swXSA9PT0gJycgJiYgc3RyaW5nc1sxXSA9PT0gJycpO1xuICAgIH1cbiAgICBfY3JlYXRlUGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wZXJ0eVBhcnQodGhpcyk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJ0c1swXS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFZhbHVlKCk7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXSA9IHRoaXMuX2dldFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUHJvcGVydHlQYXJ0IGV4dGVuZHMgQXR0cmlidXRlUGFydCB7XG59XG4vLyBEZXRlY3QgZXZlbnQgbGlzdGVuZXIgb3B0aW9ucyBzdXBwb3J0LiBJZiB0aGUgYGNhcHR1cmVgIHByb3BlcnR5IGlzIHJlYWRcbi8vIGZyb20gdGhlIG9wdGlvbnMgb2JqZWN0LCB0aGVuIG9wdGlvbnMgYXJlIHN1cHBvcnRlZC4gSWYgbm90LCB0aGVuIHRoZSB0aGlyZFxuLy8gYXJndW1lbnQgdG8gYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIgaXMgaW50ZXJwcmV0ZWQgYXMgdGhlIGJvb2xlYW4gY2FwdHVyZVxuLy8gdmFsdWUgc28gd2Ugc2hvdWxkIG9ubHkgcGFzcyB0aGUgYGNhcHR1cmVgIHByb3BlcnR5LlxubGV0IGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA9IGZhbHNlO1xuLy8gV3JhcCBpbnRvIGFuIElJRkUgYmVjYXVzZSBNUyBFZGdlIDw9IHY0MSBkb2VzIG5vdCBzdXBwb3J0IGhhdmluZyB0cnkvY2F0Y2hcbi8vIGJsb2NrcyByaWdodCBpbnRvIHRoZSBib2R5IG9mIGEgbW9kdWxlXG4oKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBnZXQgY2FwdHVyZSgpIHtcbiAgICAgICAgICAgICAgICBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9lKSB7XG4gICAgICAgIC8vIGV2ZW50IG9wdGlvbnMgbm90IHN1cHBvcnRlZFxuICAgIH1cbn0pKCk7XG5leHBvcnQgY2xhc3MgRXZlbnRQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBldmVudE5hbWUsIGV2ZW50Q29udGV4dCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgICAgICAgdGhpcy5ldmVudENvbnRleHQgPSBldmVudENvbnRleHQ7XG4gICAgICAgIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50ID0gKGUpID0+IHRoaXMuaGFuZGxlRXZlbnQoZSk7XG4gICAgfVxuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX19wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3TGlzdGVuZXIgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICBjb25zdCBvbGRMaXN0ZW5lciA9IHRoaXMudmFsdWU7XG4gICAgICAgIGNvbnN0IHNob3VsZFJlbW92ZUxpc3RlbmVyID0gbmV3TGlzdGVuZXIgPT0gbnVsbCB8fFxuICAgICAgICAgICAgb2xkTGlzdGVuZXIgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIChuZXdMaXN0ZW5lci5jYXB0dXJlICE9PSBvbGRMaXN0ZW5lci5jYXB0dXJlIHx8XG4gICAgICAgICAgICAgICAgICAgIG5ld0xpc3RlbmVyLm9uY2UgIT09IG9sZExpc3RlbmVyLm9uY2UgfHxcbiAgICAgICAgICAgICAgICAgICAgbmV3TGlzdGVuZXIucGFzc2l2ZSAhPT0gb2xkTGlzdGVuZXIucGFzc2l2ZSk7XG4gICAgICAgIGNvbnN0IHNob3VsZEFkZExpc3RlbmVyID0gbmV3TGlzdGVuZXIgIT0gbnVsbCAmJiAob2xkTGlzdGVuZXIgPT0gbnVsbCB8fCBzaG91bGRSZW1vdmVMaXN0ZW5lcik7XG4gICAgICAgIGlmIChzaG91bGRSZW1vdmVMaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50LCB0aGlzLl9fb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZEFkZExpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9fb3B0aW9ucyA9IGdldE9wdGlvbnMobmV3TGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50LCB0aGlzLl9fb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ld0xpc3RlbmVyO1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgfVxuICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZS5jYWxsKHRoaXMuZXZlbnRDb250ZXh0IHx8IHRoaXMuZWxlbWVudCwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YWx1ZS5oYW5kbGVFdmVudChldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBXZSBjb3B5IG9wdGlvbnMgYmVjYXVzZSBvZiB0aGUgaW5jb25zaXN0ZW50IGJlaGF2aW9yIG9mIGJyb3dzZXJzIHdoZW4gcmVhZGluZ1xuLy8gdGhlIHRoaXJkIGFyZ3VtZW50IG9mIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyLiBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBvcHRpb25zXG4vLyBhdCBhbGwuIENocm9tZSA0MSBvbmx5IHJlYWRzIGBjYXB0dXJlYCBpZiB0aGUgYXJndW1lbnQgaXMgYW4gb2JqZWN0LlxuY29uc3QgZ2V0T3B0aW9ucyA9IChvKSA9PiBvICYmXG4gICAgKGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA/XG4gICAgICAgIHsgY2FwdHVyZTogby5jYXB0dXJlLCBwYXNzaXZlOiBvLnBhc3NpdmUsIG9uY2U6IG8ub25jZSB9IDpcbiAgICAgICAgby5jYXB0dXJlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgVGVtcGxhdGVGYWN0b3J5IHdoaWNoIGNhY2hlcyBUZW1wbGF0ZXMga2V5ZWQgb25cbiAqIHJlc3VsdC50eXBlIGFuZCByZXN1bHQuc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeShyZXN1bHQpIHtcbiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQudHlwZSk7XG4gICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcCgpLFxuICAgICAgICAgICAga2V5U3RyaW5nOiBuZXcgTWFwKClcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZXMuc2V0KHJlc3VsdC50eXBlLCB0ZW1wbGF0ZUNhY2hlKTtcbiAgICB9XG4gICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICAgIC8vIElmIHRoZSBUZW1wbGF0ZVN0cmluZ3NBcnJheSBpcyBuZXcsIGdlbmVyYXRlIGEga2V5IGZyb20gdGhlIHN0cmluZ3NcbiAgICAvLyBUaGlzIGtleSBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgdGVtcGxhdGVzIHdpdGggaWRlbnRpY2FsIGNvbnRlbnRcbiAgICBjb25zdCBrZXkgPSByZXN1bHQuc3RyaW5ncy5qb2luKG1hcmtlcik7XG4gICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGEgVGVtcGxhdGUgZm9yIHRoaXMga2V5XG4gICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcbiAgICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vdCBzZWVuIHRoaXMga2V5IGJlZm9yZSwgY3JlYXRlIGEgbmV3IFRlbXBsYXRlXG4gICAgICAgIHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCwgcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpKTtcbiAgICAgICAgLy8gQ2FjaGUgdGhlIFRlbXBsYXRlIGZvciB0aGlzIGtleVxuICAgICAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIC8vIENhY2hlIGFsbCBmdXR1cmUgcXVlcmllcyBmb3IgdGhpcyBUZW1wbGF0ZVN0cmluZ3NBcnJheVxuICAgIHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn1cbmV4cG9ydCBjb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlLWZhY3RvcnkuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cbmltcG9ydCB7IHJlbW92ZU5vZGVzIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgTm9kZVBhcnQgfSBmcm9tICcuL3BhcnRzLmpzJztcbmltcG9ydCB7IHRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJy4vdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5leHBvcnQgY29uc3QgcGFydHMgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBSZW5kZXJzIGEgdGVtcGxhdGUgcmVzdWx0IG9yIG90aGVyIHZhbHVlIHRvIGEgY29udGFpbmVyLlxuICpcbiAqIFRvIHVwZGF0ZSBhIGNvbnRhaW5lciB3aXRoIG5ldyB2YWx1ZXMsIHJlZXZhbHVhdGUgdGhlIHRlbXBsYXRlIGxpdGVyYWwgYW5kXG4gKiBjYWxsIGByZW5kZXJgIHdpdGggdGhlIG5ldyByZXN1bHQuXG4gKlxuICogQHBhcmFtIHJlc3VsdCBBbnkgdmFsdWUgcmVuZGVyYWJsZSBieSBOb2RlUGFydCAtIHR5cGljYWxseSBhIFRlbXBsYXRlUmVzdWx0XG4gKiAgICAgY3JlYXRlZCBieSBldmFsdWF0aW5nIGEgdGVtcGxhdGUgdGFnIGxpa2UgYGh0bWxgIG9yIGBzdmdgLlxuICogQHBhcmFtIGNvbnRhaW5lciBBIERPTSBwYXJlbnQgdG8gcmVuZGVyIHRvLiBUaGUgZW50aXJlIGNvbnRlbnRzIGFyZSBlaXRoZXJcbiAqICAgICByZXBsYWNlZCwgb3IgZWZmaWNpZW50bHkgdXBkYXRlZCBpZiB0aGUgc2FtZSByZXN1bHQgdHlwZSB3YXMgcHJldmlvdXNcbiAqICAgICByZW5kZXJlZCB0aGVyZS5cbiAqIEBwYXJhbSBvcHRpb25zIFJlbmRlck9wdGlvbnMgZm9yIHRoZSBlbnRpcmUgcmVuZGVyIHRyZWUgcmVuZGVyZWQgdG8gdGhpc1xuICogICAgIGNvbnRhaW5lci4gUmVuZGVyIG9wdGlvbnMgbXVzdCAqbm90KiBjaGFuZ2UgYmV0d2VlbiByZW5kZXJzIHRvIHRoZSBzYW1lXG4gKiAgICAgY29udGFpbmVyLCBhcyB0aG9zZSBjaGFuZ2VzIHdpbGwgbm90IGVmZmVjdCBwcmV2aW91c2x5IHJlbmRlcmVkIERPTS5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbmRlciA9IChyZXN1bHQsIGNvbnRhaW5lciwgb3B0aW9ucykgPT4ge1xuICAgIGxldCBwYXJ0ID0gcGFydHMuZ2V0KGNvbnRhaW5lcik7XG4gICAgaWYgKHBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZW1vdmVOb2Rlcyhjb250YWluZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgcGFydHMuc2V0KGNvbnRhaW5lciwgcGFydCA9IG5ldyBOb2RlUGFydChPYmplY3QuYXNzaWduKHsgdGVtcGxhdGVGYWN0b3J5IH0sIG9wdGlvbnMpKSk7XG4gICAgICAgIHBhcnQuYXBwZW5kSW50byhjb250YWluZXIpO1xuICAgIH1cbiAgICBwYXJ0LnNldFZhbHVlKHJlc3VsdCk7XG4gICAgcGFydC5jb21taXQoKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW5kZXIuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlQ29tbWl0dGVyLCBCb29sZWFuQXR0cmlidXRlUGFydCwgRXZlbnRQYXJ0LCBOb2RlUGFydCwgUHJvcGVydHlDb21taXR0ZXIgfSBmcm9tICcuL3BhcnRzLmpzJztcbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS1wb3NpdGlvbiBiaW5kaW5nLCBnaXZlbiB0aGUgZXZlbnQsIGF0dHJpYnV0ZVxuICAgICAqIG5hbWUsIGFuZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBiaW5kaW5nXG4gICAgICogQHBhcmFtIG5hbWUgIFRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSBzdHJpbmdzIFRoZSBzdHJpbmcgbGl0ZXJhbHMuIFRoZXJlIGFyZSBhbHdheXMgYXQgbGVhc3QgdHdvIHN0cmluZ3MsXG4gICAgICogICBldmVudCBmb3IgZnVsbHktY29udHJvbGxlZCBiaW5kaW5ncyB3aXRoIGEgc2luZ2xlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoZWxlbWVudCwgbmFtZSwgc3RyaW5ncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBuYW1lWzBdO1xuICAgICAgICBpZiAocHJlZml4ID09PSAnLicpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1pdHRlciA9IG5ldyBQcm9wZXJ0eUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKTtcbiAgICAgICAgICAgIHJldHVybiBjb21taXR0ZXIucGFydHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWZpeCA9PT0gJ0AnKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBFdmVudFBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgb3B0aW9ucy5ldmVudENvbnRleHQpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZml4ID09PSAnPycpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21taXR0ZXIgPSBuZXcgQXR0cmlidXRlQ29tbWl0dGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgICAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGEgdGV4dC1wb3NpdGlvbiBiaW5kaW5nLlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZUZhY3RvcnlcbiAgICAgKi9cbiAgICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZVBhcnQob3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciA9IG5ldyBEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICpcbiAqIE1haW4gbGl0LWh0bWwgbW9kdWxlLlxuICpcbiAqIE1haW4gZXhwb3J0czpcbiAqXG4gKiAtICBbW2h0bWxdXVxuICogLSAgW1tzdmddXVxuICogLSAgW1tyZW5kZXJdXVxuICpcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqIEBwcmVmZXJyZWRcbiAqL1xuLyoqXG4gKiBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudDsgaXQga2VlcHMgdHlwZWRvYyBmcm9tIG1pc3BsYWNpbmcgdGhlIG1vZHVsZVxuICogZG9jcy5cbiAqL1xuaW1wb3J0IHsgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuaW1wb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciwgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIH0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuZXhwb3J0IHsgZGlyZWN0aXZlLCBpc0RpcmVjdGl2ZSB9IGZyb20gJy4vbGliL2RpcmVjdGl2ZS5qcyc7XG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiByZW1vdmUgbGluZSB3aGVuIHdlIGdldCBOb2RlUGFydCBtb3ZpbmcgbWV0aG9kc1xuZXhwb3J0IHsgcmVtb3ZlTm9kZXMsIHJlcGFyZW50Tm9kZXMgfSBmcm9tICcuL2xpYi9kb20uanMnO1xuZXhwb3J0IHsgbm9DaGFuZ2UsIG5vdGhpbmcgfSBmcm9tICcuL2xpYi9wYXJ0LmpzJztcbmV4cG9ydCB7IEF0dHJpYnV0ZUNvbW1pdHRlciwgQXR0cmlidXRlUGFydCwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgaXNJdGVyYWJsZSwgaXNQcmltaXRpdmUsIE5vZGVQYXJ0LCBQcm9wZXJ0eUNvbW1pdHRlciwgUHJvcGVydHlQYXJ0IH0gZnJvbSAnLi9saWIvcGFydHMuanMnO1xuZXhwb3J0IHsgcGFydHMsIHJlbmRlciB9IGZyb20gJy4vbGliL3JlbmRlci5qcyc7XG5leHBvcnQgeyB0ZW1wbGF0ZUNhY2hlcywgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5leHBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuZXhwb3J0IHsgU1ZHVGVtcGxhdGVSZXN1bHQsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7IGNyZWF0ZU1hcmtlciwgaXNUZW1wbGF0ZVBhcnRBY3RpdmUsIFRlbXBsYXRlIH0gZnJvbSAnLi9saWIvdGVtcGxhdGUuanMnO1xuLy8gSU1QT1JUQU5UOiBkbyBub3QgY2hhbmdlIHRoZSBwcm9wZXJ0eSBuYW1lIG9yIHRoZSBhc3NpZ25tZW50IGV4cHJlc3Npb24uXG4vLyBUaGlzIGxpbmUgd2lsbCBiZSB1c2VkIGluIHJlZ2V4ZXMgdG8gc2VhcmNoIGZvciBsaXQtaHRtbCB1c2FnZS5cbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IGluamVjdCB2ZXJzaW9uIG51bWJlciBhdCBidWlsZCB0aW1lXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSB8fCAod2luZG93WydsaXRIdG1sVmVyc2lvbnMnXSA9IFtdKSkucHVzaCgnMS4yLjEnKTtcbn1cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFRlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ2h0bWwnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuLyoqXG4gKiBJbnRlcnByZXRzIGEgdGVtcGxhdGUgbGl0ZXJhbCBhcyBhbiBTVkcgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3Qgc3ZnID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ3N2ZycsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIE1vZHVsZSB0byBhZGQgc2hhZHkgRE9NL3NoYWR5IENTUyBwb2x5ZmlsbCBzdXBwb3J0IHRvIGxpdC1odG1sIHRlbXBsYXRlXG4gKiByZW5kZXJpbmcuIFNlZSB0aGUgW1tyZW5kZXJdXSBtZXRob2QgZm9yIGRldGFpbHMuXG4gKlxuICogQG1vZHVsZSBzaGFkeS1yZW5kZXJcbiAqIEBwcmVmZXJyZWRcbiAqL1xuLyoqXG4gKiBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudDsgaXQga2VlcHMgdHlwZWRvYyBmcm9tIG1pc3BsYWNpbmcgdGhlIG1vZHVsZVxuICogZG9jcy5cbiAqL1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBpbnNlcnROb2RlSW50b1RlbXBsYXRlLCByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZSB9IGZyb20gJy4vbW9kaWZ5LXRlbXBsYXRlLmpzJztcbmltcG9ydCB7IHBhcnRzLCByZW5kZXIgYXMgbGl0UmVuZGVyIH0gZnJvbSAnLi9yZW5kZXIuanMnO1xuaW1wb3J0IHsgdGVtcGxhdGVDYWNoZXMgfSBmcm9tICcuL3RlbXBsYXRlLWZhY3RvcnkuanMnO1xuaW1wb3J0IHsgVGVtcGxhdGVJbnN0YW5jZSB9IGZyb20gJy4vdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgbWFya2VyLCBUZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuZXhwb3J0IHsgaHRtbCwgc3ZnLCBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4uL2xpdC1odG1sLmpzJztcbi8vIEdldCBhIGtleSB0byBsb29rdXAgaW4gYHRlbXBsYXRlQ2FjaGVzYC5cbmNvbnN0IGdldFRlbXBsYXRlQ2FjaGVLZXkgPSAodHlwZSwgc2NvcGVOYW1lKSA9PiBgJHt0eXBlfS0tJHtzY29wZU5hbWV9YDtcbmxldCBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gdHJ1ZTtcbmlmICh0eXBlb2Ygd2luZG93LlNoYWR5Q1NTID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSBmYWxzZTtcbn1cbmVsc2UgaWYgKHR5cGVvZiB3aW5kb3cuU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlRG9tID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUud2FybihgSW5jb21wYXRpYmxlIFNoYWR5Q1NTIHZlcnNpb24gZGV0ZWN0ZWQuIGAgK1xuICAgICAgICBgUGxlYXNlIHVwZGF0ZSB0byBhdCBsZWFzdCBAd2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanNAMi4wLjIgYW5kIGAgK1xuICAgICAgICBgQHdlYmNvbXBvbmVudHMvc2hhZHljc3NAMS4zLjEuYCk7XG4gICAgY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiA9IGZhbHNlO1xufVxuLyoqXG4gKiBUZW1wbGF0ZSBmYWN0b3J5IHdoaWNoIHNjb3BlcyB0ZW1wbGF0ZSBET00gdXNpbmcgU2hhZHlDU1MuXG4gKiBAcGFyYW0gc2NvcGVOYW1lIHtzdHJpbmd9XG4gKi9cbmNvbnN0IHNoYWR5VGVtcGxhdGVGYWN0b3J5ID0gKHNjb3BlTmFtZSkgPT4gKHJlc3VsdCkgPT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gZ2V0VGVtcGxhdGVDYWNoZUtleShyZXN1bHQudHlwZSwgc2NvcGVOYW1lKTtcbiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChjYWNoZUtleSk7XG4gICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcCgpLFxuICAgICAgICAgICAga2V5U3RyaW5nOiBuZXcgTWFwKClcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZXMuc2V0KGNhY2hlS2V5LCB0ZW1wbGF0ZUNhY2hlKTtcbiAgICB9XG4gICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHJlc3VsdC5zdHJpbmdzLmpvaW4obWFya2VyKTtcbiAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLmdldChrZXkpO1xuICAgIGlmICh0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgICAgIGlmIChjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uKSB7XG4gICAgICAgICAgICB3aW5kb3cuU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlRG9tKGVsZW1lbnQsIHNjb3BlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUocmVzdWx0LCBlbGVtZW50KTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZS5rZXlTdHJpbmcuc2V0KGtleSwgdGVtcGxhdGUpO1xuICAgIH1cbiAgICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG59O1xuY29uc3QgVEVNUExBVEVfVFlQRVMgPSBbJ2h0bWwnLCAnc3ZnJ107XG4vKipcbiAqIFJlbW92ZXMgYWxsIHN0eWxlIGVsZW1lbnRzIGZyb20gVGVtcGxhdGVzIGZvciB0aGUgZ2l2ZW4gc2NvcGVOYW1lLlxuICovXG5jb25zdCByZW1vdmVTdHlsZXNGcm9tTGl0VGVtcGxhdGVzID0gKHNjb3BlTmFtZSkgPT4ge1xuICAgIFRFTVBMQVRFX1RZUEVTLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGVzID0gdGVtcGxhdGVDYWNoZXMuZ2V0KGdldFRlbXBsYXRlQ2FjaGVLZXkodHlwZSwgc2NvcGVOYW1lKSk7XG4gICAgICAgIGlmICh0ZW1wbGF0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGVtcGxhdGVzLmtleVN0cmluZy5mb3JFYWNoKCh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZWxlbWVudDogeyBjb250ZW50IH0gfSA9IHRlbXBsYXRlO1xuICAgICAgICAgICAgICAgIC8vIElFIDExIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgaXRlcmFibGUgcGFyYW0gU2V0IGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgIEFycmF5LmZyb20oY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpKS5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5hZGQocyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlTm9kZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsIHN0eWxlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmNvbnN0IHNoYWR5UmVuZGVyU2V0ID0gbmV3IFNldCgpO1xuLyoqXG4gKiBGb3IgdGhlIGdpdmVuIHNjb3BlIG5hbWUsIGVuc3VyZXMgdGhhdCBTaGFkeUNTUyBzdHlsZSBzY29waW5nIGlzIHBlcmZvcm1lZC5cbiAqIFRoaXMgaXMgZG9uZSBqdXN0IG9uY2UgcGVyIHNjb3BlIG5hbWUgc28gdGhlIGZyYWdtZW50IGFuZCB0ZW1wbGF0ZSBjYW5ub3RcbiAqIGJlIG1vZGlmaWVkLlxuICogKDEpIGV4dHJhY3RzIHN0eWxlcyBmcm9tIHRoZSByZW5kZXJlZCBmcmFnbWVudCBhbmQgaGFuZHMgdGhlbSB0byBTaGFkeUNTU1xuICogdG8gYmUgc2NvcGVkIGFuZCBhcHBlbmRlZCB0byB0aGUgZG9jdW1lbnRcbiAqICgyKSByZW1vdmVzIHN0eWxlIGVsZW1lbnRzIGZyb20gYWxsIGxpdC1odG1sIFRlbXBsYXRlcyBmb3IgdGhpcyBzY29wZSBuYW1lLlxuICpcbiAqIE5vdGUsIDxzdHlsZT4gZWxlbWVudHMgY2FuIG9ubHkgYmUgcGxhY2VkIGludG8gdGVtcGxhdGVzIGZvciB0aGVcbiAqIGluaXRpYWwgcmVuZGVyaW5nIG9mIHRoZSBzY29wZS4gSWYgPHN0eWxlPiBlbGVtZW50cyBhcmUgaW5jbHVkZWQgaW4gdGVtcGxhdGVzXG4gKiBkeW5hbWljYWxseSByZW5kZXJlZCB0byB0aGUgc2NvcGUgKGFmdGVyIHRoZSBmaXJzdCBzY29wZSByZW5kZXIpLCB0aGV5IHdpbGxcbiAqIG5vdCBiZSBzY29wZWQgYW5kIHRoZSA8c3R5bGU+IHdpbGwgYmUgbGVmdCBpbiB0aGUgdGVtcGxhdGUgYW5kIHJlbmRlcmVkXG4gKiBvdXRwdXQuXG4gKi9cbmNvbnN0IHByZXBhcmVUZW1wbGF0ZVN0eWxlcyA9IChzY29wZU5hbWUsIHJlbmRlcmVkRE9NLCB0ZW1wbGF0ZSkgPT4ge1xuICAgIHNoYWR5UmVuZGVyU2V0LmFkZChzY29wZU5hbWUpO1xuICAgIC8vIElmIGByZW5kZXJlZERPTWAgaXMgc3RhbXBlZCBmcm9tIGEgVGVtcGxhdGUsIHRoZW4gd2UgbmVlZCB0byBlZGl0IHRoYXRcbiAgICAvLyBUZW1wbGF0ZSdzIHVuZGVybHlpbmcgdGVtcGxhdGUgZWxlbWVudC4gT3RoZXJ3aXNlLCB3ZSBjcmVhdGUgb25lIGhlcmVcbiAgICAvLyB0byBnaXZlIHRvIFNoYWR5Q1NTLCB3aGljaCBzdGlsbCByZXF1aXJlcyBvbmUgd2hpbGUgc2NvcGluZy5cbiAgICBjb25zdCB0ZW1wbGF0ZUVsZW1lbnQgPSAhIXRlbXBsYXRlID8gdGVtcGxhdGUuZWxlbWVudCA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgLy8gTW92ZSBzdHlsZXMgb3V0IG9mIHJlbmRlcmVkIERPTSBhbmQgc3RvcmUuXG4gICAgY29uc3Qgc3R5bGVzID0gcmVuZGVyZWRET00ucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gc3R5bGVzO1xuICAgIC8vIElmIHRoZXJlIGFyZSBubyBzdHlsZXMsIHNraXAgdW5uZWNlc3Nhcnkgd29ya1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gRW5zdXJlIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyBpcyBjYWxsZWQgdG8gc3VwcG9ydCBhZGRpbmdcbiAgICAgICAgLy8gc3R5bGVzIHZpYSBgcHJlcGFyZUFkb3B0ZWRDc3NUZXh0YCBzaW5jZSB0aGF0IHJlcXVpcmVzIHRoYXRcbiAgICAgICAgLy8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AgaXMgY2FsbGVkLlxuICAgICAgICAvL1xuICAgICAgICAvLyBTaGFkeUNTUyB3aWxsIG9ubHkgdXBkYXRlIHN0eWxlcyBjb250YWluaW5nIEBhcHBseSBpbiB0aGUgdGVtcGxhdGVcbiAgICAgICAgLy8gZ2l2ZW4gdG8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AuIElmIG5vIGxpdCBUZW1wbGF0ZSB3YXMgZ2l2ZW4sXG4gICAgICAgIC8vIFNoYWR5Q1NTIHdpbGwgbm90IGJlIGFibGUgdG8gdXBkYXRlIHVzZXMgb2YgQGFwcGx5IGluIGFueSByZWxldmFudFxuICAgICAgICAvLyB0ZW1wbGF0ZS4gSG93ZXZlciwgdGhpcyBpcyBub3QgYSBwcm9ibGVtIGJlY2F1c2Ugd2Ugb25seSBjcmVhdGUgdGhlXG4gICAgICAgIC8vIHRlbXBsYXRlIGZvciB0aGUgcHVycG9zZSBvZiBzdXBwb3J0aW5nIGBwcmVwYXJlQWRvcHRlZENzc1RleHRgLFxuICAgICAgICAvLyB3aGljaCBkb2Vzbid0IHN1cHBvcnQgQGFwcGx5IGF0IGFsbC5cbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0ZW1wbGF0ZUVsZW1lbnQsIHNjb3BlTmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29uZGVuc2VkU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIC8vIENvbGxlY3Qgc3R5bGVzIGludG8gYSBzaW5nbGUgc3R5bGUuIFRoaXMgaGVscHMgdXMgbWFrZSBzdXJlIFNoYWR5Q1NTXG4gICAgLy8gbWFuaXB1bGF0aW9ucyB3aWxsIG5vdCBwcmV2ZW50IHVzIGZyb20gYmVpbmcgYWJsZSB0byBmaXggdXAgdGVtcGxhdGVcbiAgICAvLyBwYXJ0IGluZGljZXMuXG4gICAgLy8gTk9URTogY29sbGVjdGluZyBzdHlsZXMgaXMgaW5lZmZpY2llbnQgZm9yIGJyb3dzZXJzIGJ1dCBTaGFkeUNTU1xuICAgIC8vIGN1cnJlbnRseSBkb2VzIHRoaXMgYW55d2F5LiBXaGVuIGl0IGRvZXMgbm90LCB0aGlzIHNob3VsZCBiZSBjaGFuZ2VkLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBzdHlsZXNbaV07XG4gICAgICAgIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuICAgICAgICBjb25kZW5zZWRTdHlsZS50ZXh0Q29udGVudCArPSBzdHlsZS50ZXh0Q29udGVudDtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIHN0eWxlcyBmcm9tIG5lc3RlZCB0ZW1wbGF0ZXMgaW4gdGhpcyBzY29wZS5cbiAgICByZW1vdmVTdHlsZXNGcm9tTGl0VGVtcGxhdGVzKHNjb3BlTmFtZSk7XG4gICAgLy8gQW5kIHRoZW4gcHV0IHRoZSBjb25kZW5zZWQgc3R5bGUgaW50byB0aGUgXCJyb290XCIgdGVtcGxhdGUgcGFzc2VkIGluIGFzXG4gICAgLy8gYHRlbXBsYXRlYC5cbiAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGVFbGVtZW50LmNvbnRlbnQ7XG4gICAgaWYgKCEhdGVtcGxhdGUpIHtcbiAgICAgICAgaW5zZXJ0Tm9kZUludG9UZW1wbGF0ZSh0ZW1wbGF0ZSwgY29uZGVuc2VkU3R5bGUsIGNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb250ZW50Lmluc2VydEJlZm9yZShjb25kZW5zZWRTdHlsZSwgY29udGVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgLy8gTm90ZSwgaXQncyBpbXBvcnRhbnQgdGhhdCBTaGFkeUNTUyBnZXRzIHRoZSB0ZW1wbGF0ZSB0aGF0IGBsaXQtaHRtbGBcbiAgICAvLyB3aWxsIGFjdHVhbGx5IHJlbmRlciBzbyB0aGF0IGl0IGNhbiB1cGRhdGUgdGhlIHN0eWxlIGluc2lkZSB3aGVuXG4gICAgLy8gbmVlZGVkIChlLmcuIEBhcHBseSBuYXRpdmUgU2hhZG93IERPTSBjYXNlKS5cbiAgICB3aW5kb3cuU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlU3R5bGVzKHRlbXBsYXRlRWxlbWVudCwgc2NvcGVOYW1lKTtcbiAgICBjb25zdCBzdHlsZSA9IGNvbnRlbnQucXVlcnlTZWxlY3Rvcignc3R5bGUnKTtcbiAgICBpZiAod2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdyAmJiBzdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBXaGVuIGluIG5hdGl2ZSBTaGFkb3cgRE9NLCBlbnN1cmUgdGhlIHN0eWxlIGNyZWF0ZWQgYnkgU2hhZHlDU1MgaXNcbiAgICAgICAgLy8gaW5jbHVkZWQgaW4gaW5pdGlhbGx5IHJlbmRlcmVkIG91dHB1dCAoYHJlbmRlcmVkRE9NYCkuXG4gICAgICAgIHJlbmRlcmVkRE9NLmluc2VydEJlZm9yZShzdHlsZS5jbG9uZU5vZGUodHJ1ZSksIHJlbmRlcmVkRE9NLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBlbHNlIGlmICghIXRlbXBsYXRlKSB7XG4gICAgICAgIC8vIFdoZW4gbm8gc3R5bGUgaXMgbGVmdCBpbiB0aGUgdGVtcGxhdGUsIHBhcnRzIHdpbGwgYmUgYnJva2VuIGFzIGFcbiAgICAgICAgLy8gcmVzdWx0LiBUbyBmaXggdGhpcywgd2UgcHV0IGJhY2sgdGhlIHN0eWxlIG5vZGUgU2hhZHlDU1MgcmVtb3ZlZFxuICAgICAgICAvLyBhbmQgdGhlbiB0ZWxsIGxpdCB0byByZW1vdmUgdGhhdCBub2RlIGZyb20gdGhlIHRlbXBsYXRlLlxuICAgICAgICAvLyBUaGVyZSBjYW4gYmUgbm8gc3R5bGUgaW4gdGhlIHRlbXBsYXRlIGluIDIgY2FzZXMgKDEpIHdoZW4gU2hhZHkgRE9NXG4gICAgICAgIC8vIGlzIGluIHVzZSwgU2hhZHlDU1MgcmVtb3ZlcyBhbGwgc3R5bGVzLCAoMikgd2hlbiBuYXRpdmUgU2hhZG93IERPTVxuICAgICAgICAvLyBpcyBpbiB1c2UgU2hhZHlDU1MgcmVtb3ZlcyB0aGUgc3R5bGUgaWYgaXQgY29udGFpbnMgbm8gY29udGVudC5cbiAgICAgICAgLy8gTk9URSwgU2hhZHlDU1MgY3JlYXRlcyBpdHMgb3duIHN0eWxlIHNvIHdlIGNhbiBzYWZlbHkgYWRkL3JlbW92ZVxuICAgICAgICAvLyBgY29uZGVuc2VkU3R5bGVgIGhlcmUuXG4gICAgICAgIGNvbnRlbnQuaW5zZXJ0QmVmb3JlKGNvbmRlbnNlZFN0eWxlLCBjb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICBjb25zdCByZW1vdmVzID0gbmV3IFNldCgpO1xuICAgICAgICByZW1vdmVzLmFkZChjb25kZW5zZWRTdHlsZSk7XG4gICAgICAgIHJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCByZW1vdmVzKTtcbiAgICB9XG59O1xuLyoqXG4gKiBFeHRlbnNpb24gdG8gdGhlIHN0YW5kYXJkIGByZW5kZXJgIG1ldGhvZCB3aGljaCBzdXBwb3J0cyByZW5kZXJpbmdcbiAqIHRvIFNoYWRvd1Jvb3RzIHdoZW4gdGhlIFNoYWR5RE9NIChodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9zaGFkeWRvbSlcbiAqIGFuZCBTaGFkeUNTUyAoaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvc2hhZHljc3MpIHBvbHlmaWxscyBhcmUgdXNlZFxuICogb3Igd2hlbiB0aGUgd2ViY29tcG9uZW50c2pzXG4gKiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzKSBwb2x5ZmlsbCBpcyB1c2VkLlxuICpcbiAqIEFkZHMgYSBgc2NvcGVOYW1lYCBvcHRpb24gd2hpY2ggaXMgdXNlZCB0byBzY29wZSBlbGVtZW50IERPTSBhbmQgc3R5bGVzaGVldHNcbiAqIHdoZW4gbmF0aXZlIFNoYWRvd0RPTSBpcyB1bmF2YWlsYWJsZS4gVGhlIGBzY29wZU5hbWVgIHdpbGwgYmUgYWRkZWQgdG9cbiAqIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb2YgYWxsIHJlbmRlcmVkIERPTS4gSW4gYWRkaXRpb24sIGFueSBzdHlsZSBlbGVtZW50cyB3aWxsXG4gKiBiZSBhdXRvbWF0aWNhbGx5IHJlLXdyaXR0ZW4gd2l0aCB0aGlzIGBzY29wZU5hbWVgIHNlbGVjdG9yIGFuZCBtb3ZlZCBvdXRcbiAqIG9mIHRoZSByZW5kZXJlZCBET00gYW5kIGludG8gdGhlIGRvY3VtZW50IGA8aGVhZD5gLlxuICpcbiAqIEl0IGlzIGNvbW1vbiB0byB1c2UgdGhpcyByZW5kZXIgbWV0aG9kIGluIGNvbmp1bmN0aW9uIHdpdGggYSBjdXN0b20gZWxlbWVudFxuICogd2hpY2ggcmVuZGVycyBhIHNoYWRvd1Jvb3QuIFdoZW4gdGhpcyBpcyBkb25lLCB0eXBpY2FsbHkgdGhlIGVsZW1lbnQnc1xuICogYGxvY2FsTmFtZWAgc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGBzY29wZU5hbWVgLlxuICpcbiAqIEluIGFkZGl0aW9uIHRvIERPTSBzY29waW5nLCBTaGFkeUNTUyBhbHNvIHN1cHBvcnRzIGEgYmFzaWMgc2hpbSBmb3IgY3NzXG4gKiBjdXN0b20gcHJvcGVydGllcyAobmVlZGVkIG9ubHkgb24gb2xkZXIgYnJvd3NlcnMgbGlrZSBJRTExKSBhbmQgYSBzaGltIGZvclxuICogYSBkZXByZWNhdGVkIGZlYXR1cmUgY2FsbGVkIGBAYXBwbHlgIHRoYXQgc3VwcG9ydHMgYXBwbHlpbmcgYSBzZXQgb2YgY3NzXG4gKiBjdXN0b20gcHJvcGVydGllcyB0byBhIGdpdmVuIGxvY2F0aW9uLlxuICpcbiAqIFVzYWdlIGNvbnNpZGVyYXRpb25zOlxuICpcbiAqICogUGFydCB2YWx1ZXMgaW4gYDxzdHlsZT5gIGVsZW1lbnRzIGFyZSBvbmx5IGFwcGxpZWQgdGhlIGZpcnN0IHRpbWUgYSBnaXZlblxuICogYHNjb3BlTmFtZWAgcmVuZGVycy4gU3Vic2VxdWVudCBjaGFuZ2VzIHRvIHBhcnRzIGluIHN0eWxlIGVsZW1lbnRzIHdpbGwgaGF2ZVxuICogbm8gZWZmZWN0LiBCZWNhdXNlIG9mIHRoaXMsIHBhcnRzIGluIHN0eWxlIGVsZW1lbnRzIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yXG4gKiB2YWx1ZXMgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSwgZm9yIGV4YW1wbGUgcGFydHMgdGhhdCBzZXQgc2NvcGUtd2lkZSB0aGVtZVxuICogdmFsdWVzIG9yIHBhcnRzIHdoaWNoIHJlbmRlciBzaGFyZWQgc3R5bGUgZWxlbWVudHMuXG4gKlxuICogKiBOb3RlLCBkdWUgdG8gYSBsaW1pdGF0aW9uIG9mIHRoZSBTaGFkeURPTSBwb2x5ZmlsbCwgcmVuZGVyaW5nIGluIGFcbiAqIGN1c3RvbSBlbGVtZW50J3MgYGNvbnN0cnVjdG9yYCBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkIHJlbmRlcmluZyBzaG91bGRcbiAqIGVpdGhlciBkb25lIGFzeW5jaHJvbm91c2x5LCBmb3IgZXhhbXBsZSBhdCBtaWNyb3Rhc2sgdGltaW5nIChmb3IgZXhhbXBsZVxuICogYFByb21pc2UucmVzb2x2ZSgpYCksIG9yIGJlIGRlZmVycmVkIHVudGlsIHRoZSBmaXJzdCB0aW1lIHRoZSBlbGVtZW50J3NcbiAqIGBjb25uZWN0ZWRDYWxsYmFja2AgcnVucy5cbiAqXG4gKiBVc2FnZSBjb25zaWRlcmF0aW9ucyB3aGVuIHVzaW5nIHNoaW1tZWQgY3VzdG9tIHByb3BlcnRpZXMgb3IgYEBhcHBseWA6XG4gKlxuICogKiBXaGVuZXZlciBhbnkgZHluYW1pYyBjaGFuZ2VzIGFyZSBtYWRlIHdoaWNoIGFmZmVjdFxuICogY3NzIGN1c3RvbSBwcm9wZXJ0aWVzLCBgU2hhZHlDU1Muc3R5bGVFbGVtZW50KGVsZW1lbnQpYCBtdXN0IGJlIGNhbGxlZFxuICogdG8gdXBkYXRlIHRoZSBlbGVtZW50LiBUaGVyZSBhcmUgdHdvIGNhc2VzIHdoZW4gdGhpcyBpcyBuZWVkZWQ6XG4gKiAoMSkgdGhlIGVsZW1lbnQgaXMgY29ubmVjdGVkIHRvIGEgbmV3IHBhcmVudCwgKDIpIGEgY2xhc3MgaXMgYWRkZWQgdG8gdGhlXG4gKiBlbGVtZW50IHRoYXQgY2F1c2VzIGl0IHRvIG1hdGNoIGRpZmZlcmVudCBjdXN0b20gcHJvcGVydGllcy5cbiAqIFRvIGFkZHJlc3MgdGhlIGZpcnN0IGNhc2Ugd2hlbiByZW5kZXJpbmcgYSBjdXN0b20gZWxlbWVudCwgYHN0eWxlRWxlbWVudGBcbiAqIHNob3VsZCBiZSBjYWxsZWQgaW4gdGhlIGVsZW1lbnQncyBgY29ubmVjdGVkQ2FsbGJhY2tgLlxuICpcbiAqICogU2hpbW1lZCBjdXN0b20gcHJvcGVydGllcyBtYXkgb25seSBiZSBkZWZpbmVkIGVpdGhlciBmb3IgYW4gZW50aXJlXG4gKiBzaGFkb3dSb290IChmb3IgZXhhbXBsZSwgaW4gYSBgOmhvc3RgIHJ1bGUpIG9yIHZpYSBhIHJ1bGUgdGhhdCBkaXJlY3RseVxuICogbWF0Y2hlcyBhbiBlbGVtZW50IHdpdGggYSBzaGFkb3dSb290LiBJbiBvdGhlciB3b3JkcywgaW5zdGVhZCBvZiBmbG93aW5nIGZyb21cbiAqIHBhcmVudCB0byBjaGlsZCBhcyBkbyBuYXRpdmUgY3NzIGN1c3RvbSBwcm9wZXJ0aWVzLCBzaGltbWVkIGN1c3RvbSBwcm9wZXJ0aWVzXG4gKiBmbG93IG9ubHkgZnJvbSBzaGFkb3dSb290cyB0byBuZXN0ZWQgc2hhZG93Um9vdHMuXG4gKlxuICogKiBXaGVuIHVzaW5nIGBAYXBwbHlgIG1peGluZyBjc3Mgc2hvcnRoYW5kIHByb3BlcnR5IG5hbWVzIHdpdGhcbiAqIG5vbi1zaG9ydGhhbmQgbmFtZXMgKGZvciBleGFtcGxlIGBib3JkZXJgIGFuZCBgYm9yZGVyLXdpZHRoYCkgaXMgbm90XG4gKiBzdXBwb3J0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSAocmVzdWx0LCBjb250YWluZXIsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8ICFvcHRpb25zLnNjb3BlTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgc2NvcGVOYW1lYCBvcHRpb24gaXMgcmVxdWlyZWQuJyk7XG4gICAgfVxuICAgIGNvbnN0IHNjb3BlTmFtZSA9IG9wdGlvbnMuc2NvcGVOYW1lO1xuICAgIGNvbnN0IGhhc1JlbmRlcmVkID0gcGFydHMuaGFzKGNvbnRhaW5lcik7XG4gICAgY29uc3QgbmVlZHNTY29waW5nID0gY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiAmJlxuICAgICAgICBjb250YWluZXIubm9kZVR5cGUgPT09IDExIC8qIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSAqLyAmJlxuICAgICAgICAhIWNvbnRhaW5lci5ob3N0O1xuICAgIC8vIEhhbmRsZSBmaXJzdCByZW5kZXIgdG8gYSBzY29wZSBzcGVjaWFsbHkuLi5cbiAgICBjb25zdCBmaXJzdFNjb3BlUmVuZGVyID0gbmVlZHNTY29waW5nICYmICFzaGFkeVJlbmRlclNldC5oYXMoc2NvcGVOYW1lKTtcbiAgICAvLyBPbiBmaXJzdCBzY29wZSByZW5kZXIsIHJlbmRlciBpbnRvIGEgZnJhZ21lbnQ7IHRoaXMgY2Fubm90IGJlIGEgc2luZ2xlXG4gICAgLy8gZnJhZ21lbnQgdGhhdCBpcyByZXVzZWQgc2luY2UgbmVzdGVkIHJlbmRlcnMgY2FuIG9jY3VyIHN5bmNocm9ub3VzbHkuXG4gICAgY29uc3QgcmVuZGVyQ29udGFpbmVyID0gZmlyc3RTY29wZVJlbmRlciA/IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSA6IGNvbnRhaW5lcjtcbiAgICBsaXRSZW5kZXIocmVzdWx0LCByZW5kZXJDb250YWluZXIsIE9iamVjdC5hc3NpZ24oeyB0ZW1wbGF0ZUZhY3Rvcnk6IHNoYWR5VGVtcGxhdGVGYWN0b3J5KHNjb3BlTmFtZSkgfSwgb3B0aW9ucykpO1xuICAgIC8vIFdoZW4gcGVyZm9ybWluZyBmaXJzdCBzY29wZSByZW5kZXIsXG4gICAgLy8gKDEpIFdlJ3ZlIHJlbmRlcmVkIGludG8gYSBmcmFnbWVudCBzbyB0aGF0IHRoZXJlJ3MgYSBjaGFuY2UgdG9cbiAgICAvLyBgcHJlcGFyZVRlbXBsYXRlU3R5bGVzYCBiZWZvcmUgc3ViLWVsZW1lbnRzIGhpdCB0aGUgRE9NXG4gICAgLy8gKHdoaWNoIG1pZ2h0IGNhdXNlIHRoZW0gdG8gcmVuZGVyIGJhc2VkIG9uIGEgY29tbW9uIHBhdHRlcm4gb2ZcbiAgICAvLyByZW5kZXJpbmcgaW4gYSBjdXN0b20gZWxlbWVudCdzIGBjb25uZWN0ZWRDYWxsYmFja2ApO1xuICAgIC8vICgyKSBTY29wZSB0aGUgdGVtcGxhdGUgd2l0aCBTaGFkeUNTUyBvbmUgdGltZSBvbmx5IGZvciB0aGlzIHNjb3BlLlxuICAgIC8vICgzKSBSZW5kZXIgdGhlIGZyYWdtZW50IGludG8gdGhlIGNvbnRhaW5lciBhbmQgbWFrZSBzdXJlIHRoZVxuICAgIC8vIGNvbnRhaW5lciBrbm93cyBpdHMgYHBhcnRgIGlzIHRoZSBvbmUgd2UganVzdCByZW5kZXJlZC4gVGhpcyBlbnN1cmVzXG4gICAgLy8gRE9NIHdpbGwgYmUgcmUtdXNlZCBvbiBzdWJzZXF1ZW50IHJlbmRlcnMuXG4gICAgaWYgKGZpcnN0U2NvcGVSZW5kZXIpIHtcbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzLmdldChyZW5kZXJDb250YWluZXIpO1xuICAgICAgICBwYXJ0cy5kZWxldGUocmVuZGVyQ29udGFpbmVyKTtcbiAgICAgICAgLy8gU2hhZHlDU1MgbWlnaHQgaGF2ZSBzdHlsZSBzaGVldHMgKGUuZy4gZnJvbSBgcHJlcGFyZUFkb3B0ZWRDc3NUZXh0YClcbiAgICAgICAgLy8gdGhhdCBzaG91bGQgYXBwbHkgdG8gYHJlbmRlckNvbnRhaW5lcmAgZXZlbiBpZiB0aGUgcmVuZGVyZWQgdmFsdWUgaXNcbiAgICAgICAgLy8gbm90IGEgVGVtcGxhdGVJbnN0YW5jZS4gSG93ZXZlciwgaXQgd2lsbCBvbmx5IGluc2VydCBzY29wZWQgc3R5bGVzXG4gICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50IGlmIGBwcmVwYXJlVGVtcGxhdGVTdHlsZXNgIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkXG4gICAgICAgIC8vIGZvciB0aGUgZ2l2ZW4gc2NvcGUgbmFtZS5cbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBwYXJ0LnZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVJbnN0YW5jZSA/XG4gICAgICAgICAgICBwYXJ0LnZhbHVlLnRlbXBsYXRlIDpcbiAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgICAgcHJlcGFyZVRlbXBsYXRlU3R5bGVzKHNjb3BlTmFtZSwgcmVuZGVyQ29udGFpbmVyLCB0ZW1wbGF0ZSk7XG4gICAgICAgIHJlbW92ZU5vZGVzKGNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyQ29udGFpbmVyKTtcbiAgICAgICAgcGFydHMuc2V0KGNvbnRhaW5lciwgcGFydCk7XG4gICAgfVxuICAgIC8vIEFmdGVyIGVsZW1lbnRzIGhhdmUgaGl0IHRoZSBET00sIHVwZGF0ZSBzdHlsaW5nIGlmIHRoaXMgaXMgdGhlXG4gICAgLy8gaW5pdGlhbCByZW5kZXIgdG8gdGhpcyBjb250YWluZXIuXG4gICAgLy8gVGhpcyBpcyBuZWVkZWQgd2hlbmV2ZXIgZHluYW1pYyBjaGFuZ2VzIGFyZSBtYWRlIHNvIGl0IHdvdWxkIGJlXG4gICAgLy8gc2FmZXN0IHRvIGRvIGV2ZXJ5IHJlbmRlcjsgaG93ZXZlciwgdGhpcyB3b3VsZCByZWdyZXNzIHBlcmZvcm1hbmNlXG4gICAgLy8gc28gd2UgbGVhdmUgaXQgdXAgdG8gdGhlIHVzZXIgdG8gY2FsbCBgU2hhZHlDU1Muc3R5bGVFbGVtZW50YFxuICAgIC8vIGZvciBkeW5hbWljIGNoYW5nZXMuXG4gICAgaWYgKCFoYXNSZW5kZXJlZCAmJiBuZWVkc1Njb3BpbmcpIHtcbiAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudChjb250YWluZXIuaG9zdCk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYWR5LXJlbmRlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG52YXIgX2E7XG4vKipcbiAqIFdoZW4gdXNpbmcgQ2xvc3VyZSBDb21waWxlciwgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eShwcm9wZXJ0eSwgb2JqZWN0KSBpc1xuICogcmVwbGFjZWQgYXQgY29tcGlsZSB0aW1lIGJ5IHRoZSBtdW5nZWQgbmFtZSBmb3Igb2JqZWN0W3Byb3BlcnR5XS4gV2UgY2Fubm90XG4gKiBhbGlhcyB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvIHVzZSBhIHNtYWxsIHNoaW0gdGhhdCBoYXMgdGhlIHNhbWVcbiAqIGJlaGF2aW9yIHdoZW4gbm90IGNvbXBpbGluZy5cbiAqL1xud2luZG93LkpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkgPVxuICAgIChwcm9wLCBfb2JqKSA9PiBwcm9wO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb252ZXJ0ZXIgPSB7XG4gICAgdG9BdHRyaWJ1dGUodmFsdWUsIHR5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gJycgOiBudWxsO1xuICAgICAgICAgICAgY2FzZSBPYmplY3Q6XG4gICAgICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgcGFzcyB0aGlzIHRocm91Z2hcbiAgICAgICAgICAgICAgICAvLyB0byBhbGxvdyByZW1vdmluZy9ubyBjaGFuZ2UgYmVoYXZpb3IuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2YWx1ZSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBmcm9tQXR0cmlidXRlKHZhbHVlLCB0eXBlKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbDtcbiAgICAgICAgICAgIGNhc2UgTnVtYmVyOlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IG51bGwgOiBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPYmplY3Q6XG4gICAgICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufTtcbi8qKlxuICogQ2hhbmdlIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgZGlmZmVyZW50IGZyb20gYG9sZFZhbHVlYC5cbiAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgYXMgdGhlIGRlZmF1bHQgZm9yIGEgcHJvcGVydHkncyBgaGFzQ2hhbmdlZGAgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBub3RFcXVhbCA9ICh2YWx1ZSwgb2xkKSA9PiB7XG4gICAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgICByZXR1cm4gb2xkICE9PSB2YWx1ZSAmJiAob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKTtcbn07XG5jb25zdCBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbiA9IHtcbiAgICBhdHRyaWJ1dGU6IHRydWUsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGNvbnZlcnRlcjogZGVmYXVsdENvbnZlcnRlcixcbiAgICByZWZsZWN0OiBmYWxzZSxcbiAgICBoYXNDaGFuZ2VkOiBub3RFcXVhbFxufTtcbmNvbnN0IFNUQVRFX0hBU19VUERBVEVEID0gMTtcbmNvbnN0IFNUQVRFX1VQREFURV9SRVFVRVNURUQgPSAxIDw8IDI7XG5jb25zdCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURSA9IDEgPDwgMztcbmNvbnN0IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFkgPSAxIDw8IDQ7XG4vKipcbiAqIFRoZSBDbG9zdXJlIEpTIENvbXBpbGVyIGRvZXNuJ3QgY3VycmVudGx5IGhhdmUgZ29vZCBzdXBwb3J0IGZvciBzdGF0aWNcbiAqIHByb3BlcnR5IHNlbWFudGljcyB3aGVyZSBcInRoaXNcIiBpcyBkeW5hbWljIChlLmcuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMxNzcgYW5kIG90aGVycykgc28gd2UgdXNlXG4gKiB0aGlzIGhhY2sgdG8gYnlwYXNzIGFueSByZXdyaXRpbmcgYnkgdGhlIGNvbXBpbGVyLlxuICovXG5jb25zdCBmaW5hbGl6ZWQgPSAnZmluYWxpemVkJztcbi8qKlxuICogQmFzZSBlbGVtZW50IGNsYXNzIHdoaWNoIG1hbmFnZXMgZWxlbWVudCBwcm9wZXJ0aWVzIGFuZCBhdHRyaWJ1dGVzLiBXaGVuXG4gKiBwcm9wZXJ0aWVzIGNoYW5nZSwgdGhlIGB1cGRhdGVgIG1ldGhvZCBpcyBhc3luY2hyb25vdXNseSBjYWxsZWQuIFRoaXMgbWV0aG9kXG4gKiBzaG91bGQgYmUgc3VwcGxpZWQgYnkgc3ViY2xhc3NlcnMgdG8gcmVuZGVyIHVwZGF0ZXMgYXMgZGVzaXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFVwZGF0aW5nRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSAwO1xuICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIEluaXRpYWxpemUgdG8gYW4gdW5yZXNvbHZlZCBQcm9taXNlIHNvIHdlIGNhbiBtYWtlIHN1cmUgdGhlIGVsZW1lbnQgaGFzXG4gICAgICAgIC8vIGNvbm5lY3RlZCBiZWZvcmUgZmlyc3QgdXBkYXRlLlxuICAgICAgICB0aGlzLl91cGRhdGVQcm9taXNlID0gbmV3IFByb21pc2UoKHJlcykgPT4gdGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciA9IHJlcyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXAgd2l0aCBrZXlzIGZvciBhbnkgcHJvcGVydGllcyB0aGF0IGhhdmUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdFxuICAgICAgICAgKiB1cGRhdGUgY3ljbGUgd2l0aCBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jaGFuZ2VkUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcCB3aXRoIGtleXMgb2YgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSByZWZsZWN0ZWQgd2hlbiB1cGRhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhdHRyaWJ1dGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICAvLyBub3RlOiBwaWdneSBiYWNraW5nIG9uIHRoaXMgdG8gZW5zdXJlIHdlJ3JlIGZpbmFsaXplZC5cbiAgICAgICAgdGhpcy5maW5hbGl6ZSgpO1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107XG4gICAgICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvciBsb29wc1xuICAgICAgICAvLyBleHBlY3RpbmcgYXJyYXlzXG4gICAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcy5mb3JFYWNoKCh2LCBwKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHAsIHYpO1xuICAgICAgICAgICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAuc2V0KGF0dHIsIHApO1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoZSBwcml2YXRlIGBfY2xhc3NQcm9wZXJ0aWVzYCBwcm9wZXJ0eSBtZXRhZGF0YSBpcyBjcmVhdGVkLlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGBmaW5hbGl6ZWAgdGhpcyBpcyBhbHNvIGNhbGxlZCBpbiBgY3JlYXRlUHJvcGVydHlgIHRvXG4gICAgICogZW5zdXJlIHRoZSBgQHByb3BlcnR5YCBkZWNvcmF0b3IgY2FuIGFkZCBwcm9wZXJ0eSBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBzdGF0aWMgX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpIHtcbiAgICAgICAgLy8gZW5zdXJlIHByaXZhdGUgc3RvcmFnZSBmb3IgcHJvcGVydHkgZGVjbGFyYXRpb25zLlxuICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX2NsYXNzUHJvcGVydGllcycsIHRoaXMpKSkge1xuICAgICAgICAgICAgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgLy8gTk9URTogV29ya2Fyb3VuZCBJRTExIG5vdCBzdXBwb3J0aW5nIE1hcCBjb25zdHJ1Y3RvciBhcmd1bWVudC5cbiAgICAgICAgICAgIGNvbnN0IHN1cGVyUHJvcGVydGllcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fY2xhc3NQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgaWYgKHN1cGVyUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3VwZXJQcm9wZXJ0aWVzLmZvckVhY2goKHYsIGspID0+IHRoaXMuX2NsYXNzUHJvcGVydGllcy5zZXQoaywgdikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwcm9wZXJ0eSBhY2Nlc3NvciBvbiB0aGUgZWxlbWVudCBwcm90b3R5cGUgaWYgb25lIGRvZXMgbm90IGV4aXN0XG4gICAgICogYW5kIHN0b3JlcyBhIFByb3BlcnR5RGVjbGFyYXRpb24gZm9yIHRoZSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgICAqIFRoZSBwcm9wZXJ0eSBzZXR0ZXIgY2FsbHMgdGhlIHByb3BlcnR5J3MgYGhhc0NoYW5nZWRgIHByb3BlcnR5IG9wdGlvblxuICAgICAqIG9yIHVzZXMgYSBzdHJpY3QgaWRlbnRpdHkgY2hlY2sgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IHRvIHJlcXVlc3RcbiAgICAgKiBhbiB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBtYXkgYmUgb3ZlcnJpZGRlbiB0byBjdXN0b21pemUgcHJvcGVydGllczsgaG93ZXZlcixcbiAgICAgKiB3aGVuIGRvaW5nIHNvLCBpdCdzIGltcG9ydGFudCB0byBjYWxsIGBzdXBlci5jcmVhdGVQcm9wZXJ0eWAgdG8gZW5zdXJlXG4gICAgICogdGhlIHByb3BlcnR5IGlzIHNldHVwIGNvcnJlY3RseS4gVGhpcyBtZXRob2QgY2FsbHNcbiAgICAgKiBgZ2V0UHJvcGVydHlEZXNjcmlwdG9yYCBpbnRlcm5hbGx5IHRvIGdldCBhIGRlc2NyaXB0b3IgdG8gaW5zdGFsbC5cbiAgICAgKiBUbyBjdXN0b21pemUgd2hhdCBwcm9wZXJ0aWVzIGRvIHdoZW4gdGhleSBhcmUgZ2V0IG9yIHNldCwgb3ZlcnJpZGVcbiAgICAgKiBgZ2V0UHJvcGVydHlEZXNjcmlwdG9yYC4gVG8gY3VzdG9taXplIHRoZSBvcHRpb25zIGZvciBhIHByb3BlcnR5LFxuICAgICAqIGltcGxlbWVudCBgY3JlYXRlUHJvcGVydHlgIGxpa2UgdGhpczpcbiAgICAgKlxuICAgICAqIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eShuYW1lLCBvcHRpb25zKSB7XG4gICAgICogICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7bXlPcHRpb246IHRydWV9KTtcbiAgICAgKiAgIHN1cGVyLmNyZWF0ZVByb3BlcnR5KG5hbWUsIG9wdGlvbnMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVByb3BlcnR5KG5hbWUsIG9wdGlvbnMgPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikge1xuICAgICAgICAvLyBOb3RlLCBzaW5jZSB0aGlzIGNhbiBiZSBjYWxsZWQgYnkgdGhlIGBAcHJvcGVydHlgIGRlY29yYXRvciB3aGljaFxuICAgICAgICAvLyBpcyBjYWxsZWQgYmVmb3JlIGBmaW5hbGl6ZWAsIHdlIGVuc3VyZSBzdG9yYWdlIGV4aXN0cyBmb3IgcHJvcGVydHlcbiAgICAgICAgLy8gbWV0YWRhdGEuXG4gICAgICAgIHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLl9jbGFzc1Byb3BlcnRpZXMuc2V0KG5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAvLyBEbyBub3QgZ2VuZXJhdGUgYW4gYWNjZXNzb3IgaWYgdGhlIHByb3RvdHlwZSBhbHJlYWR5IGhhcyBvbmUsIHNpbmNlXG4gICAgICAgIC8vIGl0IHdvdWxkIGJlIGxvc3Qgb3RoZXJ3aXNlIGFuZCB0aGF0IHdvdWxkIG5ldmVyIGJlIHRoZSB1c2VyJ3MgaW50ZW50aW9uO1xuICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBleHBlY3QgdXNlcnMgdG8gY2FsbCBgcmVxdWVzdFVwZGF0ZWAgdGhlbXNlbHZlcyBmcm9tXG4gICAgICAgIC8vIHVzZXItZGVmaW5lZCBhY2Nlc3NvcnMuIE5vdGUgdGhhdCBpZiB0aGUgc3VwZXIgaGFzIGFuIGFjY2Vzc29yIHdlIHdpbGxcbiAgICAgICAgLy8gc3RpbGwgb3ZlcndyaXRlIGl0XG4gICAgICAgIGlmIChvcHRpb25zLm5vQWNjZXNzb3IgfHwgdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSB0eXBlb2YgbmFtZSA9PT0gJ3N5bWJvbCcgPyBTeW1ib2woKSA6IGBfXyR7bmFtZX1gO1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJvcGVydHkgZGVzY3JpcHRvciB0byBiZSBkZWZpbmVkIG9uIHRoZSBnaXZlbiBuYW1lZCBwcm9wZXJ0eS5cbiAgICAgKiBJZiBubyBkZXNjcmlwdG9yIGlzIHJldHVybmVkLCB0aGUgcHJvcGVydHkgd2lsbCBub3QgYmVjb21lIGFuIGFjY2Vzc29yLlxuICAgICAqIEZvciBleGFtcGxlLFxuICAgICAqXG4gICAgICogICBjbGFzcyBNeUVsZW1lbnQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICAgKiAgICAgc3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcihuYW1lLCBrZXksIG9wdGlvbnMpIHtcbiAgICAgKiAgICAgICBjb25zdCBkZWZhdWx0RGVzY3JpcHRvciA9XG4gICAgICogICAgICAgICAgIHN1cGVyLmdldFByb3BlcnR5RGVzY3JpcHRvcihuYW1lLCBrZXksIG9wdGlvbnMpO1xuICAgICAqICAgICAgIGNvbnN0IHNldHRlciA9IGRlZmF1bHREZXNjcmlwdG9yLnNldDtcbiAgICAgKiAgICAgICByZXR1cm4ge1xuICAgICAqICAgICAgICAgZ2V0OiBkZWZhdWx0RGVzY3JpcHRvci5nZXQsXG4gICAgICogICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgKiAgICAgICAgICAgc2V0dGVyLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAqICAgICAgICAgICAvLyBjdXN0b20gYWN0aW9uLlxuICAgICAqICAgICAgICAgfSxcbiAgICAgKiAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgKiAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH1cbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcihuYW1lLCBrZXksIF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG5vIHN5bWJvbCBpbiBpbmRleFxuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2tleV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzW25hbWVdO1xuICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJvcGVydHkgb3B0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIFRoZXNlIG9wdGlvbnMgYXJlIGRlZmluZWQgd2l0aCBhIFByb3BlcnR5RGVjbGFyYXRpb24gdmlhIHRoZSBgcHJvcGVydGllc2BcbiAgICAgKiBvYmplY3Qgb3IgdGhlIGBAcHJvcGVydHlgIGRlY29yYXRvciBhbmQgYXJlIHJlZ2lzdGVyZWQgaW5cbiAgICAgKiBgY3JlYXRlUHJvcGVydHkoLi4uKWAuXG4gICAgICpcbiAgICAgKiBOb3RlLCB0aGlzIG1ldGhvZCBzaG91bGQgYmUgY29uc2lkZXJlZCBcImZpbmFsXCIgYW5kIG5vdCBvdmVycmlkZGVuLiBUb1xuICAgICAqIGN1c3RvbWl6ZSB0aGUgb3B0aW9ucyBmb3IgYSBnaXZlbiBwcm9wZXJ0eSwgb3ZlcnJpZGUgYGNyZWF0ZVByb3BlcnR5YC5cbiAgICAgKlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICogQGZpbmFsXG4gICAgICovXG4gICAgc3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyhuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMgJiYgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLmdldChuYW1lKSB8fFxuICAgICAgICAgICAgZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgcHJvcGVydHkgYWNjZXNzb3JzIGZvciByZWdpc3RlcmVkIHByb3BlcnRpZXMgYW5kIGVuc3VyZXNcbiAgICAgKiBhbnkgc3VwZXJjbGFzc2VzIGFyZSBhbHNvIGZpbmFsaXplZC5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBmaW5hbGl6ZSgpIHtcbiAgICAgICAgLy8gZmluYWxpemUgYW55IHN1cGVyY2xhc3Nlc1xuICAgICAgICBjb25zdCBzdXBlckN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7XG4gICAgICAgIGlmICghc3VwZXJDdG9yLmhhc093blByb3BlcnR5KGZpbmFsaXplZCkpIHtcbiAgICAgICAgICAgIHN1cGVyQ3Rvci5maW5hbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbZmluYWxpemVkXSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpO1xuICAgICAgICAvLyBpbml0aWFsaXplIE1hcCBwb3B1bGF0ZWQgaW4gb2JzZXJ2ZWRBdHRyaWJ1dGVzXG4gICAgICAgIHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIG1ha2UgYW55IHByb3BlcnRpZXNcbiAgICAgICAgLy8gTm90ZSwgb25seSBwcm9jZXNzIFwib3duXCIgcHJvcGVydGllcyBzaW5jZSB0aGlzIGVsZW1lbnQgd2lsbCBpbmhlcml0XG4gICAgICAgIC8vIGFueSBwcm9wZXJ0aWVzIGRlZmluZWQgb24gdGhlIHN1cGVyQ2xhc3MsIGFuZCBmaW5hbGl6YXRpb24gZW5zdXJlc1xuICAgICAgICAvLyB0aGUgZW50aXJlIHByb3RvdHlwZSBjaGFpbiBpcyBmaW5hbGl6ZWQuXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3Byb3BlcnRpZXMnLCB0aGlzKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wZXJ0aWVzO1xuICAgICAgICAgICAgLy8gc3VwcG9ydCBzeW1ib2xzIGluIHByb3BlcnRpZXMgKElFMTEgZG9lcyBub3Qgc3VwcG9ydCB0aGlzKVxuICAgICAgICAgICAgY29uc3QgcHJvcEtleXMgPSBbXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvcHMpLFxuICAgICAgICAgICAgICAgIC4uLih0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BzKSA6XG4gICAgICAgICAgICAgICAgICAgIFtdXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgLy8gVGhpcyBmb3Ivb2YgaXMgb2sgYmVjYXVzZSBwcm9wS2V5cyBpcyBhbiBhcnJheVxuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHByb3BLZXlzKSB7XG4gICAgICAgICAgICAgICAgLy8gbm90ZSwgdXNlIG9mIGBhbnlgIGlzIGR1ZSB0byBUeXBlU3JpcHQgbGFjayBvZiBzdXBwb3J0IGZvciBzeW1ib2wgaW5cbiAgICAgICAgICAgICAgICAvLyBpbmRleCB0eXBlc1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgbm8gc3ltYm9sIGluIGluZGV4XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0eShwLCBwcm9wc1twXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJvcGVydHkgbmFtZSBmb3IgdGhlIGdpdmVuIGF0dHJpYnV0ZSBgbmFtZWAuXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG9wdGlvbnMuYXR0cmlidXRlO1xuICAgICAgICByZXR1cm4gYXR0cmlidXRlID09PSBmYWxzZSA/XG4gICAgICAgICAgICB1bmRlZmluZWQgOlxuICAgICAgICAgICAgKHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgOlxuICAgICAgICAgICAgICAgICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGEgcHJvcGVydHkgc2hvdWxkIHJlcXVlc3QgYW4gdXBkYXRlLlxuICAgICAqIENhbGxlZCB3aGVuIGEgcHJvcGVydHkgdmFsdWUgaXMgc2V0IGFuZCB1c2VzIHRoZSBgaGFzQ2hhbmdlZGBcbiAgICAgKiBvcHRpb24gZm9yIHRoZSBwcm9wZXJ0eSBpZiBwcmVzZW50IG9yIGEgc3RyaWN0IGlkZW50aXR5IGNoZWNrLlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF92YWx1ZUhhc0NoYW5nZWQodmFsdWUsIG9sZCwgaGFzQ2hhbmdlZCA9IG5vdEVxdWFsKSB7XG4gICAgICAgIHJldHVybiBoYXNDaGFuZ2VkKHZhbHVlLCBvbGQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiBDYWxsZWQgdmlhIHRoZSBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCBhbmQgdXNlcyB0aGUgcHJvcGVydHknc1xuICAgICAqIGBjb252ZXJ0ZXJgIG9yIGBjb252ZXJ0ZXIuZnJvbUF0dHJpYnV0ZWAgcHJvcGVydHkgb3B0aW9uLlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wcm9wZXJ0eVZhbHVlRnJvbUF0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0eXBlID0gb3B0aW9ucy50eXBlO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZXIgPSBvcHRpb25zLmNvbnZlcnRlciB8fCBkZWZhdWx0Q29udmVydGVyO1xuICAgICAgICBjb25zdCBmcm9tQXR0cmlidXRlID0gKHR5cGVvZiBjb252ZXJ0ZXIgPT09ICdmdW5jdGlvbicgPyBjb252ZXJ0ZXIgOiBjb252ZXJ0ZXIuZnJvbUF0dHJpYnV0ZSk7XG4gICAgICAgIHJldHVybiBmcm9tQXR0cmlidXRlID8gZnJvbUF0dHJpYnV0ZSh2YWx1ZSwgdHlwZSkgOiB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYXR0cmlidXRlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgdmFsdWUuIElmIHRoaXNcbiAgICAgKiByZXR1cm5zIHVuZGVmaW5lZCwgdGhlIHByb3BlcnR5IHdpbGwgKm5vdCogYmUgcmVmbGVjdGVkIHRvIGFuIGF0dHJpYnV0ZS5cbiAgICAgKiBJZiB0aGlzIHJldHVybnMgbnVsbCwgdGhlIGF0dHJpYnV0ZSB3aWxsIGJlIHJlbW92ZWQsIG90aGVyd2lzZSB0aGVcbiAgICAgKiBhdHRyaWJ1dGUgd2lsbCBiZSBzZXQgdG8gdGhlIHZhbHVlLlxuICAgICAqIFRoaXMgdXNlcyB0aGUgcHJvcGVydHkncyBgcmVmbGVjdGAgYW5kIGB0eXBlLnRvQXR0cmlidXRlYCBwcm9wZXJ0eSBvcHRpb25zLlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucmVmbGVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICAgICAgY29uc3QgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXI7XG4gICAgICAgIGNvbnN0IHRvQXR0cmlidXRlID0gY29udmVydGVyICYmIGNvbnZlcnRlci50b0F0dHJpYnV0ZSB8fFxuICAgICAgICAgICAgZGVmYXVsdENvbnZlcnRlci50b0F0dHJpYnV0ZTtcbiAgICAgICAgcmV0dXJuIHRvQXR0cmlidXRlKHZhbHVlLCB0eXBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgZWxlbWVudCBpbml0aWFsaXphdGlvbi4gQnkgZGVmYXVsdCBjYXB0dXJlcyBhbnkgcHJlLXNldCB2YWx1ZXMgZm9yXG4gICAgICogcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuX3NhdmVJbnN0YW5jZVByb3BlcnRpZXMoKTtcbiAgICAgICAgLy8gZW5zdXJlcyBmaXJzdCB1cGRhdGUgd2lsbCBiZSBjYXVnaHQgYnkgYW4gZWFybHkgYWNjZXNzIG9mXG4gICAgICAgIC8vIGB1cGRhdGVDb21wbGV0ZWBcbiAgICAgICAgdGhpcy5fcmVxdWVzdFVwZGF0ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXhlcyBhbnkgcHJvcGVydGllcyBzZXQgb24gdGhlIGluc3RhbmNlIGJlZm9yZSB1cGdyYWRlIHRpbWUuXG4gICAgICogT3RoZXJ3aXNlIHRoZXNlIHdvdWxkIHNoYWRvdyB0aGUgYWNjZXNzb3IgYW5kIGJyZWFrIHRoZXNlIHByb3BlcnRpZXMuXG4gICAgICogVGhlIHByb3BlcnRpZXMgYXJlIHN0b3JlZCBpbiBhIE1hcCB3aGljaCBpcyBwbGF5ZWQgYmFjayBhZnRlciB0aGVcbiAgICAgKiBjb25zdHJ1Y3RvciBydW5zLiBOb3RlLCBvbiB2ZXJ5IG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkgKDw9OSkgb3IgQ2hyb21lXG4gICAgICogKDw9NDEpLCBwcm9wZXJ0aWVzIGNyZWF0ZWQgZm9yIG5hdGl2ZSBwbGF0Zm9ybSBwcm9wZXJ0aWVzIGxpa2UgKGBpZGAgb3JcbiAgICAgKiBgbmFtZWApIG1heSBub3QgaGF2ZSBkZWZhdWx0IHZhbHVlcyBzZXQgaW4gdGhlIGVsZW1lbnQgY29uc3RydWN0b3IuIE9uXG4gICAgICogdGhlc2UgYnJvd3NlcnMgbmF0aXZlIHByb3BlcnRpZXMgYXBwZWFyIG9uIGluc3RhbmNlcyBhbmQgdGhlcmVmb3JlIHRoZWlyXG4gICAgICogZGVmYXVsdCB2YWx1ZSB3aWxsIG92ZXJ3cml0ZSBhbnkgZWxlbWVudCBkZWZhdWx0IChlLmcuIGlmIHRoZSBlbGVtZW50IHNldHNcbiAgICAgKiB0aGlzLmlkID0gJ2lkJyBpbiB0aGUgY29uc3RydWN0b3IsIHRoZSAnaWQnIHdpbGwgYmVjb21lICcnIHNpbmNlIHRoaXMgaXNcbiAgICAgKiB0aGUgbmF0aXZlIHBsYXRmb3JtIGRlZmF1bHQpLlxuICAgICAqL1xuICAgIF9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCkge1xuICAgICAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAgICAgLy8gZXhwZWN0aW5nIGFycmF5c1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yXG4gICAgICAgICAgICAuX2NsYXNzUHJvcGVydGllcy5mb3JFYWNoKChfdiwgcCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNbcF07XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbcF07XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMuc2V0KHAsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgcHJldmlvdXNseSBzYXZlZCBpbnN0YW5jZSBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIF9hcHBseUluc3RhbmNlUHJvcGVydGllcygpIHtcbiAgICAgICAgLy8gVXNlIGZvckVhY2ggc28gdGhpcyB3b3JrcyBldmVuIGlmIGZvci9vZiBsb29wcyBhcmUgY29tcGlsZWQgdG8gZm9yIGxvb3BzXG4gICAgICAgIC8vIGV4cGVjdGluZyBhcnJheXNcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMuZm9yRWFjaCgodiwgcCkgPT4gdGhpc1twXSA9IHYpO1xuICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAvLyBFbnN1cmUgZmlyc3QgY29ubmVjdGlvbiBjb21wbGV0ZXMgYW4gdXBkYXRlLiBVcGRhdGVzIGNhbm5vdCBjb21wbGV0ZVxuICAgICAgICAvLyBiZWZvcmUgY29ubmVjdGlvbi5cbiAgICAgICAgdGhpcy5lbmFibGVVcGRhdGluZygpO1xuICAgIH1cbiAgICBlbmFibGVVcGRhdGluZygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlcigpO1xuICAgICAgICAgICAgdGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgZm9yIGBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpYCBpbiBleHRlbnNpb25zIHdoaWxlXG4gICAgICogcmVzZXJ2aW5nIHRoZSBwb3NzaWJpbGl0eSBvZiBtYWtpbmcgbm9uLWJyZWFraW5nIGZlYXR1cmUgYWRkaXRpb25zXG4gICAgICogd2hlbiBkaXNjb25uZWN0aW5nIGF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3luY2hyb25pemVzIHByb3BlcnR5IHZhbHVlcyB3aGVuIGF0dHJpYnV0ZXMgY2hhbmdlLlxuICAgICAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChvbGQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJvcGVydHlUb0F0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgb3B0aW9ucyA9IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdCBhdHRyID0gY3Rvci5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KG5hbWUsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoYXR0ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSBjdG9yLl9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gYW4gdW5kZWZpbmVkIHZhbHVlIGRvZXMgbm90IGNoYW5nZSB0aGUgYXR0cmlidXRlLlxuICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVHJhY2sgaWYgdGhlIHByb3BlcnR5IGlzIGJlaW5nIHJlZmxlY3RlZCB0byBhdm9pZFxuICAgICAgICAgICAgLy8gc2V0dGluZyB0aGUgcHJvcGVydHkgYWdhaW4gdmlhIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLiBOb3RlOlxuICAgICAgICAgICAgLy8gMS4gdGhpcyB0YWtlcyBhZHZhbnRhZ2Ugb2YgdGhlIGZhY3QgdGhhdCB0aGUgY2FsbGJhY2sgaXMgc3luY2hyb25vdXMuXG4gICAgICAgICAgICAvLyAyLiB3aWxsIGJlaGF2ZSBpbmNvcnJlY3RseSBpZiBtdWx0aXBsZSBhdHRyaWJ1dGVzIGFyZSBpbiB0aGUgcmVhY3Rpb25cbiAgICAgICAgICAgIC8vIHN0YWNrIGF0IHRpbWUgb2YgY2FsbGluZy4gSG93ZXZlciwgc2luY2Ugd2UgcHJvY2VzcyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAvLyBpbiBgdXBkYXRlYCB0aGlzIHNob3VsZCBub3QgYmUgcG9zc2libGUgKG9yIGFuIGV4dHJlbWUgY29ybmVyIGNhc2VcbiAgICAgICAgICAgIC8vIHRoYXQgd2UnZCBsaWtlIHRvIGRpc2NvdmVyKS5cbiAgICAgICAgICAgIC8vIG1hcmsgc3RhdGUgcmVmbGVjdGluZ1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFO1xuICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFyayBzdGF0ZSBub3QgcmVmbGVjdGluZ1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSAmIH5TVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgICAgICAvLyBVc2UgdHJhY2tpbmcgaW5mbyB0byBhdm9pZCBkZXNlcmlhbGl6aW5nIGF0dHJpYnV0ZSB2YWx1ZSBpZiBpdCB3YXNcbiAgICAgICAgLy8ganVzdCBzZXQgZnJvbSBhIHByb3BlcnR5IHNldHRlci5cbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZVN0YXRlICYgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgLy8gTm90ZSwgaGludCB0aGlzIGFzIGFuIGBBdHRyaWJ1dGVNYXBgIHNvIGNsb3N1cmUgY2xlYXJseSB1bmRlcnN0YW5kc1xuICAgICAgICAvLyB0aGUgdHlwZTsgaXQgaGFzIGlzc3VlcyB3aXRoIHRyYWNraW5nIHR5cGVzIHRocm91Z2ggc3RhdGljc1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5uZWNlc3NhcnktdHlwZS1hc3NlcnRpb25cbiAgICAgICAgY29uc3QgcHJvcE5hbWUgPSBjdG9yLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwLmdldChuYW1lKTtcbiAgICAgICAgaWYgKHByb3BOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjdG9yLmdldFByb3BlcnR5T3B0aW9ucyhwcm9wTmFtZSk7XG4gICAgICAgICAgICAvLyBtYXJrIHN0YXRlIHJlZmxlY3RpbmdcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZO1xuICAgICAgICAgICAgdGhpc1twcm9wTmFtZV0gPVxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgICAgICAgICBjdG9yLl9wcm9wZXJ0eVZhbHVlRnJvbUF0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAvLyBtYXJrIHN0YXRlIG5vdCByZWZsZWN0aW5nXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBwcml2YXRlIHZlcnNpb24gb2YgYHJlcXVlc3RVcGRhdGVgIGRvZXMgbm90IGFjY2VzcyBvciByZXR1cm4gdGhlXG4gICAgICogYHVwZGF0ZUNvbXBsZXRlYCBwcm9taXNlLiBUaGlzIHByb21pc2UgY2FuIGJlIG92ZXJyaWRkZW4gYW5kIGlzIHRoZXJlZm9yZVxuICAgICAqIG5vdCBmcmVlIHRvIGFjY2Vzcy5cbiAgICAgKi9cbiAgICBfcmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgc2hvdWxkUmVxdWVzdFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBwcm9wZXJ0eSBrZXksIHBlcmZvcm0gcHJvcGVydHkgdXBkYXRlIHN0ZXBzLlxuICAgICAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjdG9yLmdldFByb3BlcnR5T3B0aW9ucyhuYW1lKTtcbiAgICAgICAgICAgIGlmIChjdG9yLl92YWx1ZUhhc0NoYW5nZWQodGhpc1tuYW1lXSwgb2xkVmFsdWUsIG9wdGlvbnMuaGFzQ2hhbmdlZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VkUHJvcGVydGllcy5zZXQobmFtZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgdG8gcmVmbGVjdGluZyBwcm9wZXJ0aWVzIHNldC5cbiAgICAgICAgICAgICAgICAvLyBOb3RlLCBpdCdzIGltcG9ydGFudCB0aGF0IGV2ZXJ5IGNoYW5nZSBoYXMgYSBjaGFuY2UgdG8gYWRkIHRoZVxuICAgICAgICAgICAgICAgIC8vIHByb3BlcnR5IHRvIGBfcmVmbGVjdGluZ1Byb3BlcnRpZXNgLiBUaGlzIGVuc3VyZXMgc2V0dGluZ1xuICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSArIHByb3BlcnR5IHJlZmxlY3RzIGNvcnJlY3RseS5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWZsZWN0ID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgICAgICEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2V0KG5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFib3J0IHRoZSByZXF1ZXN0IGlmIHRoZSBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgY2hhbmdlZC5cbiAgICAgICAgICAgICAgICBzaG91bGRSZXF1ZXN0VXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUgJiYgc2hvdWxkUmVxdWVzdFVwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUHJvbWlzZSA9IHRoaXMuX2VucXVldWVVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0cyBhbiB1cGRhdGUgd2hpY2ggaXMgcHJvY2Vzc2VkIGFzeW5jaHJvbm91c2x5LiBUaGlzIHNob3VsZFxuICAgICAqIGJlIGNhbGxlZCB3aGVuIGFuIGVsZW1lbnQgc2hvdWxkIHVwZGF0ZSBiYXNlZCBvbiBzb21lIHN0YXRlIG5vdCB0cmlnZ2VyZWRcbiAgICAgKiBieSBzZXR0aW5nIGEgcHJvcGVydHkuIEluIHRoaXMgY2FzZSwgcGFzcyBubyBhcmd1bWVudHMuIEl0IHNob3VsZCBhbHNvIGJlXG4gICAgICogY2FsbGVkIHdoZW4gbWFudWFsbHkgaW1wbGVtZW50aW5nIGEgcHJvcGVydHkgc2V0dGVyLiBJbiB0aGlzIGNhc2UsIHBhc3MgdGhlXG4gICAgICogcHJvcGVydHkgYG5hbWVgIGFuZCBgb2xkVmFsdWVgIHRvIGVuc3VyZSB0aGF0IGFueSBjb25maWd1cmVkIHByb3BlcnR5XG4gICAgICogb3B0aW9ucyBhcmUgaG9ub3JlZC4gUmV0dXJucyB0aGUgYHVwZGF0ZUNvbXBsZXRlYCBQcm9taXNlIHdoaWNoIGlzIHJlc29sdmVkXG4gICAgICogd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIHtQcm9wZXJ0eUtleX0gKG9wdGlvbmFsKSBuYW1lIG9mIHJlcXVlc3RpbmcgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gb2xkVmFsdWUge2FueX0gKG9wdGlvbmFsKSBvbGQgdmFsdWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIHRoZSB1cGRhdGUgY29tcGxldGVzLlxuICAgICAqL1xuICAgIHJlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUNvbXBsZXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIHRoZSBlbGVtZW50IHRvIGFzeW5jaHJvbm91c2x5IHVwZGF0ZS5cbiAgICAgKi9cbiAgICBhc3luYyBfZW5xdWV1ZVVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX1VQREFURV9SRVFVRVNURUQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgYW55IHByZXZpb3VzIHVwZGF0ZSBoYXMgcmVzb2x2ZWQgYmVmb3JlIHVwZGF0aW5nLlxuICAgICAgICAgICAgLy8gVGhpcyBgYXdhaXRgIGFsc28gZW5zdXJlcyB0aGF0IHByb3BlcnR5IGNoYW5nZXMgYXJlIGJhdGNoZWQuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVQcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgYW55IHByZXZpb3VzIGVycm9ycy4gV2Ugb25seSBjYXJlIHRoYXQgdGhlIHByZXZpb3VzIGN5Y2xlIGlzXG4gICAgICAgICAgICAvLyBkb25lLiBBbnkgZXJyb3Igc2hvdWxkIGhhdmUgYmVlbiBoYW5kbGVkIGluIHRoZSBwcmV2aW91cyB1cGRhdGUuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtVXBkYXRlKCk7XG4gICAgICAgIC8vIElmIGBwZXJmb3JtVXBkYXRlYCByZXR1cm5zIGEgUHJvbWlzZSwgd2UgYXdhaXQgaXQuIFRoaXMgaXMgZG9uZSB0b1xuICAgICAgICAvLyBlbmFibGUgY29vcmRpbmF0aW5nIHVwZGF0ZXMgd2l0aCBhIHNjaGVkdWxlci4gTm90ZSwgdGhlIHJlc3VsdCBpc1xuICAgICAgICAvLyBjaGVja2VkIHRvIGF2b2lkIGRlbGF5aW5nIGFuIGFkZGl0aW9uYWwgbWljcm90YXNrIHVubGVzcyB3ZSBuZWVkIHRvLlxuICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZTtcbiAgICB9XG4gICAgZ2V0IF9oYXNSZXF1ZXN0ZWRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9VUERBVEVfUkVRVUVTVEVEKTtcbiAgICB9XG4gICAgZ2V0IGhhc1VwZGF0ZWQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfVVBEQVRFRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFuIGVsZW1lbnQgdXBkYXRlLiBOb3RlLCBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGR1cmluZyB0aGVcbiAgICAgKiB1cGRhdGUsIGBmaXJzdFVwZGF0ZWRgIGFuZCBgdXBkYXRlZGAgd2lsbCBub3QgYmUgY2FsbGVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBjaGFuZ2UgdGhlIHRpbWluZyBvZiB1cGRhdGVzLiBJZiB0aGlzXG4gICAgICogbWV0aG9kIGlzIG92ZXJyaWRkZW4sIGBzdXBlci5wZXJmb3JtVXBkYXRlKClgIG11c3QgYmUgY2FsbGVkLlxuICAgICAqXG4gICAgICogRm9yIGluc3RhbmNlLCB0byBzY2hlZHVsZSB1cGRhdGVzIHRvIG9jY3VyIGp1c3QgYmVmb3JlIHRoZSBuZXh0IGZyYW1lOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogcHJvdGVjdGVkIGFzeW5jIHBlcmZvcm1VcGRhdGUoKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICogICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc29sdmUoKSkpO1xuICAgICAqICAgc3VwZXIucGVyZm9ybVVwZGF0ZSgpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwZXJmb3JtVXBkYXRlKCkge1xuICAgICAgICAvLyBNaXhpbiBpbnN0YW5jZSBwcm9wZXJ0aWVzIG9uY2UsIGlmIHRoZXkgZXhpc3QuXG4gICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjaGFuZ2VkUHJvcGVydGllcyA9IHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gdGhpcy5zaG91bGRVcGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtVcGRhdGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgYGZpcnN0VXBkYXRlZGAgYW5kIGB1cGRhdGVkYCBmcm9tIHJ1bm5pbmcgd2hlbiB0aGVyZSdzIGFuXG4gICAgICAgICAgICAvLyB1cGRhdGUgZXhjZXB0aW9uLlxuICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBFbnN1cmUgZWxlbWVudCBjYW4gYWNjZXB0IGFkZGl0aW9uYWwgdXBkYXRlcyBhZnRlciBhbiBleGNlcHRpb24uXG4gICAgICAgICAgICB0aGlzLl9tYXJrVXBkYXRlZCgpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICBpZiAoISh0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX0hBU19VUERBVEVEKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9IQVNfVVBEQVRFRDtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9tYXJrVXBkYXRlZCgpIHtcbiAgICAgICAgdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfVVBEQVRFX1JFUVVFU1RFRDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBlbGVtZW50IGhhcyBjb21wbGV0ZWQgdXBkYXRpbmcuXG4gICAgICogVGhlIFByb21pc2UgdmFsdWUgaXMgYSBib29sZWFuIHRoYXQgaXMgYHRydWVgIGlmIHRoZSBlbGVtZW50IGNvbXBsZXRlZCB0aGVcbiAgICAgKiB1cGRhdGUgd2l0aG91dCB0cmlnZ2VyaW5nIGFub3RoZXIgdXBkYXRlLiBUaGUgUHJvbWlzZSByZXN1bHQgaXMgYGZhbHNlYCBpZlxuICAgICAqIGEgcHJvcGVydHkgd2FzIHNldCBpbnNpZGUgYHVwZGF0ZWQoKWAuIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBhblxuICAgICAqIGV4Y2VwdGlvbiB3YXMgdGhyb3duIGR1cmluZyB0aGUgdXBkYXRlLlxuICAgICAqXG4gICAgICogVG8gYXdhaXQgYWRkaXRpb25hbCBhc3luY2hyb25vdXMgd29yaywgb3ZlcnJpZGUgdGhlIGBfZ2V0VXBkYXRlQ29tcGxldGVgXG4gICAgICogbWV0aG9kLiBGb3IgZXhhbXBsZSwgaXQgaXMgc29tZXRpbWVzIHVzZWZ1bCB0byBhd2FpdCBhIHJlbmRlcmVkIGVsZW1lbnRcbiAgICAgKiBiZWZvcmUgZnVsZmlsbGluZyB0aGlzIFByb21pc2UuIFRvIGRvIHRoaXMsIGZpcnN0IGF3YWl0XG4gICAgICogYHN1cGVyLl9nZXRVcGRhdGVDb21wbGV0ZSgpYCwgdGhlbiBhbnkgc3Vic2VxdWVudCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSByZXR1cm5zIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGVcbiAgICAgKiB1cGRhdGUgcmVzb2x2ZWQgd2l0aG91dCB0cmlnZ2VyaW5nIGFub3RoZXIgdXBkYXRlLlxuICAgICAqL1xuICAgIGdldCB1cGRhdGVDb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFVwZGF0ZUNvbXBsZXRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHBvaW50IGZvciB0aGUgYHVwZGF0ZUNvbXBsZXRlYCBwcm9taXNlLlxuICAgICAqXG4gICAgICogSXQgaXMgbm90IHNhZmUgdG8gb3ZlcnJpZGUgdGhlIGB1cGRhdGVDb21wbGV0ZWAgZ2V0dGVyIGRpcmVjdGx5IGR1ZSB0byBhXG4gICAgICogbGltaXRhdGlvbiBpbiBUeXBlU2NyaXB0IHdoaWNoIG1lYW5zIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBjYWxsIGFcbiAgICAgKiBzdXBlcmNsYXNzIGdldHRlciAoZS5nLiBgc3VwZXIudXBkYXRlQ29tcGxldGUudGhlbiguLi4pYCkgd2hlbiB0aGUgdGFyZ2V0XG4gICAgICogbGFuZ3VhZ2UgaXMgRVM1IChodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMzOCkuXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW5zdGVhZC4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiAgIGNsYXNzIE15RWxlbWVudCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgICAqICAgICBhc3luYyBfZ2V0VXBkYXRlQ29tcGxldGUoKSB7XG4gICAgICogICAgICAgYXdhaXQgc3VwZXIuX2dldFVwZGF0ZUNvbXBsZXRlKCk7XG4gICAgICogICAgICAgYXdhaXQgdGhpcy5fbXlDaGlsZC51cGRhdGVDb21wbGV0ZTtcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqL1xuICAgIF9nZXRVcGRhdGVDb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVByb21pc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IGB1cGRhdGVgIHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCByZXF1ZXN0c1xuICAgICAqIGFuIHVwZGF0ZS4gQnkgZGVmYXVsdCwgdGhpcyBtZXRob2QgYWx3YXlzIHJldHVybnMgYHRydWVgLCBidXQgdGhpcyBjYW4gYmVcbiAgICAgKiBjdXN0b21pemVkIHRvIGNvbnRyb2wgd2hlbiB0byB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAgICovXG4gICAgc2hvdWxkVXBkYXRlKF9jaGFuZ2VkUHJvcGVydGllcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZWxlbWVudC4gVGhpcyBtZXRob2QgcmVmbGVjdHMgcHJvcGVydHkgdmFsdWVzIHRvIGF0dHJpYnV0ZXMuXG4gICAgICogSXQgY2FuIGJlIG92ZXJyaWRkZW4gdG8gcmVuZGVyIGFuZCBrZWVwIHVwZGF0ZWQgZWxlbWVudCBET00uXG4gICAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsICpub3QqIHRyaWdnZXJcbiAgICAgKiBhbm90aGVyIHVwZGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICAgKi9cbiAgICB1cGRhdGUoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zaXplID4gMCkge1xuICAgICAgICAgICAgLy8gVXNlIGZvckVhY2ggc28gdGhpcyB3b3JrcyBldmVuIGlmIGZvci9vZiBsb29wcyBhcmUgY29tcGlsZWQgdG8gZm9yXG4gICAgICAgICAgICAvLyBsb29wcyBleHBlY3RpbmcgYXJyYXlzXG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLl9wcm9wZXJ0eVRvQXR0cmlidXRlKGssIHRoaXNba10sIHYpKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcmtVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbmV2ZXIgdGhlIGVsZW1lbnQgaXMgdXBkYXRlZC4gSW1wbGVtZW50IHRvIHBlcmZvcm1cbiAgICAgKiBwb3N0LXVwZGF0aW5nIHRhc2tzIHZpYSBET00gQVBJcywgZm9yIGV4YW1wbGUsIGZvY3VzaW5nIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlIHRoaXMgbWV0aG9kIHdpbGwgdHJpZ2dlciB0aGUgZWxlbWVudCB0byB1cGRhdGVcbiAgICAgKiBhZ2FpbiBhZnRlciB0aGlzIHVwZGF0ZSBjeWNsZSBjb21wbGV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAgICovXG4gICAgdXBkYXRlZChfY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBlbGVtZW50IGlzIGZpcnN0IHVwZGF0ZWQuIEltcGxlbWVudCB0byBwZXJmb3JtIG9uZSB0aW1lXG4gICAgICogd29yayBvbiB0aGUgZWxlbWVudCBhZnRlciB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlIHRoaXMgbWV0aG9kIHdpbGwgdHJpZ2dlciB0aGUgZWxlbWVudCB0byB1cGRhdGVcbiAgICAgKiBhZ2FpbiBhZnRlciB0aGlzIHVwZGF0ZSBjeWNsZSBjb21wbGV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAgICovXG4gICAgZmlyc3RVcGRhdGVkKF9jaGFuZ2VkUHJvcGVydGllcykge1xuICAgIH1cbn1cbl9hID0gZmluYWxpemVkO1xuLyoqXG4gKiBNYXJrcyBjbGFzcyBhcyBoYXZpbmcgZmluaXNoZWQgY3JlYXRpbmcgcHJvcGVydGllcy5cbiAqL1xuVXBkYXRpbmdFbGVtZW50W19hXSA9IHRydWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGluZy1lbGVtZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmNvbnN0IGxlZ2FjeUN1c3RvbUVsZW1lbnQgPSAodGFnTmFtZSwgY2xhenopID0+IHtcbiAgICB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKHRhZ05hbWUsIGNsYXp6KTtcbiAgICAvLyBDYXN0IGFzIGFueSBiZWNhdXNlIFRTIGRvZXNuJ3QgcmVjb2duaXplIHRoZSByZXR1cm4gdHlwZSBhcyBiZWluZyBhXG4gICAgLy8gc3VidHlwZSBvZiB0aGUgZGVjb3JhdGVkIGNsYXNzIHdoZW4gY2xhenogaXMgdHlwZWQgYXNcbiAgICAvLyBgQ29uc3RydWN0b3I8SFRNTEVsZW1lbnQ+YCBmb3Igc29tZSByZWFzb24uXG4gICAgLy8gYENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PmAgaXMgaGVscGZ1bCB0byBtYWtlIHN1cmUgdGhlIGRlY29yYXRvciBpc1xuICAgIC8vIGFwcGxpZWQgdG8gZWxlbWVudHMgaG93ZXZlci5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgcmV0dXJuIGNsYXp6O1xufTtcbmNvbnN0IHN0YW5kYXJkQ3VzdG9tRWxlbWVudCA9ICh0YWdOYW1lLCBkZXNjcmlwdG9yKSA9PiB7XG4gICAgY29uc3QgeyBraW5kLCBlbGVtZW50cyB9ID0gZGVzY3JpcHRvcjtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kLFxuICAgICAgICBlbGVtZW50cyxcbiAgICAgICAgLy8gVGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgb25jZSB0aGUgY2xhc3MgaXMgb3RoZXJ3aXNlIGZ1bGx5IGRlZmluZWRcbiAgICAgICAgZmluaXNoZXIoY2xhenopIHtcbiAgICAgICAgICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgY2xhenopO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4vKipcbiAqIENsYXNzIGRlY29yYXRvciBmYWN0b3J5IHRoYXQgZGVmaW5lcyB0aGUgZGVjb3JhdGVkIGNsYXNzIGFzIGEgY3VzdG9tIGVsZW1lbnQuXG4gKlxuICogYGBgXG4gKiBAY3VzdG9tRWxlbWVudCgnbXktZWxlbWVudCcpXG4gKiBjbGFzcyBNeUVsZW1lbnQge1xuICogICByZW5kZXIoKSB7XG4gKiAgICAgcmV0dXJuIGh0bWxgYDtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIHRhZ05hbWUgVGhlIG5hbWUgb2YgdGhlIGN1c3RvbSBlbGVtZW50IHRvIGRlZmluZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGN1c3RvbUVsZW1lbnQgPSAodGFnTmFtZSkgPT4gKGNsYXNzT3JEZXNjcmlwdG9yKSA9PiAodHlwZW9mIGNsYXNzT3JEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSA/XG4gICAgbGVnYWN5Q3VzdG9tRWxlbWVudCh0YWdOYW1lLCBjbGFzc09yRGVzY3JpcHRvcikgOlxuICAgIHN0YW5kYXJkQ3VzdG9tRWxlbWVudCh0YWdOYW1lLCBjbGFzc09yRGVzY3JpcHRvcik7XG5jb25zdCBzdGFuZGFyZFByb3BlcnR5ID0gKG9wdGlvbnMsIGVsZW1lbnQpID0+IHtcbiAgICAvLyBXaGVuIGRlY29yYXRpbmcgYW4gYWNjZXNzb3IsIHBhc3MgaXQgdGhyb3VnaCBhbmQgYWRkIHByb3BlcnR5IG1ldGFkYXRhLlxuICAgIC8vIE5vdGUsIHRoZSBgaGFzT3duUHJvcGVydHlgIGNoZWNrIGluIGBjcmVhdGVQcm9wZXJ0eWAgZW5zdXJlcyB3ZSBkb24ndFxuICAgIC8vIHN0b21wIG92ZXIgdGhlIHVzZXIncyBhY2Nlc3Nvci5cbiAgICBpZiAoZWxlbWVudC5raW5kID09PSAnbWV0aG9kJyAmJiBlbGVtZW50LmRlc2NyaXB0b3IgJiZcbiAgICAgICAgISgndmFsdWUnIGluIGVsZW1lbnQuZGVzY3JpcHRvcikpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZWxlbWVudCksIHsgZmluaXNoZXIoY2xhenopIHtcbiAgICAgICAgICAgICAgICBjbGF6ei5jcmVhdGVQcm9wZXJ0eShlbGVtZW50LmtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9IH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXRlUHJvcGVydHkoKSB0YWtlcyBjYXJlIG9mIGRlZmluaW5nIHRoZSBwcm9wZXJ0eSwgYnV0IHdlIHN0aWxsXG4gICAgICAgIC8vIG11c3QgcmV0dXJuIHNvbWUga2luZCBvZiBkZXNjcmlwdG9yLCBzbyByZXR1cm4gYSBkZXNjcmlwdG9yIGZvciBhblxuICAgICAgICAvLyB1bnVzZWQgcHJvdG90eXBlIGZpZWxkLiBUaGUgZmluaXNoZXIgY2FsbHMgY3JlYXRlUHJvcGVydHkoKS5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtpbmQ6ICdmaWVsZCcsXG4gICAgICAgICAgICBrZXk6IFN5bWJvbCgpLFxuICAgICAgICAgICAgcGxhY2VtZW50OiAnb3duJyxcbiAgICAgICAgICAgIGRlc2NyaXB0b3I6IHt9LFxuICAgICAgICAgICAgLy8gV2hlbiBAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLWRlY29yYXRvcnMgaW1wbGVtZW50cyBpbml0aWFsaXplcnMsXG4gICAgICAgICAgICAvLyBkbyB0aGlzIGluc3RlYWQgb2YgdGhlIGluaXRpYWxpemVyIGJlbG93LiBTZWU6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvaXNzdWVzLzkyNjAgZXh0cmFzOiBbXG4gICAgICAgICAgICAvLyAgIHtcbiAgICAgICAgICAgIC8vICAgICBraW5kOiAnaW5pdGlhbGl6ZXInLFxuICAgICAgICAgICAgLy8gICAgIHBsYWNlbWVudDogJ293bicsXG4gICAgICAgICAgICAvLyAgICAgaW5pdGlhbGl6ZXI6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIsXG4gICAgICAgICAgICAvLyAgIH1cbiAgICAgICAgICAgIC8vIF0sXG4gICAgICAgICAgICBpbml0aWFsaXplcigpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tlbGVtZW50LmtleV0gPSBlbGVtZW50LmluaXRpYWxpemVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbmlzaGVyKGNsYXp6KSB7XG4gICAgICAgICAgICAgICAgY2xhenouY3JlYXRlUHJvcGVydHkoZWxlbWVudC5rZXksIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn07XG5jb25zdCBsZWdhY3lQcm9wZXJ0eSA9IChvcHRpb25zLCBwcm90bywgbmFtZSkgPT4ge1xuICAgIHByb3RvLmNvbnN0cnVjdG9yXG4gICAgICAgIC5jcmVhdGVQcm9wZXJ0eShuYW1lLCBvcHRpb25zKTtcbn07XG4vKipcbiAqIEEgcHJvcGVydHkgZGVjb3JhdG9yIHdoaWNoIGNyZWF0ZXMgYSBMaXRFbGVtZW50IHByb3BlcnR5IHdoaWNoIHJlZmxlY3RzIGFcbiAqIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIHZhbHVlLiBBIGBQcm9wZXJ0eURlY2xhcmF0aW9uYCBtYXkgb3B0aW9uYWxseSBiZVxuICogc3VwcGxpZWQgdG8gY29uZmlndXJlIHByb3BlcnR5IGZlYXR1cmVzLlxuICpcbiAqIFRoaXMgZGVjb3JhdG9yIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIHB1YmxpYyBmaWVsZHMuIFByaXZhdGUgb3IgcHJvdGVjdGVkXG4gKiBmaWVsZHMgc2hvdWxkIHVzZSB0aGUgaW50ZXJuYWxQcm9wZXJ0eSBkZWNvcmF0b3IuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgY2xhc3MgTXlFbGVtZW50IHtcbiAqICAgICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4gfSlcbiAqICAgICAgIGNsaWNrZWQgPSBmYWxzZTtcbiAqICAgICB9XG4gKlxuICogQEV4cG9ydERlY29yYXRlZEl0ZW1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9wZXJ0eShvcHRpb25zKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBkZWNvcmF0b3JcbiAgICByZXR1cm4gKHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA9PiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgIGxlZ2FjeVByb3BlcnR5KG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6XG4gICAgICAgIHN0YW5kYXJkUHJvcGVydHkob3B0aW9ucywgcHJvdG9PckRlc2NyaXB0b3IpO1xufVxuLyoqXG4gKiBEZWNsYXJlcyBhIHByaXZhdGUgb3IgcHJvdGVjdGVkIHByb3BlcnR5IHRoYXQgc3RpbGwgdHJpZ2dlcnMgdXBkYXRlcyB0byB0aGVcbiAqIGVsZW1lbnQgd2hlbiBpdCBjaGFuZ2VzLlxuICpcbiAqIFByb3BlcnRpZXMgZGVjbGFyZWQgdGhpcyB3YXkgbXVzdCBub3QgYmUgdXNlZCBmcm9tIEhUTUwgb3IgSFRNTCB0ZW1wbGF0aW5nXG4gKiBzeXN0ZW1zLCB0aGV5J3JlIHNvbGVseSBmb3IgcHJvcGVydGllcyBpbnRlcm5hbCB0byB0aGUgZWxlbWVudC4gVGhlc2VcbiAqIHByb3BlcnRpZXMgbWF5IGJlIHJlbmFtZWQgYnkgb3B0aW1pemF0aW9uIHRvb2xzIGxpa2UgY2xvc3VyZSBjb21waWxlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVybmFsUHJvcGVydHkob3B0aW9ucykge1xuICAgIHJldHVybiBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UsIGhhc0NoYW5nZWQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oYXNDaGFuZ2VkIH0pO1xufVxuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB0aGF0IGNvbnZlcnRzIGEgY2xhc3MgcHJvcGVydHkgaW50byBhIGdldHRlciB0aGF0XG4gKiBleGVjdXRlcyBhIHF1ZXJ5U2VsZWN0b3Igb24gdGhlIGVsZW1lbnQncyByZW5kZXJSb290LlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBBIERPTVN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIHNlbGVjdG9ycyB0byBtYXRjaC5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Eb2N1bWVudC9xdWVyeVNlbGVjdG9yXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgY2xhc3MgTXlFbGVtZW50IHtcbiAqICAgICAgIEBxdWVyeSgnI2ZpcnN0JylcbiAqICAgICAgIGZpcnN0O1xuICpcbiAqICAgICAgIHJlbmRlcigpIHtcbiAqICAgICAgICAgcmV0dXJuIGh0bWxgXG4gKiAgICAgICAgICAgPGRpdiBpZD1cImZpcnN0XCI+PC9kaXY+XG4gKiAgICAgICAgICAgPGRpdiBpZD1cInNlY29uZFwiPjwvZGl2PlxuICogICAgICAgICBgO1xuICogICAgICAgfVxuICogICAgIH1cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeShzZWxlY3Rvcikge1xuICAgIHJldHVybiAocHJvdG9PckRlc2NyaXB0b3IsIFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgbmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgIGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6XG4gICAgICAgICAgICBzdGFuZGFyZFF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yKTtcbiAgICB9O1xufVxuLy8gTm90ZSwgaW4gdGhlIGZ1dHVyZSwgd2UgbWF5IGV4dGVuZCB0aGlzIGRlY29yYXRvciB0byBzdXBwb3J0IHRoZSB1c2UgY2FzZVxuLy8gd2hlcmUgdGhlIHF1ZXJpZWQgZWxlbWVudCBtYXkgbmVlZCB0byBkbyB3b3JrIHRvIGJlY29tZSByZWFkeSB0byBpbnRlcmFjdFxuLy8gd2l0aCAoZS5nLiBsb2FkIHNvbWUgaW1wbGVtZW50YXRpb24gY29kZSkuIElmIHNvLCB3ZSBtaWdodCBlbGVjdCB0b1xuLy8gYWRkIGEgc2Vjb25kIGFyZ3VtZW50IGRlZmluaW5nIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgcnVuIHRvIG1ha2UgdGhlXG4vLyBxdWVyaWVkIGVsZW1lbnQgbG9hZGVkL3VwZGF0ZWQvcmVhZHkuXG4vKipcbiAqIEEgcHJvcGVydHkgZGVjb3JhdG9yIHRoYXQgY29udmVydHMgYSBjbGFzcyBwcm9wZXJ0eSBpbnRvIGEgZ2V0dGVyIHRoYXRcbiAqIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3VsdCBvZiBhIHF1ZXJ5U2VsZWN0b3Igb24gdGhlXG4gKiBlbGVtZW50J3MgcmVuZGVyUm9vdCBkb25lIGFmdGVyIHRoZSBlbGVtZW50J3MgYHVwZGF0ZUNvbXBsZXRlYCBwcm9taXNlXG4gKiByZXNvbHZlcy4gV2hlbiB0aGUgcXVlcmllZCBwcm9wZXJ0eSBtYXkgY2hhbmdlIHdpdGggZWxlbWVudCBzdGF0ZSwgdGhpc1xuICogZGVjb3JhdG9yIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgcmVxdWlyaW5nIHVzZXJzIHRvIGF3YWl0IHRoZVxuICogYHVwZGF0ZUNvbXBsZXRlYCBiZWZvcmUgYWNjZXNzaW5nIHRoZSBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgQSBET01TdHJpbmcgY29udGFpbmluZyBvbmUgb3IgbW9yZSBzZWxlY3RvcnMgdG8gbWF0Y2guXG4gKlxuICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcXVlcnlTZWxlY3RvclxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICAgIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgICAgICBAcXVlcnlBc3luYygnI2ZpcnN0JylcbiAqICAgICAgIGZpcnN0O1xuICpcbiAqICAgICAgIHJlbmRlcigpIHtcbiAqICAgICAgICAgcmV0dXJuIGh0bWxgXG4gKiAgICAgICAgICAgPGRpdiBpZD1cImZpcnN0XCI+PC9kaXY+XG4gKiAgICAgICAgICAgPGRpdiBpZD1cInNlY29uZFwiPjwvZGl2PlxuICogICAgICAgICBgO1xuICogICAgICAgfVxuICogICAgIH1cbiAqXG4gKiAgICAgLy8gZXh0ZXJuYWwgdXNhZ2VcbiAqICAgICBhc3luYyBkb1NvbWV0aGluZ1dpdGhGaXJzdCgpIHtcbiAqICAgICAgKGF3YWl0IGFNeUVsZW1lbnQuZmlyc3QpLmRvU29tZXRoaW5nKCk7XG4gKiAgICAgfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlBc3luYyhzZWxlY3Rvcikge1xuICAgIHJldHVybiAocHJvdG9PckRlc2NyaXB0b3IsIFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgbmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgYXN5bmMgZ2V0KCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQ29tcGxldGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUm9vdC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKG5hbWUgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgbGVnYWN5UXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IsIG5hbWUpIDpcbiAgICAgICAgICAgIHN0YW5kYXJkUXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IpO1xuICAgIH07XG59XG4vKipcbiAqIEEgcHJvcGVydHkgZGVjb3JhdG9yIHRoYXQgY29udmVydHMgYSBjbGFzcyBwcm9wZXJ0eSBpbnRvIGEgZ2V0dGVyXG4gKiB0aGF0IGV4ZWN1dGVzIGEgcXVlcnlTZWxlY3RvckFsbCBvbiB0aGUgZWxlbWVudCdzIHJlbmRlclJvb3QuXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIEEgRE9NU3RyaW5nIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgc2VsZWN0b3JzIHRvIG1hdGNoLlxuICpcbiAqIFNlZTpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Eb2N1bWVudC9xdWVyeVNlbGVjdG9yQWxsXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgY2xhc3MgTXlFbGVtZW50IHtcbiAqICAgICAgIEBxdWVyeUFsbCgnZGl2JylcbiAqICAgICAgIGRpdnM7XG4gKlxuICogICAgICAgcmVuZGVyKCkge1xuICogICAgICAgICByZXR1cm4gaHRtbGBcbiAqICAgICAgICAgICA8ZGl2IGlkPVwiZmlyc3RcIj48L2Rpdj5cbiAqICAgICAgICAgICA8ZGl2IGlkPVwic2Vjb25kXCI+PC9kaXY+XG4gKiAgICAgICAgIGA7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlBbGwoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gKHByb3RvT3JEZXNjcmlwdG9yLCBcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgIG5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJSb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgICAgICBsZWdhY3lRdWVyeShkZXNjcmlwdG9yLCBwcm90b09yRGVzY3JpcHRvciwgbmFtZSkgOlxuICAgICAgICAgICAgc3RhbmRhcmRRdWVyeShkZXNjcmlwdG9yLCBwcm90b09yRGVzY3JpcHRvcik7XG4gICAgfTtcbn1cbmNvbnN0IGxlZ2FjeVF1ZXJ5ID0gKGRlc2NyaXB0b3IsIHByb3RvLCBuYW1lKSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCBkZXNjcmlwdG9yKTtcbn07XG5jb25zdCBzdGFuZGFyZFF1ZXJ5ID0gKGRlc2NyaXB0b3IsIGVsZW1lbnQpID0+ICh7XG4gICAga2luZDogJ21ldGhvZCcsXG4gICAgcGxhY2VtZW50OiAncHJvdG90eXBlJyxcbiAgICBrZXk6IGVsZW1lbnQua2V5LFxuICAgIGRlc2NyaXB0b3IsXG59KTtcbmNvbnN0IHN0YW5kYXJkRXZlbnRPcHRpb25zID0gKG9wdGlvbnMsIGVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBlbGVtZW50KSwgeyBmaW5pc2hlcihjbGF6eikge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjbGF6ei5wcm90b3R5cGVbZWxlbWVudC5rZXldLCBvcHRpb25zKTtcbiAgICAgICAgfSB9KTtcbn07XG5jb25zdCBsZWdhY3lFdmVudE9wdGlvbnMgPSBcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgbGVnYWN5IGRlY29yYXRvclxuKG9wdGlvbnMsIHByb3RvLCBuYW1lKSA9PiB7XG4gICAgT2JqZWN0LmFzc2lnbihwcm90b1tuYW1lXSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBZGRzIGV2ZW50IGxpc3RlbmVyIG9wdGlvbnMgdG8gYSBtZXRob2QgdXNlZCBhcyBhbiBldmVudCBsaXN0ZW5lciBpbiBhXG4gKiBsaXQtaHRtbCB0ZW1wbGF0ZS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgZXZlbnQgbGlzdGVuZXIgb3B0aW9ucyBhcyBhY2NlcHRlZCBieVxuICogYEV2ZW50VGFyZ2V0I2FkZEV2ZW50TGlzdGVuZXJgIGFuZCBgRXZlbnRUYXJnZXQjcmVtb3ZlRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQ3VycmVudCBicm93c2VycyBzdXBwb3J0IHRoZSBgY2FwdHVyZWAsIGBwYXNzaXZlYCwgYW5kIGBvbmNlYCBvcHRpb25zLiBTZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNQYXJhbWV0ZXJzXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgY2xhc3MgTXlFbGVtZW50IHtcbiAqICAgICAgIGNsaWNrZWQgPSBmYWxzZTtcbiAqXG4gKiAgICAgICByZW5kZXIoKSB7XG4gKiAgICAgICAgIHJldHVybiBodG1sYFxuICogICAgICAgICAgIDxkaXYgQGNsaWNrPSR7dGhpcy5fb25DbGlja31gPlxuICogICAgICAgICAgICAgPGJ1dHRvbj48L2J1dHRvbj5cbiAqICAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgICAgYDtcbiAqICAgICAgIH1cbiAqXG4gKiAgICAgICBAZXZlbnRPcHRpb25zKHtjYXB0dXJlOiB0cnVlfSlcbiAqICAgICAgIF9vbkNsaWNrKGUpIHtcbiAqICAgICAgICAgdGhpcy5jbGlja2VkID0gdHJ1ZTtcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudE9wdGlvbnMob3B0aW9ucykge1xuICAgIC8vIFJldHVybiB2YWx1ZSB0eXBlZCBhcyBhbnkgdG8gcHJldmVudCBUeXBlU2NyaXB0IGZyb20gY29tcGxhaW5pbmcgdGhhdFxuICAgIC8vIHN0YW5kYXJkIGRlY29yYXRvciBmdW5jdGlvbiBzaWduYXR1cmUgZG9lcyBub3QgbWF0Y2ggVHlwZVNjcmlwdCBkZWNvcmF0b3JcbiAgICAvLyBzaWduYXR1cmVcbiAgICAvLyBUT0RPKGtzY2hhYWYpOiB1bmNsZWFyIHdoeSBpdCB3YXMgb25seSBmYWlsaW5nIG9uIHRoaXMgZGVjb3JhdG9yIGFuZCBub3RcbiAgICAvLyB0aGUgb3RoZXJzXG4gICAgcmV0dXJuICgocHJvdG9PckRlc2NyaXB0b3IsIG5hbWUpID0+IChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgbGVnYWN5RXZlbnRPcHRpb25zKG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6XG4gICAgICAgIHN0YW5kYXJkRXZlbnRPcHRpb25zKG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yKSk7XG59XG4vKipcbiAqIEEgcHJvcGVydHkgZGVjb3JhdG9yIHRoYXQgY29udmVydHMgYSBjbGFzcyBwcm9wZXJ0eSBpbnRvIGEgZ2V0dGVyIHRoYXRcbiAqIHJldHVybnMgdGhlIGBhc3NpZ25lZE5vZGVzYCBvZiB0aGUgZ2l2ZW4gbmFtZWQgYHNsb3RgLiBOb3RlLCB0aGUgdHlwZSBvZlxuICogdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgYW5ub3RhdGVkIGFzIGBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PmAuXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlBc3NpZ25lZE5vZGVzKHNsb3ROYW1lID0gJycsIGZsYXR0ZW4gPSBmYWxzZSkge1xuICAgIHJldHVybiAocHJvdG9PckRlc2NyaXB0b3IsIFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgbmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gYHNsb3Qke3Nsb3ROYW1lID8gYFtuYW1lPSR7c2xvdE5hbWV9XWAgOiAnJ31gO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsb3QgJiYgc2xvdC5hc3NpZ25lZE5vZGVzKHsgZmxhdHRlbiB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKG5hbWUgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgbGVnYWN5UXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IsIG5hbWUpIDpcbiAgICAgICAgICAgIHN0YW5kYXJkUXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvcmF0b3JzLmpzLm1hcCIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuZXhwb3J0IGNvbnN0IHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyA9ICgnYWRvcHRlZFN0eWxlU2hlZXRzJyBpbiBEb2N1bWVudC5wcm90b3R5cGUpICYmXG4gICAgKCdyZXBsYWNlJyBpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZSk7XG5jb25zdCBjb25zdHJ1Y3Rpb25Ub2tlbiA9IFN5bWJvbCgpO1xuZXhwb3J0IGNsYXNzIENTU1Jlc3VsdCB7XG4gICAgY29uc3RydWN0b3IoY3NzVGV4dCwgc2FmZVRva2VuKSB7XG4gICAgICAgIGlmIChzYWZlVG9rZW4gIT09IGNvbnN0cnVjdGlvblRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jc3NUZXh0ID0gY3NzVGV4dDtcbiAgICB9XG4gICAgLy8gTm90ZSwgdGhpcyBpcyBhIGdldHRlciBzbyB0aGF0IGl0J3MgbGF6eS4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnNcbiAgICAvLyBzdHlsZXNoZWV0cyBhcmUgbm90IGNyZWF0ZWQgdW50aWwgdGhlIGZpcnN0IGVsZW1lbnQgaW5zdGFuY2UgaXMgbWFkZS5cbiAgICBnZXQgc3R5bGVTaGVldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0eWxlU2hlZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gTm90ZSwgaWYgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgaXMgc3VwcG9ydGVkIHRoZW4gd2UgYXNzdW1lIENTU1N0eWxlU2hlZXRcbiAgICAgICAgICAgIC8vIGlzIGNvbnN0cnVjdGFibGUuXG4gICAgICAgICAgICBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVTaGVldCA9IG5ldyBDU1NTdHlsZVNoZWV0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVTaGVldC5yZXBsYWNlU3luYyh0aGlzLmNzc1RleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVTaGVldCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlU2hlZXQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jc3NUZXh0O1xuICAgIH1cbn1cbi8qKlxuICogV3JhcCBhIHZhbHVlIGZvciBpbnRlcnBvbGF0aW9uIGluIGEgY3NzIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsLlxuICpcbiAqIFRoaXMgaXMgdW5zYWZlIGJlY2F1c2UgdW50cnVzdGVkIENTUyB0ZXh0IGNhbiBiZSB1c2VkIHRvIHBob25lIGhvbWVcbiAqIG9yIGV4ZmlsdHJhdGUgZGF0YSB0byBhbiBhdHRhY2tlciBjb250cm9sbGVkIHNpdGUuIFRha2UgY2FyZSB0byBvbmx5IHVzZVxuICogdGhpcyB3aXRoIHRydXN0ZWQgaW5wdXQuXG4gKi9cbmV4cG9ydCBjb25zdCB1bnNhZmVDU1MgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IENTU1Jlc3VsdChTdHJpbmcodmFsdWUpLCBjb25zdHJ1Y3Rpb25Ub2tlbik7XG59O1xuY29uc3QgdGV4dEZyb21DU1NSZXN1bHQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBDU1NSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmNzc1RleHQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogJHt2YWx1ZX0uIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0XG4gICAgICAgICAgICB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuYCk7XG4gICAgfVxufTtcbi8qKlxuICogVGVtcGxhdGUgdGFnIHdoaWNoIHdoaWNoIGNhbiBiZSB1c2VkIHdpdGggTGl0RWxlbWVudCdzIGBzdHlsZWAgcHJvcGVydHkgdG9cbiAqIHNldCBlbGVtZW50IHN0eWxlcy4gRm9yIHNlY3VyaXR5IHJlYXNvbnMsIG9ubHkgbGl0ZXJhbCBzdHJpbmcgdmFsdWVzIG1heSBiZVxuICogdXNlZC4gVG8gaW5jb3Jwb3JhdGUgbm9uLWxpdGVyYWwgdmFsdWVzIGB1bnNhZmVDU1NgIG1heSBiZSB1c2VkIGluc2lkZSBhXG4gKiB0ZW1wbGF0ZSBzdHJpbmcgcGFydC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNzcyA9IChzdHJpbmdzLCAuLi52YWx1ZXMpID0+IHtcbiAgICBjb25zdCBjc3NUZXh0ID0gdmFsdWVzLnJlZHVjZSgoYWNjLCB2LCBpZHgpID0+IGFjYyArIHRleHRGcm9tQ1NTUmVzdWx0KHYpICsgc3RyaW5nc1tpZHggKyAxXSwgc3RyaW5nc1swXSk7XG4gICAgcmV0dXJuIG5ldyBDU1NSZXN1bHQoY3NzVGV4dCwgY29uc3RydWN0aW9uVG9rZW4pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy10YWcuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnbGl0LWh0bWwvbGliL3NoYWR5LXJlbmRlci5qcyc7XG5pbXBvcnQgeyBVcGRhdGluZ0VsZW1lbnQgfSBmcm9tICcuL2xpYi91cGRhdGluZy1lbGVtZW50LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL3VwZGF0aW5nLWVsZW1lbnQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvZGVjb3JhdG9ycy5qcyc7XG5leHBvcnQgeyBodG1sLCBzdmcsIFRlbXBsYXRlUmVzdWx0LCBTVkdUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdC1odG1sL2xpdC1odG1sLmpzJztcbmltcG9ydCB7IHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyB9IGZyb20gJy4vbGliL2Nzcy10YWcuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvY3NzLXRhZy5qcyc7XG4vLyBJTVBPUlRBTlQ6IGRvIG5vdCBjaGFuZ2UgdGhlIHByb3BlcnR5IG5hbWUgb3IgdGhlIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbi8vIFRoaXMgbGluZSB3aWxsIGJlIHVzZWQgaW4gcmVnZXhlcyB0byBzZWFyY2ggZm9yIExpdEVsZW1lbnQgdXNhZ2UuXG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiBpbmplY3QgdmVyc2lvbiBudW1iZXIgYXQgYnVpbGQgdGltZVxuKHdpbmRvd1snbGl0RWxlbWVudFZlcnNpb25zJ10gfHwgKHdpbmRvd1snbGl0RWxlbWVudFZlcnNpb25zJ10gPSBbXSkpXG4gICAgLnB1c2goJzIuMy4xJyk7XG4vKipcbiAqIFNlbnRpbmFsIHZhbHVlIHVzZWQgdG8gYXZvaWQgY2FsbGluZyBsaXQtaHRtbCdzIHJlbmRlciBmdW5jdGlvbiB3aGVuXG4gKiBzdWJjbGFzc2VzIGRvIG5vdCBpbXBsZW1lbnQgYHJlbmRlcmBcbiAqL1xuY29uc3QgcmVuZGVyTm90SW1wbGVtZW50ZWQgPSB7fTtcbmV4cG9ydCBjbGFzcyBMaXRFbGVtZW50IGV4dGVuZHMgVXBkYXRpbmdFbGVtZW50IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGFycmF5IG9mIHN0eWxlcyB0byBhcHBseSB0byB0aGUgZWxlbWVudC5cbiAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBpbnRlZ3JhdGUgaW50byBhIHN0eWxlIG1hbmFnZW1lbnQgc3lzdGVtLlxuICAgICAqXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZXM7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHN0YXRpYyBfZ2V0VW5pcXVlU3R5bGVzKCkge1xuICAgICAgICAvLyBPbmx5IGdhdGhlciBzdHlsZXMgb25jZSBwZXIgY2xhc3NcbiAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX3N0eWxlcycsIHRoaXMpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRha2UgY2FyZSBub3QgdG8gY2FsbCBgdGhpcy5nZXRTdHlsZXMoKWAgbXVsdGlwbGUgdGltZXMgc2luY2UgdGhpc1xuICAgICAgICAvLyBnZW5lcmF0ZXMgbmV3IENTU1Jlc3VsdHMgZWFjaCB0aW1lLlxuICAgICAgICAvLyBUT0RPKHNvcnZlbGwpOiBTaW5jZSB3ZSBkbyBub3QgY2FjaGUgQ1NTUmVzdWx0cyBieSBpbnB1dCwgYW55XG4gICAgICAgIC8vIHNoYXJlZCBzdHlsZXMgd2lsbCBnZW5lcmF0ZSBuZXcgc3R5bGVzaGVldCBvYmplY3RzLCB3aGljaCBpcyB3YXN0ZWZ1bC5cbiAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgYWRkcmVzc2VkIHdoZW4gYSBicm93c2VyIHNoaXBzIGNvbnN0cnVjdGFibGVcbiAgICAgICAgLy8gc3R5bGVzaGVldHMuXG4gICAgICAgIGNvbnN0IHVzZXJTdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgICAgICBpZiAodXNlclN0eWxlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHVzZXJTdHlsZXMpKSB7XG4gICAgICAgICAgICAvLyBEZS1kdXBsaWNhdGUgc3R5bGVzIHByZXNlcnZpbmcgdGhlIF9sYXN0XyBpbnN0YW5jZSBpbiB0aGUgc2V0LlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0byBhdm9pZCBkdXBsaWNhdGVkIHN0eWxlcyB0aGF0IGNhblxuICAgICAgICAgICAgLy8gb2NjdXIgZXNwZWNpYWxseSB3aGVuIGNvbXBvc2luZyB2aWEgc3ViY2xhc3NpbmcuXG4gICAgICAgICAgICAvLyBUaGUgbGFzdCBpdGVtIGlzIGtlcHQgdG8gdHJ5IHRvIHByZXNlcnZlIHRoZSBjYXNjYWRlIG9yZGVyIHdpdGggdGhlXG4gICAgICAgICAgICAvLyBhc3N1bXB0aW9uIHRoYXQgaXQncyBtb3N0IGltcG9ydGFudCB0aGF0IGxhc3QgYWRkZWQgc3R5bGVzIG92ZXJyaWRlXG4gICAgICAgICAgICAvLyBwcmV2aW91cyBzdHlsZXMuXG4gICAgICAgICAgICBjb25zdCBhZGRTdHlsZXMgPSAoc3R5bGVzLCBzZXQpID0+IHN0eWxlcy5yZWR1Y2VSaWdodCgoc2V0LCBzKSA9PiBcbiAgICAgICAgICAgIC8vIE5vdGU6IE9uIElFIHNldC5hZGQoKSBkb2VzIG5vdCByZXR1cm4gdGhlIHNldFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShzKSA/IGFkZFN0eWxlcyhzLCBzZXQpIDogKHNldC5hZGQocyksIHNldCksIHNldCk7XG4gICAgICAgICAgICAvLyBBcnJheS5mcm9tIGRvZXMgbm90IHdvcmsgb24gU2V0IGluIElFLCBvdGhlcndpc2UgcmV0dXJuXG4gICAgICAgICAgICAvLyBBcnJheS5mcm9tKGFkZFN0eWxlcyh1c2VyU3R5bGVzLCBuZXcgU2V0PENTU1Jlc3VsdD4oKSkpLnJldmVyc2UoKVxuICAgICAgICAgICAgY29uc3Qgc2V0ID0gYWRkU3R5bGVzKHVzZXJTdHlsZXMsIG5ldyBTZXQoKSk7XG4gICAgICAgICAgICBjb25zdCBzdHlsZXMgPSBbXTtcbiAgICAgICAgICAgIHNldC5mb3JFYWNoKCh2KSA9PiBzdHlsZXMudW5zaGlmdCh2KSk7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZXMgPSBbdXNlclN0eWxlc107XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgZWxlbWVudCBpbml0aWFsaXphdGlvbi4gQnkgZGVmYXVsdCB0aGlzIGNhbGxzIGBjcmVhdGVSZW5kZXJSb290YFxuICAgICAqIHRvIGNyZWF0ZSB0aGUgZWxlbWVudCBgcmVuZGVyUm9vdGAgbm9kZSBhbmQgY2FwdHVyZXMgYW55IHByZS1zZXQgdmFsdWVzIGZvclxuICAgICAqIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuX2dldFVuaXF1ZVN0eWxlcygpO1xuICAgICAgICB0aGlzLnJlbmRlclJvb3QgPVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJSb290KCk7XG4gICAgICAgIC8vIE5vdGUsIGlmIHJlbmRlclJvb3QgaXMgbm90IGEgc2hhZG93Um9vdCwgc3R5bGVzIHdvdWxkL2NvdWxkIGFwcGx5IHRvIHRoZVxuICAgICAgICAvLyBlbGVtZW50J3MgZ2V0Um9vdE5vZGUoKS4gV2hpbGUgdGhpcyBjb3VsZCBiZSBkb25lLCB3ZSdyZSBjaG9vc2luZyBub3QgdG9cbiAgICAgICAgLy8gc3VwcG9ydCB0aGlzIG5vdyBzaW5jZSBpdCB3b3VsZCByZXF1aXJlIGRpZmZlcmVudCBsb2dpYyBhcm91bmQgZGUtZHVwaW5nLlxuICAgICAgICBpZiAod2luZG93LlNoYWRvd1Jvb3QgJiYgdGhpcy5yZW5kZXJSb290IGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuYWRvcHRTdHlsZXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBub2RlIGludG8gd2hpY2ggdGhlIGVsZW1lbnQgc2hvdWxkIHJlbmRlciBhbmQgYnkgZGVmYXVsdFxuICAgICAqIGNyZWF0ZXMgYW5kIHJldHVybnMgYW4gb3BlbiBzaGFkb3dSb290LiBJbXBsZW1lbnQgdG8gY3VzdG9taXplIHdoZXJlIHRoZVxuICAgICAqIGVsZW1lbnQncyBET00gaXMgcmVuZGVyZWQuIEZvciBleGFtcGxlLCB0byByZW5kZXIgaW50byB0aGUgZWxlbWVudCdzXG4gICAgICogY2hpbGROb2RlcywgcmV0dXJuIGB0aGlzYC5cbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBSZXR1cm5zIGEgbm9kZSBpbnRvIHdoaWNoIHRvIHJlbmRlci5cbiAgICAgKi9cbiAgICBjcmVhdGVSZW5kZXJSb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgc3R5bGluZyB0byB0aGUgZWxlbWVudCBzaGFkb3dSb290IHVzaW5nIHRoZSBgc3RhdGljIGdldCBzdHlsZXNgXG4gICAgICogcHJvcGVydHkuIFN0eWxpbmcgd2lsbCBhcHBseSB1c2luZyBgc2hhZG93Um9vdC5hZG9wdGVkU3R5bGVTaGVldHNgIHdoZXJlXG4gICAgICogYXZhaWxhYmxlIGFuZCB3aWxsIGZhbGxiYWNrIG90aGVyd2lzZS4gV2hlbiBTaGFkb3cgRE9NIGlzIHBvbHlmaWxsZWQsXG4gICAgICogU2hhZHlDU1Mgc2NvcGVzIHN0eWxlcyBhbmQgYWRkcyB0aGVtIHRvIHRoZSBkb2N1bWVudC4gV2hlbiBTaGFkb3cgRE9NXG4gICAgICogaXMgYXZhaWxhYmxlIGJ1dCBgYWRvcHRlZFN0eWxlU2hlZXRzYCBpcyBub3QsIHN0eWxlcyBhcmUgYXBwZW5kZWQgdG8gdGhlXG4gICAgICogZW5kIG9mIHRoZSBgc2hhZG93Um9vdGAgdG8gW21pbWljIHNwZWNcbiAgICAgKiBiZWhhdmlvcl0oaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb25zdHJ1Y3Qtc3R5bGVzaGVldHMvI3VzaW5nLWNvbnN0cnVjdGVkLXN0eWxlc2hlZXRzKS5cbiAgICAgKi9cbiAgICBhZG9wdFN0eWxlcygpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5fc3R5bGVzO1xuICAgICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBzZXBhcmF0ZSBjYXNlcyBoZXJlIGJhc2VkIG9uIFNoYWRvdyBET00gc3VwcG9ydC5cbiAgICAgICAgLy8gKDEpIHNoYWRvd1Jvb3QgcG9seWZpbGxlZDogdXNlIFNoYWR5Q1NTXG4gICAgICAgIC8vICgyKSBzaGFkb3dSb290LmFkb3B0ZWRTdHlsZVNoZWV0cyBhdmFpbGFibGU6IHVzZSBpdC5cbiAgICAgICAgLy8gKDMpIHNoYWRvd1Jvb3QuYWRvcHRlZFN0eWxlU2hlZXRzIHBvbHlmaWxsZWQ6IGFwcGVuZCBzdHlsZXMgYWZ0ZXJcbiAgICAgICAgLy8gcmVuZGVyaW5nXG4gICAgICAgIGlmICh3aW5kb3cuU2hhZHlDU1MgIT09IHVuZGVmaW5lZCAmJiAhd2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykge1xuICAgICAgICAgICAgd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltLnByZXBhcmVBZG9wdGVkQ3NzVGV4dChzdHlsZXMubWFwKChzKSA9PiBzLmNzc1RleHQpLCB0aGlzLmxvY2FsTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclJvb3QuYWRvcHRlZFN0eWxlU2hlZXRzID1cbiAgICAgICAgICAgICAgICBzdHlsZXMubWFwKChzKSA9PiBzLnN0eWxlU2hlZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhpcyBtdXN0IGJlIGRvbmUgYWZ0ZXIgcmVuZGVyaW5nIHNvIHRoZSBhY3R1YWwgc3R5bGUgaW5zZXJ0aW9uIGlzIGRvbmVcbiAgICAgICAgICAgIC8vIGluIGB1cGRhdGVgLlxuICAgICAgICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgLy8gTm90ZSwgZmlyc3QgdXBkYXRlL3JlbmRlciBoYW5kbGVzIHN0eWxlRWxlbWVudCBzbyB3ZSBvbmx5IGNhbGwgdGhpcyBpZlxuICAgICAgICAvLyBjb25uZWN0ZWQgYWZ0ZXIgZmlyc3QgdXBkYXRlLlxuICAgICAgICBpZiAodGhpcy5oYXNVcGRhdGVkICYmIHdpbmRvdy5TaGFkeUNTUyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3aW5kb3cuU2hhZHlDU1Muc3R5bGVFbGVtZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGVsZW1lbnQuIFRoaXMgbWV0aG9kIHJlZmxlY3RzIHByb3BlcnR5IHZhbHVlcyB0byBhdHRyaWJ1dGVzXG4gICAgICogYW5kIGNhbGxzIGByZW5kZXJgIHRvIHJlbmRlciBET00gdmlhIGxpdC1odG1sLiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlXG4gICAgICogdGhpcyBtZXRob2Qgd2lsbCAqbm90KiB0cmlnZ2VyIGFub3RoZXIgdXBkYXRlLlxuICAgICAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICAgKi9cbiAgICB1cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICAgICAgLy8gU2V0dGluZyBwcm9wZXJ0aWVzIGluIGByZW5kZXJgIHNob3VsZCBub3QgdHJpZ2dlciBhbiB1cGRhdGUuIFNpbmNlXG4gICAgICAgIC8vIHVwZGF0ZXMgYXJlIGFsbG93ZWQgYWZ0ZXIgc3VwZXIudXBkYXRlLCBpdCdzIGltcG9ydGFudCB0byBjYWxsIGByZW5kZXJgXG4gICAgICAgIC8vIGJlZm9yZSB0aGF0LlxuICAgICAgICBjb25zdCB0ZW1wbGF0ZVJlc3VsdCA9IHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICAgIC8vIElmIHJlbmRlciBpcyBub3QgaW1wbGVtZW50ZWQgYnkgdGhlIGNvbXBvbmVudCwgZG9uJ3QgY2FsbCBsaXQtaHRtbCByZW5kZXJcbiAgICAgICAgaWYgKHRlbXBsYXRlUmVzdWx0ICE9PSByZW5kZXJOb3RJbXBsZW1lbnRlZCkge1xuICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgIC5yZW5kZXIodGVtcGxhdGVSZXN1bHQsIHRoaXMucmVuZGVyUm9vdCwgeyBzY29wZU5hbWU6IHRoaXMubG9jYWxOYW1lLCBldmVudENvbnRleHQ6IHRoaXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiBuYXRpdmUgU2hhZG93IERPTSBpcyB1c2VkIGJ1dCBhZG9wdGVkU3R5bGVzIGFyZSBub3Qgc3VwcG9ydGVkLFxuICAgICAgICAvLyBpbnNlcnQgc3R5bGluZyBhZnRlciByZW5kZXJpbmcgdG8gZW5zdXJlIGFkb3B0ZWRTdHlsZXMgaGF2ZSBoaWdoZXN0XG4gICAgICAgIC8vIHByaW9yaXR5LlxuICAgICAgICBpZiAodGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzKSB7XG4gICAgICAgICAgICB0aGlzLl9uZWVkc1NoaW1BZG9wdGVkU3R5bGVTaGVldHMgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuX3N0eWxlcy5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gcy5jc3NUZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUm9vdC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIG9uIGVhY2ggdXBkYXRlIHRvIHBlcmZvcm0gcmVuZGVyaW5nIHRhc2tzLiBUaGlzIG1ldGhvZCBtYXkgcmV0dXJuXG4gICAgICogYW55IHZhbHVlIHJlbmRlcmFibGUgYnkgbGl0LWh0bWwncyBOb2RlUGFydCAtIHR5cGljYWxseSBhIFRlbXBsYXRlUmVzdWx0LlxuICAgICAqIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGUgdGhpcyBtZXRob2Qgd2lsbCAqbm90KiB0cmlnZ2VyIHRoZSBlbGVtZW50IHRvXG4gICAgICogdXBkYXRlLlxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlck5vdEltcGxlbWVudGVkO1xuICAgIH1cbn1cbi8qKlxuICogRW5zdXJlIHRoaXMgY2xhc3MgaXMgbWFya2VkIGFzIGBmaW5hbGl6ZWRgIGFzIGFuIG9wdGltaXphdGlvbiBlbnN1cmluZ1xuICogaXQgd2lsbCBub3QgbmVlZGxlc3NseSB0cnkgdG8gYGZpbmFsaXplYC5cbiAqXG4gKiBOb3RlIHRoaXMgcHJvcGVydHkgbmFtZSBpcyBhIHN0cmluZyB0byBwcmV2ZW50IGJyZWFraW5nIENsb3N1cmUgSlMgQ29tcGlsZXJcbiAqIG9wdGltaXphdGlvbnMuIFNlZSB1cGRhdGluZy1lbGVtZW50LnRzIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICovXG5MaXRFbGVtZW50WydmaW5hbGl6ZWQnXSA9IHRydWU7XG4vKipcbiAqIFJlbmRlciBtZXRob2QgdXNlZCB0byByZW5kZXIgdGhlIHZhbHVlIHRvIHRoZSBlbGVtZW50J3MgRE9NLlxuICogQHBhcmFtIHJlc3VsdCBUaGUgdmFsdWUgdG8gcmVuZGVyLlxuICogQHBhcmFtIGNvbnRhaW5lciBOb2RlIGludG8gd2hpY2ggdG8gcmVuZGVyLlxuICogQHBhcmFtIG9wdGlvbnMgRWxlbWVudCBuYW1lLlxuICogQG5vY29sbGFwc2VcbiAqL1xuTGl0RWxlbWVudC5yZW5kZXIgPSByZW5kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtZWxlbWVudC5qcy5tYXAiLCJcbiAgICBpbXBvcnQge2Nzc30gZnJvbSAnbGl0LWVsZW1lbnQnO1xuICAgIGV4cG9ydCBkZWZhdWx0IGNzc2A6aG9zdHtwYWRkaW5nLXRvcDoxMjhweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWl0ZW1zOmNlbnRlcjtvdmVyZmxvdzphdXRvO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApICFpbXBvcnRhbnQ7b3BhY2l0eToxICFpbXBvcnRhbnR9aHAtc2VhcmNoe3dpZHRoOjEwMCU7bWF4LXdpZHRoOjUwMHB4fVxuYDtcbiAgIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuLyoqXG4gKiBSZXR1cm4gYW4gZWxlbWVudCBhc3NpZ25lZCB0byBhIGdpdmVuIHNsb3QgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBzZWxlY3RvclxuICovXG5pbXBvcnQgeyBtYXRjaGVzIH0gZnJvbSAnQG1hdGVyaWFsL2RvbS9wb255ZmlsbCc7XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIG5vZGUgaXMgYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrXG4gKi9cbmV4cG9ydCBjb25zdCBpc05vZGVFbGVtZW50ID0gKG5vZGUpID0+IHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREU7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBc3NpZ25lZEVsZW1lbnQoc2xvdCwgc2VsZWN0b3IpIHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygc2xvdC5hc3NpZ25lZE5vZGVzKHsgZmxhdHRlbjogdHJ1ZSB9KSkge1xuICAgICAgICBpZiAoaXNOb2RlRWxlbWVudChub2RlKSkge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBub2RlO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRIYXNSZW1vdmVDbGFzcyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkQ2xhc3M6IChjbGFzc05hbWUpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0NsYXNzOiAoY2xhc3NOYW1lKSA9PiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpLFxuICAgIH07XG59XG5sZXQgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5jb25zdCBmbiA9ICgpID0+IHsgfTtcbmNvbnN0IG9wdGlvbnNCbG9jayA9IHtcbiAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd4JywgZm4sIG9wdGlvbnNCbG9jayk7XG5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd4JywgZm4pO1xuLyoqXG4gKiBEbyBldmVudCBsaXN0ZW5lcnMgc3Vwb3J0IHRoZSBgcGFzc2l2ZWAgb3B0aW9uP1xuICovXG5leHBvcnQgY29uc3Qgc3VwcG9ydHNQYXNzaXZlRXZlbnRMaXN0ZW5lciA9IHN1cHBvcnRzUGFzc2l2ZTtcbmV4cG9ydCBjb25zdCBkZWVwQWN0aXZlRWxlbWVudFBhdGggPSAoZG9jID0gd2luZG93LmRvY3VtZW50KSA9PiB7XG4gICAgbGV0IGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDtcbiAgICBjb25zdCBwYXRoID0gW107XG4gICAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICB3aGlsZSAoYWN0aXZlRWxlbWVudCkge1xuICAgICAgICBwYXRoLnB1c2goYWN0aXZlRWxlbWVudCk7XG4gICAgICAgIGlmIChhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3QuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufTtcbmV4cG9ydCBjb25zdCBkb2VzRWxlbWVudENvbnRhaW5Gb2N1cyA9IChlbGVtZW50KSA9PiB7XG4gICAgY29uc3QgYWN0aXZlUGF0aCA9IGRlZXBBY3RpdmVFbGVtZW50UGF0aCgpO1xuICAgIGlmICghYWN0aXZlUGF0aC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBkZWVwQWN0aXZlRWxlbWVudCA9IGFjdGl2ZVBhdGhbYWN0aXZlUGF0aC5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBmb2N1c0V2ID0gbmV3IEV2ZW50KCdjaGVjay1pZi1mb2N1c2VkJywgeyBidWJibGVzOiB0cnVlLCBjb21wb3NlZDogdHJ1ZSB9KTtcbiAgICBsZXQgY29tcG9zZWRQYXRoID0gW107XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZXYpID0+IHtcbiAgICAgICAgY29tcG9zZWRQYXRoID0gZXYuY29tcG9zZWRQYXRoKCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoZWNrLWlmLWZvY3VzZWQnLCBsaXN0ZW5lcik7XG4gICAgZGVlcEFjdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChmb2N1c0V2KTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoZWNrLWlmLWZvY3VzZWQnLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGNvbXBvc2VkUGF0aC5pbmRleE9mKGVsZW1lbnQpICE9PSAtMTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5pbXBvcnQgeyBMaXRFbGVtZW50IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuZXhwb3J0IHsgYWRkSGFzUmVtb3ZlQ2xhc3MgfSBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBCYXNlRWxlbWVudCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgYXR0YWNoIHRoZSBNREMgRm91bmRhdGlvbiB0byB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjcmVhdGVGb3VuZGF0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5tZGNGb3VuZGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWRjRm91bmRhdGlvbi5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWRjRm91bmRhdGlvbkNsYXNzKSB7XG4gICAgICAgICAgICB0aGlzLm1kY0ZvdW5kYXRpb24gPSBuZXcgdGhpcy5tZGNGb3VuZGF0aW9uQ2xhc3ModGhpcy5jcmVhdGVBZGFwdGVyKCkpO1xuICAgICAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uLmluaXQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXJzdFVwZGF0ZWQoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlRm91bmRhdGlvbigpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UtZWxlbWVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBNRENGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1EQ0ZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICBpZiAoYWRhcHRlciA9PT0gdm9pZCAwKSB7IGFkYXB0ZXIgPSB7fTsgfVxuICAgICAgICB0aGlzLmFkYXB0ZXJfID0gYWRhcHRlcjtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0ZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHJldHVybiBhbiBvYmplY3Qgd2hpY2ggZXhwb3J0cyBldmVyeVxuICAgICAgICAgICAgLy8gQ1NTIGNsYXNzIHRoZSBmb3VuZGF0aW9uIGNsYXNzIG5lZWRzIGFzIGEgcHJvcGVydHkuIGUuZy4ge0FDVElWRTogJ21kYy1jb21wb25lbnQtLWFjdGl2ZSd9XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIENsYXNzZXMgZXh0ZW5kaW5nIE1EQ0ZvdW5kYXRpb24gc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byByZXR1cm4gYW4gb2JqZWN0IHdoaWNoIGV4cG9ydHMgYWxsXG4gICAgICAgICAgICAvLyBzZW1hbnRpYyBzdHJpbmdzIGFzIGNvbnN0YW50cy4gZS5nLiB7QVJJQV9ST0xFOiAndGFibGlzdCd9XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENGb3VuZGF0aW9uLCBcIm51bWJlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIENsYXNzZXMgZXh0ZW5kaW5nIE1EQ0ZvdW5kYXRpb24gc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byByZXR1cm4gYW4gb2JqZWN0IHdoaWNoIGV4cG9ydHMgYWxsXG4gICAgICAgICAgICAvLyBvZiBpdHMgc2VtYW50aWMgbnVtYmVycyBhcyBjb25zdGFudHMuIGUuZy4ge0FOSU1BVElPTl9ERUxBWV9NUzogMzUwfVxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBtYXkgY2hvb3NlIHRvIGltcGxlbWVudCB0aGlzIGdldHRlciBpbiBvcmRlciB0byBwcm92aWRlIGEgY29udmVuaWVudFxuICAgICAgICAgICAgLy8gd2F5IG9mIHZpZXdpbmcgdGhlIG5lY2Vzc2FyeSBtZXRob2RzIG9mIGFuIGFkYXB0ZXIuIEluIHRoZSBmdXR1cmUsIHRoaXMgY291bGQgYWxzbyBiZSB1c2VkIGZvciBhZGFwdGVyXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwZXJmb3JtIGluaXRpYWxpemF0aW9uIHJvdXRpbmVzIChyZWdpc3RlcmluZyBldmVudHMsIGV0Yy4pXG4gICAgfTtcbiAgICBNRENGb3VuZGF0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwZXJmb3JtIGRlLWluaXRpYWxpemF0aW9uIHJvdXRpbmVzIChkZS1yZWdpc3RlcmluZyBldmVudHMsIGV0Yy4pXG4gICAgfTtcbiAgICByZXR1cm4gTURDRm91bmRhdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBNRENGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgc3RyaW5ncyA9IHtcbiAgICBOT1RDSF9FTEVNRU5UX1NFTEVDVE9SOiAnLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoJyxcbn07XG52YXIgbnVtYmVycyA9IHtcbiAgICAvLyBUaGlzIHNob3VsZCBzdGF5IGluIHN5bmMgd2l0aCAkbWRjLW5vdGNoZWQtb3V0bGluZS1wYWRkaW5nICogMi5cbiAgICBOT1RDSF9FTEVNRU5UX1BBRERJTkc6IDgsXG59O1xudmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgTk9fTEFCRUw6ICdtZGMtbm90Y2hlZC1vdXRsaW5lLS1uby1sYWJlbCcsXG4gICAgT1VUTElORV9OT1RDSEVEOiAnbWRjLW5vdGNoZWQtb3V0bGluZS0tbm90Y2hlZCcsXG4gICAgT1VUTElORV9VUEdSQURFRDogJ21kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkJyxcbn07XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBudW1iZXJzLCBzdHJpbmdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIsIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLCBcIm51bWJlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlZSB7QGxpbmsgTURDTm90Y2hlZE91dGxpbmVBZGFwdGVyfSBmb3IgdHlwaW5nIGluZm9ybWF0aW9uIG9uIHBhcmFtZXRlcnMgYW5kIHJldHVybiB0eXBlcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldE5vdGNoV2lkdGhQcm9wZXJ0eTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZU5vdGNoV2lkdGhQcm9wZXJ0eTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIG91dGxpbmUgbm90Y2hlZCBzZWxlY3RvciBhbmQgdXBkYXRlcyB0aGUgbm90Y2ggd2lkdGggY2FsY3VsYXRlZCBiYXNlZCBvZmYgb2Ygbm90Y2hXaWR0aC5cbiAgICAgKi9cbiAgICBNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24ucHJvdG90eXBlLm5vdGNoID0gZnVuY3Rpb24gKG5vdGNoV2lkdGgpIHtcbiAgICAgICAgdmFyIE9VVExJTkVfTk9UQ0hFRCA9IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbi5jc3NDbGFzc2VzLk9VVExJTkVfTk9UQ0hFRDtcbiAgICAgICAgaWYgKG5vdGNoV2lkdGggPiAwKSB7XG4gICAgICAgICAgICBub3RjaFdpZHRoICs9IG51bWJlcnMuTk9UQ0hfRUxFTUVOVF9QQURESU5HOyAvLyBBZGQgcGFkZGluZyBmcm9tIGxlZnQvcmlnaHQuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyXy5zZXROb3RjaFdpZHRoUHJvcGVydHkobm90Y2hXaWR0aCk7XG4gICAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoT1VUTElORV9OT1RDSEVEKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbm90Y2hlZCBvdXRsaW5lIHNlbGVjdG9yIHRvIGNsb3NlIHRoZSBub3RjaCBpbiB0aGUgb3V0bGluZS5cbiAgICAgKi9cbiAgICBNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24ucHJvdG90eXBlLmNsb3NlTm90Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBPVVRMSU5FX05PVENIRUQgPSBNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5PVVRMSU5FX05PVENIRUQ7XG4gICAgICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoT1VUTElORV9OT1RDSEVEKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVOb3RjaFdpZHRoUHJvcGVydHkoKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuaW1wb3J0IHsgQmFzZUVsZW1lbnQgfSBmcm9tICdAbWF0ZXJpYWwvbXdjLWJhc2UvYmFzZS1lbGVtZW50LmpzJztcbmltcG9ydCB7IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9ub3RjaGVkLW91dGxpbmUvZm91bmRhdGlvbi5qcyc7XG5pbXBvcnQgeyBodG1sLCBwcm9wZXJ0eSwgcXVlcnkgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5leHBvcnQgY2xhc3MgTm90Y2hlZE91dGxpbmVCYXNlIGV4dGVuZHMgQmFzZUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1kY0ZvdW5kYXRpb25DbGFzcyA9IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbjtcbiAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxhc3RPcGVuID0gdGhpcy5vcGVuO1xuICAgIH1cbiAgICBjcmVhdGVBZGFwdGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkQ2xhc3M6IChjbGFzc05hbWUpID0+IHRoaXMubWRjUm9vdC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSksXG4gICAgICAgICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5tZGNSb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgIHNldE5vdGNoV2lkdGhQcm9wZXJ0eTogKHdpZHRoKSA9PiB0aGlzLm5vdGNoRWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnd2lkdGgnLCBgJHt3aWR0aH1weGApLFxuICAgICAgICAgICAgcmVtb3ZlTm90Y2hXaWR0aFByb3BlcnR5OiAoKSA9PiB0aGlzLm5vdGNoRWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnd2lkdGgnKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgb3Blbk9yQ2xvc2Uoc2hvdWxkT3Blbiwgd2lkdGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1kY0ZvdW5kYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkT3BlbiAmJiB3aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1kY0ZvdW5kYXRpb24ubm90Y2god2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uLmNsb3NlTm90Y2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMub3Blbk9yQ2xvc2UodGhpcy5vcGVuLCB0aGlzLndpZHRoKTtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgPHNwYW4gY2xhc3M9XCJtZGMtbm90Y2hlZC1vdXRsaW5lXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwibWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZ1wiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaFwiPlxuICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cIm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5nXCI+PC9zcGFuPlxuICAgICAgPC9zcGFuPmA7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcXVlcnkoJy5tZGMtbm90Y2hlZC1vdXRsaW5lJylcbl0sIE5vdGNoZWRPdXRsaW5lQmFzZS5wcm90b3R5cGUsIFwibWRjUm9vdFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIgfSlcbl0sIE5vdGNoZWRPdXRsaW5lQmFzZS5wcm90b3R5cGUsIFwid2lkdGhcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuXSwgTm90Y2hlZE91dGxpbmVCYXNlLnByb3RvdHlwZSwgXCJvcGVuXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBxdWVyeSgnLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoJylcbl0sIE5vdGNoZWRPdXRsaW5lQmFzZS5wcm90b3R5cGUsIFwibm90Y2hFbGVtZW50XCIsIHZvaWQgMCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1td2Mtbm90Y2hlZC1vdXRsaW5lLWJhc2UuanMubWFwIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuZXhwb3J0IGNvbnN0IHN0eWxlID0gY3NzIGAubWRjLW5vdGNoZWQtb3V0bGluZXtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtsZWZ0OjA7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjEwMCU7bWF4LXdpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7dGV4dC1hbGlnbjpsZWZ0O3BvaW50ZXItZXZlbnRzOm5vbmV9W2Rpcj1ydGxdIC5tZGMtbm90Y2hlZC1vdXRsaW5lLC5tZGMtbm90Y2hlZC1vdXRsaW5lW2Rpcj1ydGxde3RleHQtYWxpZ246cmlnaHR9Lm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjEwMCU7Ym9yZGVyLXRvcDoxcHggc29saWQ7Ym9yZGVyLWJvdHRvbToxcHggc29saWQ7cG9pbnRlci1ldmVudHM6bm9uZX0ubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZ3tib3JkZXItbGVmdDoxcHggc29saWQ7Ym9yZGVyLXJpZ2h0Om5vbmU7d2lkdGg6MTJweH1bZGlyPXJ0bF0gLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmdbZGlyPXJ0bF17Ym9yZGVyLWxlZnQ6bm9uZTtib3JkZXItcmlnaHQ6MXB4IHNvbGlkfS5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItbGVmdDpub25lO2JvcmRlci1yaWdodDoxcHggc29saWQ7ZmxleC1ncm93OjF9W2Rpcj1ydGxdIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZywubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmdbZGlyPXJ0bF17Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkO2JvcmRlci1yaWdodDpub25lfS5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaHtmbGV4OjAgMCBhdXRvO3dpZHRoOmF1dG87bWF4LXdpZHRoOmNhbGMoMTAwJSAtIDEycHggKiAyKX0ubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLWZsb2F0aW5nLWxhYmVse2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO21heC13aWR0aDoxMDAlfS5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle3RleHQtb3ZlcmZsb3c6Y2xpcH0ubWRjLW5vdGNoZWQtb3V0bGluZS0tdXBncmFkZWQgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmV7bWF4LXdpZHRoOmNhbGMoMTAwJSAvIC43NSl9Lm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vdGNoZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoe3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6OHB4O2JvcmRlci10b3A6bm9uZX1bZGlyPXJ0bF0gLm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vdGNoZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtbm90Y2hlZC1vdXRsaW5lLS1ub3RjaGVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaFtkaXI9cnRsXXtwYWRkaW5nLWxlZnQ6OHB4O3BhZGRpbmctcmlnaHQ6MH0ubWRjLW5vdGNoZWQtb3V0bGluZS0tbm8tbGFiZWwgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoe3BhZGRpbmc6MH06aG9zdHtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7bGVmdDowO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO21heC13aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RleHQtYWxpZ246bGVmdDtwb2ludGVyLWV2ZW50czpub25lfVtkaXI9cnRsXSA6aG9zdCw6aG9zdFtkaXI9cnRsXXt0ZXh0LWFsaWduOnJpZ2h0fTo6c2xvdHRlZCgubWRjLWZsb2F0aW5nLWxhYmVsKXtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6MTdweDtib3R0b206YXV0bzttYXgtd2lkdGg6MTAwJX06OnNsb3R0ZWQoLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmUpe3RleHQtb3ZlcmZsb3c6Y2xpcH0ubWRjLW5vdGNoZWQtb3V0bGluZS0tdXBncmFkZWQgOjpzbG90dGVkKC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlKXttYXgtd2lkdGg6Y2FsYygxMDAlIC8gLjc1KX0ubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZ3t3aWR0aDoxMnB4O3dpZHRoOnZhcigtLW1kYy1ub3RjaGVkLW91dGxpbmUtbGVhZGluZy13aWR0aCwgMTJweCk7Ym9yZGVyLXJhZGl1czo0cHggMCAwIDRweDtib3JkZXItcmFkaXVzOnZhcigtLW1kYy1ub3RjaGVkLW91dGxpbmUtbGVhZGluZy1ib3JkZXItcmFkaXVzLCA0cHggMCAwIDRweCl9Lm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1yYWRpdXM6MCA0cHggNHB4IDA7Ym9yZGVyLXJhZGl1czp2YXIoLS1tZGMtbm90Y2hlZC1vdXRsaW5lLXRyYWlsaW5nLWJvcmRlci1yYWRpdXMsIDAgNHB4IDRweCAwKX0ubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gsLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1jb2xvcjp2YXIoLS1tZGMtbm90Y2hlZC1vdXRsaW5lLWJvcmRlci1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICM2MjAwZWUpKTtib3JkZXItd2lkdGg6MXB4O2JvcmRlci13aWR0aDp2YXIoLS1tZGMtbm90Y2hlZC1vdXRsaW5lLXN0cm9rZS13aWR0aCwgMXB4KX1gO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXdjLW5vdGNoZWQtb3V0bGluZS1jc3MuanMubWFwIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IE5vdGNoZWRPdXRsaW5lQmFzZSB9IGZyb20gJy4vbXdjLW5vdGNoZWQtb3V0bGluZS1iYXNlLmpzJztcbmltcG9ydCB7IHN0eWxlIH0gZnJvbSAnLi9td2Mtbm90Y2hlZC1vdXRsaW5lLWNzcy5qcyc7XG5sZXQgTm90Y2hlZE91dGxpbmUgPSBjbGFzcyBOb3RjaGVkT3V0bGluZSBleHRlbmRzIE5vdGNoZWRPdXRsaW5lQmFzZSB7XG59O1xuTm90Y2hlZE91dGxpbmUuc3R5bGVzID0gc3R5bGU7XG5Ob3RjaGVkT3V0bGluZSA9IF9fZGVjb3JhdGUoW1xuICAgIGN1c3RvbUVsZW1lbnQoJ213Yy1ub3RjaGVkLW91dGxpbmUnKVxuXSwgTm90Y2hlZE91dGxpbmUpO1xuZXhwb3J0IHsgTm90Y2hlZE91dGxpbmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW13Yy1ub3RjaGVkLW91dGxpbmUuanMubWFwIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuLyoqXG4gKiBSZXR1cm4gYW4gZWxlbWVudCBhc3NpZ25lZCB0byBhIGdpdmVuIHNsb3QgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBzZWxlY3RvclxuICovXG5pbXBvcnQgeyBtYXRjaGVzIH0gZnJvbSAnQG1hdGVyaWFsL2RvbS9wb255ZmlsbCc7XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIG5vZGUgaXMgYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrXG4gKi9cbmV4cG9ydCBjb25zdCBpc05vZGVFbGVtZW50ID0gKG5vZGUpID0+IHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREU7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBc3NpZ25lZEVsZW1lbnQoc2xvdCwgc2VsZWN0b3IpIHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygc2xvdC5hc3NpZ25lZE5vZGVzKHsgZmxhdHRlbjogdHJ1ZSB9KSkge1xuICAgICAgICBpZiAoaXNOb2RlRWxlbWVudChub2RlKSkge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBub2RlO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRIYXNSZW1vdmVDbGFzcyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkQ2xhc3M6IChjbGFzc05hbWUpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0NsYXNzOiAoY2xhc3NOYW1lKSA9PiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpLFxuICAgIH07XG59XG5sZXQgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5jb25zdCBmbiA9ICgpID0+IHsgfTtcbmNvbnN0IG9wdGlvbnNCbG9jayA9IHtcbiAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd4JywgZm4sIG9wdGlvbnNCbG9jayk7XG5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd4JywgZm4pO1xuLyoqXG4gKiBEbyBldmVudCBsaXN0ZW5lcnMgc3Vwb3J0IHRoZSBgcGFzc2l2ZWAgb3B0aW9uP1xuICovXG5leHBvcnQgY29uc3Qgc3VwcG9ydHNQYXNzaXZlRXZlbnRMaXN0ZW5lciA9IHN1cHBvcnRzUGFzc2l2ZTtcbmV4cG9ydCBjb25zdCBkZWVwQWN0aXZlRWxlbWVudFBhdGggPSAoZG9jID0gd2luZG93LmRvY3VtZW50KSA9PiB7XG4gICAgbGV0IGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDtcbiAgICBjb25zdCBwYXRoID0gW107XG4gICAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICB3aGlsZSAoYWN0aXZlRWxlbWVudCkge1xuICAgICAgICBwYXRoLnB1c2goYWN0aXZlRWxlbWVudCk7XG4gICAgICAgIGlmIChhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3QuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufTtcbmV4cG9ydCBjb25zdCBkb2VzRWxlbWVudENvbnRhaW5Gb2N1cyA9IChlbGVtZW50KSA9PiB7XG4gICAgY29uc3QgYWN0aXZlUGF0aCA9IGRlZXBBY3RpdmVFbGVtZW50UGF0aCgpO1xuICAgIGlmICghYWN0aXZlUGF0aC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBkZWVwQWN0aXZlRWxlbWVudCA9IGFjdGl2ZVBhdGhbYWN0aXZlUGF0aC5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBmb2N1c0V2ID0gbmV3IEV2ZW50KCdjaGVjay1pZi1mb2N1c2VkJywgeyBidWJibGVzOiB0cnVlLCBjb21wb3NlZDogdHJ1ZSB9KTtcbiAgICBsZXQgY29tcG9zZWRQYXRoID0gW107XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZXYpID0+IHtcbiAgICAgICAgY29tcG9zZWRQYXRoID0gZXYuY29tcG9zZWRQYXRoKCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoZWNrLWlmLWZvY3VzZWQnLCBsaXN0ZW5lcik7XG4gICAgZGVlcEFjdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChmb2N1c0V2KTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoZWNrLWlmLWZvY3VzZWQnLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGNvbXBvc2VkUGF0aC5pbmRleE9mKGVsZW1lbnQpICE9PSAtMTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5pbXBvcnQgeyBMaXRFbGVtZW50IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuZXhwb3J0IHsgYWRkSGFzUmVtb3ZlQ2xhc3MgfSBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBCYXNlRWxlbWVudCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgYXR0YWNoIHRoZSBNREMgRm91bmRhdGlvbiB0byB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjcmVhdGVGb3VuZGF0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5tZGNGb3VuZGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWRjRm91bmRhdGlvbi5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWRjRm91bmRhdGlvbkNsYXNzKSB7XG4gICAgICAgICAgICB0aGlzLm1kY0ZvdW5kYXRpb24gPSBuZXcgdGhpcy5tZGNGb3VuZGF0aW9uQ2xhc3ModGhpcy5jcmVhdGVBZGFwdGVyKCkpO1xuICAgICAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uLmluaXQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXJzdFVwZGF0ZWQoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlRm91bmRhdGlvbigpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UtZWxlbWVudC5qcy5tYXAiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5pbXBvcnQgeyBhZGRIYXNSZW1vdmVDbGFzcywgQmFzZUVsZW1lbnQgfSBmcm9tICcuL2Jhc2UtZWxlbWVudC5qcyc7XG5leHBvcnQgeyBhZGRIYXNSZW1vdmVDbGFzcywgQmFzZUVsZW1lbnQgfTtcbmV4cG9ydCBjbGFzcyBGb3JtRWxlbWVudCBleHRlbmRzIEJhc2VFbGVtZW50IHtcbiAgICBjcmVhdGVSZW5kZXJSb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicsIGRlbGVnYXRlc0ZvY3VzOiB0cnVlIH0pO1xuICAgIH1cbiAgICBjbGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRBcmlhTGFiZWwobGFiZWwpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpcnN0VXBkYXRlZCgpIHtcbiAgICAgICAgc3VwZXIuZmlyc3RVcGRhdGVkKCk7XG4gICAgICAgIHRoaXMubWRjUm9vdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywgZSkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtLWVsZW1lbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5leHBvcnQgdmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgTEFCRUxfRkxPQVRfQUJPVkU6ICdtZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlJyxcbiAgICBMQUJFTF9TSEFLRTogJ21kYy1mbG9hdGluZy1sYWJlbC0tc2hha2UnLFxuICAgIFJPT1Q6ICdtZGMtZmxvYXRpbmctbGFiZWwnLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHNsaWJfMS5fX2Fzc2lnbih7fSwgTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIsIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zaGFrZUFuaW1hdGlvbkVuZEhhbmRsZXJfID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaGFuZGxlU2hha2VBbmltYXRpb25FbmRfKCk7IH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENGbG9hdGluZ0xhYmVsQWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5yZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcignYW5pbWF0aW9uZW5kJywgdGhpcy5zaGFrZUFuaW1hdGlvbkVuZEhhbmRsZXJfKTtcbiAgICB9O1xuICAgIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLmRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2FuaW1hdGlvbmVuZCcsIHRoaXMuc2hha2VBbmltYXRpb25FbmRIYW5kbGVyXyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGUgbGFiZWwgZWxlbWVudC5cbiAgICAgKi9cbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkYXB0ZXJfLmdldFdpZHRoKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHlsZXMgdGhlIGxhYmVsIHRvIHByb2R1Y2UgYSBzaGFrZSBhbmltYXRpb24gdG8gaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAgICogQHBhcmFtIHNob3VsZFNoYWtlIElmIHRydWUsIGFkZHMgdGhlIHNoYWtlIENTUyBjbGFzczsgb3RoZXJ3aXNlLCByZW1vdmVzIHNoYWtlIGNsYXNzLlxuICAgICAqL1xuICAgIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLnByb3RvdHlwZS5zaGFrZSA9IGZ1bmN0aW9uIChzaG91bGRTaGFrZSkge1xuICAgICAgICB2YXIgTEFCRUxfU0hBS0UgPSBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5jc3NDbGFzc2VzLkxBQkVMX1NIQUtFO1xuICAgICAgICBpZiAoc2hvdWxkU2hha2UpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTEFCRUxfU0hBS0UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhMQUJFTF9TSEFLRSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0eWxlcyB0aGUgbGFiZWwgdG8gZmxvYXQgb3IgZG9jay5cbiAgICAgKiBAcGFyYW0gc2hvdWxkRmxvYXQgSWYgdHJ1ZSwgYWRkcyB0aGUgZmxvYXQgQ1NTIGNsYXNzOyBvdGhlcndpc2UsIHJlbW92ZXMgZmxvYXQgYW5kIHNoYWtlIGNsYXNzZXMgdG8gZG9jayB0aGUgbGFiZWwuXG4gICAgICovXG4gICAgTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24ucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24gKHNob3VsZEZsb2F0KSB7XG4gICAgICAgIHZhciBfYSA9IE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLmNzc0NsYXNzZXMsIExBQkVMX0ZMT0FUX0FCT1ZFID0gX2EuTEFCRUxfRkxPQVRfQUJPVkUsIExBQkVMX1NIQUtFID0gX2EuTEFCRUxfU0hBS0U7XG4gICAgICAgIGlmIChzaG91bGRGbG9hdCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhMQUJFTF9GTE9BVF9BQk9WRSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKExBQkVMX0ZMT0FUX0FCT1ZFKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoTEFCRUxfU0hBS0UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlU2hha2VBbmltYXRpb25FbmRfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgTEFCRUxfU0hBS0UgPSBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5jc3NDbGFzc2VzLkxBQkVMX1NIQUtFO1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKExBQkVMX1NIQUtFKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiaW1wb3J0IHsgTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvZmxvYXRpbmctbGFiZWwvZm91bmRhdGlvbi5qcyc7XG5pbXBvcnQgeyBkaXJlY3RpdmUgfSBmcm9tICdsaXQtaHRtbCc7XG5jb25zdCBjcmVhdGVBZGFwdGVyID0gKGxhYmVsRWxlbWVudCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZENsYXNzOiAoY2xhc3NOYW1lKSA9PiBsYWJlbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpLFxuICAgICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4gbGFiZWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKSxcbiAgICAgICAgZ2V0V2lkdGg6ICgpID0+IGxhYmVsRWxlbWVudC5zY3JvbGxXaWR0aCxcbiAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IChldnRUeXBlLCBoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICBsYWJlbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogKGV2dFR5cGUsIGhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgIGxhYmVsRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuY29uc3QgcGFydFRvRm91bmRhdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgY29uc3QgZmxvYXRpbmdMYWJlbCA9IGRpcmVjdGl2ZSgobGFiZWwpID0+IChwYXJ0KSA9PiB7XG4gICAgY29uc3QgbGFzdEZvdW5kYXRpb24gPSBwYXJ0VG9Gb3VuZGF0aW9uTWFwLmdldChwYXJ0KTtcbiAgICBpZiAoIWxhc3RGb3VuZGF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsRWxlbWVudCA9IHBhcnQuY29tbWl0dGVyLmVsZW1lbnQ7XG4gICAgICAgIGxhYmVsRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtZGMtZmxvYXRpbmctbGFiZWwnKTtcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IGNyZWF0ZUFkYXB0ZXIobGFiZWxFbGVtZW50KTtcbiAgICAgICAgY29uc3QgZm91bmRhdGlvbiA9IG5ldyBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICAgICAgZm91bmRhdGlvbi5pbml0KCk7XG4gICAgICAgIHBhcnQuc2V0VmFsdWUoZm91bmRhdGlvbik7XG4gICAgICAgIHBhcnRUb0ZvdW5kYXRpb25NYXAuc2V0KHBhcnQsIHsgbGFiZWwsIGZvdW5kYXRpb24gfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxhc3RGb3VuZGF0aW9uLmxhYmVsICE9PSBsYWJlbCkge1xuICAgICAgICBjb25zdCBsYWJlbEVsZW1lbnQgPSBwYXJ0LmNvbW1pdHRlci5lbGVtZW50O1xuICAgICAgICBjb25zdCBsYWJlbENoYW5nZUV2ZW50ID0gbmV3IEV2ZW50KCdsYWJlbGNoYW5nZScpO1xuICAgICAgICBsYWJlbEVsZW1lbnQuZGlzcGF0Y2hFdmVudChsYWJlbENoYW5nZUV2ZW50KTtcbiAgICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW13Yy1mbG9hdGluZy1sYWJlbC1kaXJlY3RpdmUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICBMSU5FX1JJUFBMRV9BQ1RJVkU6ICdtZGMtbGluZS1yaXBwbGUtLWFjdGl2ZScsXG4gICAgTElORV9SSVBQTEVfREVBQ1RJVkFUSU5HOiAnbWRjLWxpbmUtcmlwcGxlLS1kZWFjdGl2YXRpbmcnLFxufTtcbmV4cG9ydCB7IGNzc0NsYXNzZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHNsaWJfMS5fX2Fzc2lnbih7fSwgTURDTGluZVJpcHBsZUZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIsIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50cmFuc2l0aW9uRW5kSGFuZGxlcl8gPSBmdW5jdGlvbiAoZXZ0KSB7IHJldHVybiBfdGhpcy5oYW5kbGVUcmFuc2l0aW9uRW5kKGV2dCk7IH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTGluZVJpcHBsZUZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENMaW5lUmlwcGxlQWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgc2V0U3R5bGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlckV2ZW50SGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGRlcmVnaXN0ZXJFdmVudEhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5yZWdpc3RlckV2ZW50SGFuZGxlcigndHJhbnNpdGlvbmVuZCcsIHRoaXMudHJhbnNpdGlvbkVuZEhhbmRsZXJfKTtcbiAgICB9O1xuICAgIE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLmRlcmVnaXN0ZXJFdmVudEhhbmRsZXIoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLnRyYW5zaXRpb25FbmRIYW5kbGVyXyk7XG4gICAgfTtcbiAgICBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5MSU5FX1JJUFBMRV9ERUFDVElWQVRJTkcpO1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLmFkZENsYXNzKGNzc0NsYXNzZXMuTElORV9SSVBQTEVfQUNUSVZFKTtcbiAgICB9O1xuICAgIE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRSaXBwbGVDZW50ZXIgPSBmdW5jdGlvbiAoeENvb3JkaW5hdGUpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5zZXRTdHlsZSgndHJhbnNmb3JtLW9yaWdpbicsIHhDb29yZGluYXRlICsgXCJweCBjZW50ZXJcIik7XG4gICAgfTtcbiAgICBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhjc3NDbGFzc2VzLkxJTkVfUklQUExFX0RFQUNUSVZBVElORyk7XG4gICAgfTtcbiAgICBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGxpbmUgcmlwcGxlIHRvIGJlIGVpdGhlciB0cmFuc3BhcmVudCBvciBvcGFxdWVcbiAgICAgICAgLy8gYmVmb3JlIGVtaXR0aW5nIHRoZSBhbmltYXRpb24gZW5kIGV2ZW50XG4gICAgICAgIHZhciBpc0RlYWN0aXZhdGluZyA9IHRoaXMuYWRhcHRlcl8uaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5MSU5FX1JJUFBMRV9ERUFDVElWQVRJTkcpO1xuICAgICAgICBpZiAoZXZ0LnByb3BlcnR5TmFtZSA9PT0gJ29wYWNpdHknKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWFjdGl2YXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuTElORV9SSVBQTEVfQUNUSVZFKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuTElORV9SSVBQTEVfREVBQ1RJVkFUSU5HKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uO1xufShNRENGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENMaW5lUmlwcGxlRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBNRENMaW5lUmlwcGxlRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9saW5lLXJpcHBsZS9mb3VuZGF0aW9uLmpzJztcbmltcG9ydCB7IGRpcmVjdGl2ZSB9IGZyb20gJ2xpdC1odG1sJztcbmNvbnN0IGNyZWF0ZUFkYXB0ZXIgPSAobGluZUVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRDbGFzczogKGNsYXNzTmFtZSkgPT4gbGluZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpLFxuICAgICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4gbGluZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpLFxuICAgICAgICBoYXNDbGFzczogKGNsYXNzTmFtZSkgPT4gbGluZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSksXG4gICAgICAgIHNldFN0eWxlOiAocHJvcGVydHlOYW1lLCB2YWx1ZSkgPT4gbGluZUVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHlOYW1lLCB2YWx1ZSksXG4gICAgICAgIHJlZ2lzdGVyRXZlbnRIYW5kbGVyOiAoZXZ0VHlwZSwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgbGluZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVyZWdpc3RlckV2ZW50SGFuZGxlcjogKGV2dFR5cGUsIGhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgIGxpbmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlcik7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5jb25zdCBwYXJ0VG9Gb3VuZGF0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBjb25zdCBsaW5lUmlwcGxlID0gZGlyZWN0aXZlKCgpID0+IChwYXJ0KSA9PiB7XG4gICAgY29uc3QgbGFzdEZvdW5kYXRpb24gPSBwYXJ0VG9Gb3VuZGF0aW9uTWFwLmdldChwYXJ0KTtcbiAgICBpZiAoIWxhc3RGb3VuZGF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGxpbmVFbGVtZW50ID0gcGFydC5jb21taXR0ZXIuZWxlbWVudDtcbiAgICAgICAgbGluZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbWRjLWxpbmUtcmlwcGxlJyk7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSBjcmVhdGVBZGFwdGVyKGxpbmVFbGVtZW50KTtcbiAgICAgICAgY29uc3QgZm91bmRhdGlvbiA9IG5ldyBNRENMaW5lUmlwcGxlRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICAgICAgZm91bmRhdGlvbi5pbml0KCk7XG4gICAgICAgIHBhcnQuc2V0VmFsdWUoZm91bmRhdGlvbik7XG4gICAgICAgIHBhcnRUb0ZvdW5kYXRpb25NYXAuc2V0KHBhcnQsIGZvdW5kYXRpb24pO1xuICAgIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXdjLWxpbmUtcmlwcGxlLWRpcmVjdGl2ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBzdHJpbmdzID0ge1xuICAgIEFSSUFfQ09OVFJPTFM6ICdhcmlhLWNvbnRyb2xzJyxcbiAgICBJTlBVVF9TRUxFQ1RPUjogJy5tZGMtdGV4dC1maWVsZF9faW5wdXQnLFxuICAgIExBQkVMX1NFTEVDVE9SOiAnLm1kYy1mbG9hdGluZy1sYWJlbCcsXG4gICAgTEVBRElOR19JQ09OX1NFTEVDVE9SOiAnLm1kYy10ZXh0LWZpZWxkX19pY29uLS1sZWFkaW5nJyxcbiAgICBMSU5FX1JJUFBMRV9TRUxFQ1RPUjogJy5tZGMtbGluZS1yaXBwbGUnLFxuICAgIE9VVExJTkVfU0VMRUNUT1I6ICcubWRjLW5vdGNoZWQtb3V0bGluZScsXG4gICAgVFJBSUxJTkdfSUNPTl9TRUxFQ1RPUjogJy5tZGMtdGV4dC1maWVsZF9faWNvbi0tdHJhaWxpbmcnXG59O1xudmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgRElTQUJMRUQ6ICdtZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQnLFxuICAgIEZPQ1VTRUQ6ICdtZGMtdGV4dC1maWVsZC0tZm9jdXNlZCcsXG4gICAgRlVMTFdJRFRIOiAnbWRjLXRleHQtZmllbGQtLWZ1bGx3aWR0aCcsXG4gICAgSEVMUEVSX0xJTkU6ICdtZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZScsXG4gICAgSU5WQUxJRDogJ21kYy10ZXh0LWZpZWxkLS1pbnZhbGlkJyxcbiAgICBMQUJFTF9GTE9BVElORzogJ21kYy10ZXh0LWZpZWxkLS1sYWJlbC1mbG9hdGluZycsXG4gICAgTk9fTEFCRUw6ICdtZGMtdGV4dC1maWVsZC0tbm8tbGFiZWwnLFxuICAgIE9VVExJTkVEOiAnbWRjLXRleHQtZmllbGQtLW91dGxpbmVkJyxcbiAgICBST09UOiAnbWRjLXRleHQtZmllbGQnLFxuICAgIFRFWFRBUkVBOiAnbWRjLXRleHQtZmllbGQtLXRleHRhcmVhJyxcbiAgICBXSVRIX0xFQURJTkdfSUNPTjogJ21kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbicsXG4gICAgV0lUSF9UUkFJTElOR19JQ09OOiAnbWRjLXRleHQtZmllbGQtLXdpdGgtdHJhaWxpbmctaWNvbicsXG59O1xudmFyIG51bWJlcnMgPSB7XG4gICAgTEFCRUxfU0NBTEU6IDAuNzUsXG59O1xuLyoqXG4gKiBXaGl0ZWxpc3QgYmFzZWQgb2ZmIG9mIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0d1aWRlL0hUTUwvSFRNTDUvQ29uc3RyYWludF92YWxpZGF0aW9uXG4gKiB1bmRlciB0aGUgXCJWYWxpZGF0aW9uLXJlbGF0ZWQgYXR0cmlidXRlc1wiIHNlY3Rpb24uXG4gKi9cbnZhciBWQUxJREFUSU9OX0FUVFJfV0hJVEVMSVNUID0gW1xuICAgICdwYXR0ZXJuJywgJ21pbicsICdtYXgnLCAncmVxdWlyZWQnLCAnc3RlcCcsICdtaW5sZW5ndGgnLCAnbWF4bGVuZ3RoJyxcbl07XG4vKipcbiAqIExhYmVsIHNob3VsZCBhbHdheXMgZmxvYXQgZm9yIHRoZXNlIHR5cGVzIGFzIHRoZXkgc2hvdyBzb21lIFVJIGV2ZW4gaWYgdmFsdWUgaXMgZW1wdHkuXG4gKi9cbnZhciBBTFdBWVNfRkxPQVRfVFlQRVMgPSBbXG4gICAgJ2NvbG9yJywgJ2RhdGUnLCAnZGF0ZXRpbWUtbG9jYWwnLCAnbW9udGgnLCAncmFuZ2UnLCAndGltZScsICd3ZWVrJyxcbl07XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzLCBudW1iZXJzLCBWQUxJREFUSU9OX0FUVFJfV0hJVEVMSVNULCBBTFdBWVNfRkxPQVRfVFlQRVMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBBTFdBWVNfRkxPQVRfVFlQRVMsIGNzc0NsYXNzZXMsIG51bWJlcnMsIHN0cmluZ3MsIFZBTElEQVRJT05fQVRUUl9XSElURUxJU1QgfSBmcm9tICcuL2NvbnN0YW50cyc7XG52YXIgUE9JTlRFUkRPV05fRVZFTlRTID0gWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddO1xudmFyIElOVEVSQUNUSU9OX0VWRU5UUyA9IFsnY2xpY2snLCAna2V5ZG93biddO1xudmFyIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTURDVGV4dEZpZWxkRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYWRhcHRlclxuICAgICAqIEBwYXJhbSBmb3VuZGF0aW9uTWFwIE1hcCBmcm9tIHN1YmNvbXBvbmVudCBuYW1lcyB0byB0aGVpciBzdWJmb3VuZGF0aW9ucy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNRENUZXh0RmllbGRGb3VuZGF0aW9uKGFkYXB0ZXIsIGZvdW5kYXRpb25NYXApIHtcbiAgICAgICAgaWYgKGZvdW5kYXRpb25NYXAgPT09IHZvaWQgMCkgeyBmb3VuZGF0aW9uTWFwID0ge307IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHNsaWJfMS5fX2Fzc2lnbih7fSwgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzRm9jdXNlZF8gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMucmVjZWl2ZWRVc2VySW5wdXRfID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzVmFsaWRfID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMudXNlTmF0aXZlVmFsaWRhdGlvbl8gPSB0cnVlO1xuICAgICAgICBfdGhpcy5oZWxwZXJUZXh0XyA9IGZvdW5kYXRpb25NYXAuaGVscGVyVGV4dDtcbiAgICAgICAgX3RoaXMuY2hhcmFjdGVyQ291bnRlcl8gPSBmb3VuZGF0aW9uTWFwLmNoYXJhY3RlckNvdW50ZXI7XG4gICAgICAgIF90aGlzLmxlYWRpbmdJY29uXyA9IGZvdW5kYXRpb25NYXAubGVhZGluZ0ljb247XG4gICAgICAgIF90aGlzLnRyYWlsaW5nSWNvbl8gPSBmb3VuZGF0aW9uTWFwLnRyYWlsaW5nSWNvbjtcbiAgICAgICAgX3RoaXMuaW5wdXRGb2N1c0hhbmRsZXJfID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYWN0aXZhdGVGb2N1cygpOyB9O1xuICAgICAgICBfdGhpcy5pbnB1dEJsdXJIYW5kbGVyXyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmRlYWN0aXZhdGVGb2N1cygpOyB9O1xuICAgICAgICBfdGhpcy5pbnB1dElucHV0SGFuZGxlcl8gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5oYW5kbGVJbnB1dCgpOyB9O1xuICAgICAgICBfdGhpcy5zZXRQb2ludGVyWE9mZnNldF8gPSBmdW5jdGlvbiAoZXZ0KSB7IHJldHVybiBfdGhpcy5zZXRUcmFuc2Zvcm1PcmlnaW4oZXZ0KTsgfTtcbiAgICAgICAgX3RoaXMudGV4dEZpZWxkSW50ZXJhY3Rpb25IYW5kbGVyXyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmhhbmRsZVRleHRGaWVsZEludGVyYWN0aW9uKCk7IH07XG4gICAgICAgIF90aGlzLnZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyXyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzTGlzdCkgeyByZXR1cm4gX3RoaXMuaGFuZGxlVmFsaWRhdGlvbkF0dHJpYnV0ZUNoYW5nZShhdHRyaWJ1dGVzTGlzdCk7IH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZEZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkRm91bmRhdGlvbiwgXCJudW1iZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLCBcInNob3VsZEFsd2F5c0Zsb2F0X1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmdldE5hdGl2ZUlucHV0XygpLnR5cGU7XG4gICAgICAgICAgICByZXR1cm4gQUxXQVlTX0ZMT0FUX1RZUEVTLmluZGV4T2YodHlwZSkgPj0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLCBcInNob3VsZEZsb2F0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaG91bGRBbHdheXNGbG9hdF8gfHwgdGhpcy5pc0ZvY3VzZWRfIHx8ICEhdGhpcy5nZXRWYWx1ZSgpIHx8IHRoaXMuaXNCYWRJbnB1dF8oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLCBcInNob3VsZFNoYWtlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNGb2N1c2VkXyAmJiAhdGhpcy5pc1ZhbGlkKCkgJiYgISF0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlZSB7QGxpbmsgTURDVGV4dEZpZWxkQWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGRlcmVnaXN0ZXJUZXh0RmllbGRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9KTsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVyVmFsaWRhdGlvbkF0dHJpYnV0ZUNoYW5nZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXROYXRpdmVJbnB1dDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgICAgICAgICBpc0ZvY3VzZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGFjdGl2YXRlTGluZVJpcHBsZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVMaW5lUmlwcGxlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgc2V0TGluZVJpcHBsZVRyYW5zZm9ybU9yaWdpbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNoYWtlTGFiZWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBmbG9hdExhYmVsOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgaGFzTGFiZWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGdldExhYmVsV2lkdGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgaGFzT3V0bGluZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgbm90Y2hPdXRsaW5lOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgY2xvc2VPdXRsaW5lOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlcl8uaXNGb2N1c2VkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRGb2N1c0hhbmRsZXJfKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hZGFwdGVyXy5oYXNMYWJlbCgpICYmIHRoaXMuc2hvdWxkRmxvYXQpIHtcbiAgICAgICAgICAgIHRoaXMubm90Y2hPdXRsaW5lKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5mbG9hdExhYmVsKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZUZsb2F0aW5nXyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoJ2ZvY3VzJywgdGhpcy5pbnB1dEZvY3VzSGFuZGxlcl8pO1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoJ2JsdXInLCB0aGlzLmlucHV0Qmx1ckhhbmRsZXJfKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5yZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyKCdpbnB1dCcsIHRoaXMuaW5wdXRJbnB1dEhhbmRsZXJfKTtcbiAgICAgICAgUE9JTlRFUkRPV05fRVZFTlRTLmZvckVhY2goZnVuY3Rpb24gKGV2dFR5cGUpIHtcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXJfLnJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgX3RoaXMuc2V0UG9pbnRlclhPZmZzZXRfKTtcbiAgICAgICAgfSk7XG4gICAgICAgIElOVEVSQUNUSU9OX0VWRU5UUy5mb3JFYWNoKGZ1bmN0aW9uIChldnRUeXBlKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyXy5yZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCBfdGhpcy50ZXh0RmllbGRJbnRlcmFjdGlvbkhhbmRsZXJfKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk9ic2VydmVyXyA9XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVyVmFsaWRhdGlvbkF0dHJpYnV0ZUNoYW5nZUhhbmRsZXIodGhpcy52YWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcl8pO1xuICAgICAgICB0aGlzLnNldENoYXJhY3RlckNvdW50ZXJfKHRoaXMuZ2V0VmFsdWUoKS5sZW5ndGgpO1xuICAgIH07XG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoJ2ZvY3VzJywgdGhpcy5pbnB1dEZvY3VzSGFuZGxlcl8pO1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLmRlcmVnaXN0ZXJJbnB1dEludGVyYWN0aW9uSGFuZGxlcignYmx1cicsIHRoaXMuaW5wdXRCbHVySGFuZGxlcl8pO1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLmRlcmVnaXN0ZXJJbnB1dEludGVyYWN0aW9uSGFuZGxlcignaW5wdXQnLCB0aGlzLmlucHV0SW5wdXRIYW5kbGVyXyk7XG4gICAgICAgIFBPSU5URVJET1dOX0VWRU5UUy5mb3JFYWNoKGZ1bmN0aW9uIChldnRUeXBlKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgX3RoaXMuc2V0UG9pbnRlclhPZmZzZXRfKTtcbiAgICAgICAgfSk7XG4gICAgICAgIElOVEVSQUNUSU9OX0VWRU5UUy5mb3JFYWNoKGZ1bmN0aW9uIChldnRUeXBlKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVyVGV4dEZpZWxkSW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIF90aGlzLnRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcl8pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVyVmFsaWRhdGlvbkF0dHJpYnV0ZUNoYW5nZUhhbmRsZXIodGhpcy52YWxpZGF0aW9uT2JzZXJ2ZXJfKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdXNlciBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgVGV4dCBGaWVsZC5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVUZXh0RmllbGRJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5hdGl2ZUlucHV0ID0gdGhpcy5hZGFwdGVyXy5nZXROYXRpdmVJbnB1dCgpO1xuICAgICAgICBpZiAobmF0aXZlSW5wdXQgJiYgbmF0aXZlSW5wdXQuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlY2VpdmVkVXNlcklucHV0XyA9IHRydWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHZhbGlkYXRpb24gYXR0cmlidXRlIGNoYW5nZXNcbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZXNMaXN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGF0dHJpYnV0ZXNMaXN0LnNvbWUoZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgIGlmIChWQUxJREFUSU9OX0FUVFJfV0hJVEVMSVNULmluZGV4T2YoYXR0cmlidXRlTmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN0eWxlVmFsaWRpdHlfKHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNMaXN0LmluZGV4T2YoJ21heGxlbmd0aCcpID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hhcmFjdGVyQ291bnRlcl8odGhpcy5nZXRWYWx1ZSgpLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9wZW5zL2Nsb3NlcyB0aGUgbm90Y2hlZCBvdXRsaW5lLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLm5vdGNoT3V0bGluZSA9IGZ1bmN0aW9uIChvcGVuTm90Y2gpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFkYXB0ZXJfLmhhc091dGxpbmUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcGVuTm90Y2gpIHtcbiAgICAgICAgICAgIHZhciBsYWJlbFdpZHRoID0gdGhpcy5hZGFwdGVyXy5nZXRMYWJlbFdpZHRoKCkgKiBudW1iZXJzLkxBQkVMX1NDQUxFO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5ub3RjaE91dGxpbmUobGFiZWxXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLmNsb3NlT3V0bGluZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIHRleHQgZmllbGQgZm9jdXMgc3RhdGUuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuYWN0aXZhdGVGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0ZvY3VzZWRfID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdHlsZUZvY3VzZWRfKHRoaXMuaXNGb2N1c2VkXyk7XG4gICAgICAgIHRoaXMuYWRhcHRlcl8uYWN0aXZhdGVMaW5lUmlwcGxlKCk7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXJfLmhhc0xhYmVsKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm90Y2hPdXRsaW5lKHRoaXMuc2hvdWxkRmxvYXQpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5mbG9hdExhYmVsKHRoaXMuc2hvdWxkRmxvYXQpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZUZsb2F0aW5nXyh0aGlzLnNob3VsZEZsb2F0KTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlcl8uc2hha2VMYWJlbCh0aGlzLnNob3VsZFNoYWtlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oZWxwZXJUZXh0Xykge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXJUZXh0Xy5zaG93VG9TY3JlZW5SZWFkZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGluZSByaXBwbGUncyB0cmFuc2Zvcm0gb3JpZ2luLCBzbyB0aGF0IHRoZSBsaW5lIHJpcHBsZSBhY3RpdmF0ZVxuICAgICAqIGFuaW1hdGlvbiB3aWxsIGFuaW1hdGUgb3V0IGZyb20gdGhlIHVzZXIncyBjbGljayBsb2NhdGlvbi5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRUcmFuc2Zvcm1PcmlnaW4gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciB0b3VjaGVzID0gZXZ0LnRvdWNoZXM7XG4gICAgICAgIHZhciB0YXJnZXRFdmVudCA9IHRvdWNoZXMgPyB0b3VjaGVzWzBdIDogZXZ0O1xuICAgICAgICB2YXIgdGFyZ2V0Q2xpZW50UmVjdCA9IHRhcmdldEV2ZW50LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRYID0gdGFyZ2V0RXZlbnQuY2xpZW50WCAtIHRhcmdldENsaWVudFJlY3QubGVmdDtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5zZXRMaW5lUmlwcGxlVHJhbnNmb3JtT3JpZ2luKG5vcm1hbGl6ZWRYKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgaW5wdXQgY2hhbmdlIG9mIHRleHQgaW5wdXQgYW5kIHRleHQgYXJlYS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVJbnB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hdXRvQ29tcGxldGVGb2N1cygpO1xuICAgICAgICB0aGlzLnNldENoYXJhY3RlckNvdW50ZXJfKHRoaXMuZ2V0VmFsdWUoKS5sZW5ndGgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSBUZXh0IEZpZWxkJ3MgZm9jdXMgc3RhdGUgaW4gY2FzZXMgd2hlbiB0aGUgaW5wdXQgdmFsdWVcbiAgICAgKiBjaGFuZ2VzIHdpdGhvdXQgdXNlciBpbnB1dCAoZS5nLiBwcm9ncmFtbWF0aWNhbGx5KS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5hdXRvQ29tcGxldGVGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlY2VpdmVkVXNlcklucHV0Xykge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZUZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlYWN0aXZhdGVzIHRoZSBUZXh0IEZpZWxkJ3MgZm9jdXMgc3RhdGUuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzRm9jdXNlZF8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5kZWFjdGl2YXRlTGluZVJpcHBsZSgpO1xuICAgICAgICB2YXIgaXNWYWxpZCA9IHRoaXMuaXNWYWxpZCgpO1xuICAgICAgICB0aGlzLnN0eWxlVmFsaWRpdHlfKGlzVmFsaWQpO1xuICAgICAgICB0aGlzLnN0eWxlRm9jdXNlZF8odGhpcy5pc0ZvY3VzZWRfKTtcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlcl8uaGFzTGFiZWwoKSkge1xuICAgICAgICAgICAgdGhpcy5ub3RjaE91dGxpbmUodGhpcy5zaG91bGRGbG9hdCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLmZsb2F0TGFiZWwodGhpcy5zaG91bGRGbG9hdCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlRmxvYXRpbmdfKHRoaXMuc2hvdWxkRmxvYXQpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5zaGFrZUxhYmVsKHRoaXMuc2hvdWxkU2hha2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRGbG9hdCkge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlZFVzZXJJbnB1dF8gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUlucHV0XygpLnZhbHVlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgb24gdGhlIGlucHV0IEVsZW1lbnQuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gUHJldmVudCBTYWZhcmkgZnJvbSBtb3ZpbmcgdGhlIGNhcmV0IHRvIHRoZSBlbmQgb2YgdGhlIGlucHV0IHdoZW4gdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZC5cbiAgICAgICAgaWYgKHRoaXMuZ2V0VmFsdWUoKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0TmF0aXZlSW5wdXRfKCkudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldENoYXJhY3RlckNvdW50ZXJfKHZhbHVlLmxlbmd0aCk7XG4gICAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5pc1ZhbGlkKCk7XG4gICAgICAgIHRoaXMuc3R5bGVWYWxpZGl0eV8oaXNWYWxpZCk7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXJfLmhhc0xhYmVsKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm90Y2hPdXRsaW5lKHRoaXMuc2hvdWxkRmxvYXQpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5mbG9hdExhYmVsKHRoaXMuc2hvdWxkRmxvYXQpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZUZsb2F0aW5nXyh0aGlzLnNob3VsZEZsb2F0KTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlcl8uc2hha2VMYWJlbCh0aGlzLnNob3VsZFNoYWtlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgY3VzdG9tIHZhbGlkaXR5IHN0YXRlLCBpZiBzZXQ7IG90aGVyd2lzZSwgdGhlIHJlc3VsdCBvZiBhIG5hdGl2ZSB2YWxpZGl0eSBjaGVjay5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VOYXRpdmVWYWxpZGF0aW9uX1xuICAgICAgICAgICAgPyB0aGlzLmlzTmF0aXZlSW5wdXRWYWxpZF8oKSA6IHRoaXMuaXNWYWxpZF87XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gaXNWYWxpZCBTZXRzIHRoZSBjdXN0b20gdmFsaWRpdHkgc3RhdGUgb2YgdGhlIFRleHQgRmllbGQuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VmFsaWQgPSBmdW5jdGlvbiAoaXNWYWxpZCkge1xuICAgICAgICB0aGlzLmlzVmFsaWRfID0gaXNWYWxpZDtcbiAgICAgICAgdGhpcy5zdHlsZVZhbGlkaXR5Xyhpc1ZhbGlkKTtcbiAgICAgICAgdmFyIHNob3VsZFNoYWtlID0gIWlzVmFsaWQgJiYgIXRoaXMuaXNGb2N1c2VkXyAmJiAhIXRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlcl8uaGFzTGFiZWwoKSkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5zaGFrZUxhYmVsKHNob3VsZFNoYWtlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgdXNlIG9mIG5hdGl2ZSB2YWxpZGF0aW9uLiBVc2UgdGhpcyBmb3IgY3VzdG9tIHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHVzZU5hdGl2ZVZhbGlkYXRpb24gU2V0IHRoaXMgdG8gZmFsc2UgdG8gaWdub3JlIG5hdGl2ZSBpbnB1dCB2YWxpZGF0aW9uLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFVzZU5hdGl2ZVZhbGlkYXRpb24gPSBmdW5jdGlvbiAodXNlTmF0aXZlVmFsaWRhdGlvbikge1xuICAgICAgICB0aGlzLnVzZU5hdGl2ZVZhbGlkYXRpb25fID0gdXNlTmF0aXZlVmFsaWRhdGlvbjtcbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmlzRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUlucHV0XygpLmRpc2FibGVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRpc2FibGVkIFNldHMgdGhlIHRleHQtZmllbGQgZGlzYWJsZWQgb3IgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXREaXNhYmxlZCA9IGZ1bmN0aW9uIChkaXNhYmxlZCkge1xuICAgICAgICB0aGlzLmdldE5hdGl2ZUlucHV0XygpLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIHRoaXMuc3R5bGVEaXNhYmxlZF8oZGlzYWJsZWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbnRlbnQgU2V0cyB0aGUgY29udGVudCBvZiB0aGUgaGVscGVyIHRleHQuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0SGVscGVyVGV4dENvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAodGhpcy5oZWxwZXJUZXh0Xykge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXJUZXh0Xy5zZXRDb250ZW50KGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhcmlhIGxhYmVsIG9mIHRoZSBsZWFkaW5nIGljb24uXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0TGVhZGluZ0ljb25BcmlhTGFiZWwgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgaWYgKHRoaXMubGVhZGluZ0ljb25fKSB7XG4gICAgICAgICAgICB0aGlzLmxlYWRpbmdJY29uXy5zZXRBcmlhTGFiZWwobGFiZWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGxlYWRpbmcgaWNvbi5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRMZWFkaW5nSWNvbkNvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAodGhpcy5sZWFkaW5nSWNvbl8pIHtcbiAgICAgICAgICAgIHRoaXMubGVhZGluZ0ljb25fLnNldENvbnRlbnQoY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFyaWEgbGFiZWwgb2YgdGhlIHRyYWlsaW5nIGljb24uXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VHJhaWxpbmdJY29uQXJpYUxhYmVsID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWlsaW5nSWNvbl8pIHtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdJY29uXy5zZXRBcmlhTGFiZWwobGFiZWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHRyYWlsaW5nIGljb24uXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VHJhaWxpbmdJY29uQ29udGVudCA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWlsaW5nSWNvbl8pIHtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdJY29uXy5zZXRDb250ZW50KGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIGNoYXJhY3RlciBjb3VudGVyIHZhbHVlcyB0aGF0IHNob3dzIGNoYXJhY3RlcnMgdXNlZCBhbmQgdGhlIHRvdGFsIGNoYXJhY3RlciBsaW1pdC5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRDaGFyYWN0ZXJDb3VudGVyXyA9IGZ1bmN0aW9uIChjdXJyZW50TGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGFyYWN0ZXJDb3VudGVyXykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXhMZW5ndGggPSB0aGlzLmdldE5hdGl2ZUlucHV0XygpLm1heExlbmd0aDtcbiAgICAgICAgaWYgKG1heExlbmd0aCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTURDVGV4dEZpZWxkRm91bmRhdGlvbjogRXhwZWN0ZWQgbWF4bGVuZ3RoIGh0bWwgcHJvcGVydHkgb24gdGV4dCBpbnB1dCBvciB0ZXh0YXJlYS4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYXJhY3RlckNvdW50ZXJfLnNldENvdW50ZXJWYWx1ZShjdXJyZW50TGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBUZXh0IEZpZWxkIGlucHV0IGZhaWxzIGluIGNvbnZlcnRpbmcgdGhlIHVzZXItc3VwcGxpZWQgdmFsdWUuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuaXNCYWRJbnB1dF8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBiYWRJbnB1dCBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkIGluIElFIDExIPCfkqkuXG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUlucHV0XygpLnZhbGlkaXR5LmJhZElucHV0IHx8IGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgcmVzdWx0IG9mIG5hdGl2ZSB2YWxpZGl0eSBjaGVja2luZyAoVmFsaWRpdHlTdGF0ZS52YWxpZCkuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuaXNOYXRpdmVJbnB1dFZhbGlkXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmF0aXZlSW5wdXRfKCkudmFsaWRpdHkudmFsaWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHlsZXMgdGhlIGNvbXBvbmVudCBiYXNlZCBvbiB0aGUgdmFsaWRpdHkgc3RhdGUuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc3R5bGVWYWxpZGl0eV8gPSBmdW5jdGlvbiAoaXNWYWxpZCkge1xuICAgICAgICB2YXIgSU5WQUxJRCA9IE1EQ1RleHRGaWVsZEZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5JTlZBTElEO1xuICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhJTlZBTElEKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoSU5WQUxJRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVscGVyVGV4dF8pIHtcbiAgICAgICAgICAgIHRoaXMuaGVscGVyVGV4dF8uc2V0VmFsaWRpdHkoaXNWYWxpZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0eWxlcyB0aGUgY29tcG9uZW50IGJhc2VkIG9uIHRoZSBmb2N1c2VkIHN0YXRlLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnN0eWxlRm9jdXNlZF8gPSBmdW5jdGlvbiAoaXNGb2N1c2VkKSB7XG4gICAgICAgIHZhciBGT0NVU0VEID0gTURDVGV4dEZpZWxkRm91bmRhdGlvbi5jc3NDbGFzc2VzLkZPQ1VTRUQ7XG4gICAgICAgIGlmIChpc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoRk9DVVNFRCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKEZPQ1VTRUQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHlsZXMgdGhlIGNvbXBvbmVudCBiYXNlZCBvbiB0aGUgZGlzYWJsZWQgc3RhdGUuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc3R5bGVEaXNhYmxlZF8gPSBmdW5jdGlvbiAoaXNEaXNhYmxlZCkge1xuICAgICAgICB2YXIgX2EgPSBNRENUZXh0RmllbGRGb3VuZGF0aW9uLmNzc0NsYXNzZXMsIERJU0FCTEVEID0gX2EuRElTQUJMRUQsIElOVkFMSUQgPSBfYS5JTlZBTElEO1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhESVNBQkxFRCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKElOVkFMSUQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhESVNBQkxFRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGVhZGluZ0ljb25fKSB7XG4gICAgICAgICAgICB0aGlzLmxlYWRpbmdJY29uXy5zZXREaXNhYmxlZChpc0Rpc2FibGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50cmFpbGluZ0ljb25fKSB7XG4gICAgICAgICAgICB0aGlzLnRyYWlsaW5nSWNvbl8uc2V0RGlzYWJsZWQoaXNEaXNhYmxlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0eWxlcyB0aGUgY29tcG9uZW50IGJhc2VkIG9uIHRoZSBsYWJlbCBmbG9hdGluZyBzdGF0ZS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zdHlsZUZsb2F0aW5nXyA9IGZ1bmN0aW9uIChpc0Zsb2F0aW5nKSB7XG4gICAgICAgIHZhciBMQUJFTF9GTE9BVElORyA9IE1EQ1RleHRGaWVsZEZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5MQUJFTF9GTE9BVElORztcbiAgICAgICAgaWYgKGlzRmxvYXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTEFCRUxfRkxPQVRJTkcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhMQUJFTF9GTE9BVElORyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gVGhlIG5hdGl2ZSB0ZXh0IGlucHV0IGVsZW1lbnQgZnJvbSB0aGUgaG9zdCBlbnZpcm9ubWVudCwgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgZm9yIHVuaXQgdGVzdHMuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0TmF0aXZlSW5wdXRfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyB0aGlzLmFkYXB0ZXJfIG1heSBiZSB1bmRlZmluZWQgaW4gZm91bmRhdGlvbiB1bml0IHRlc3RzLiBUaGlzIGhhcHBlbnMgd2hlbiB0ZXN0ZG91YmxlIGlzIGNyZWF0aW5nIGEgbW9jayBvYmplY3RcbiAgICAgICAgLy8gYW5kIGludm9rZXMgdGhlIHNob3VsZFNoYWtlL3Nob3VsZEZsb2F0IGdldHRlcnMgKHdoaWNoIGluIHR1cm4gY2FsbCBnZXRWYWx1ZSgpLCB3aGljaCBjYWxscyB0aGlzIG1ldGhvZCkgYmVmb3JlXG4gICAgICAgIC8vIGluaXQoKSBoYXMgYmVlbiBjYWxsZWQgZnJvbSB0aGUgTURDVGV4dEZpZWxkIGNvbnN0cnVjdG9yLiBUbyB3b3JrIGFyb3VuZCB0aGF0IGlzc3VlLCB3ZSByZXR1cm4gYSBkdW1teSBvYmplY3QuXG4gICAgICAgIHZhciBuYXRpdmVJbnB1dCA9IHRoaXMuYWRhcHRlcl8gPyB0aGlzLmFkYXB0ZXJfLmdldE5hdGl2ZUlucHV0KCkgOiBudWxsO1xuICAgICAgICByZXR1cm4gbmF0aXZlSW5wdXQgfHwge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbWF4TGVuZ3RoOiAtMSxcbiAgICAgICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICB2YWxpZGl0eToge1xuICAgICAgICAgICAgICAgIGJhZElucHV0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2YWxpZDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gTURDVGV4dEZpZWxkRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDVGV4dEZpZWxkRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RleHRGaWVsZEZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IEF0dHJpYnV0ZVBhcnQsIGRpcmVjdGl2ZSwgUHJvcGVydHlQYXJ0IH0gZnJvbSAnLi4vbGl0LWh0bWwuanMnO1xuLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgY2xhc3NMaXN0IG9uIFNWRyBlbGVtZW50cywgc28gd2UgZW11bGF0ZSBpdCB3aXRoIGEgU2V0XG5jbGFzcyBDbGFzc0xpc3Qge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jbGFzc2VzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgY29uc3QgY2xhc3NMaXN0ID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBmb3IgKGNvbnN0IGNscyBvZiBjbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2xhc3Nlcy5hZGQoY2xzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGQoY2xzKSB7XG4gICAgICAgIHRoaXMuY2xhc3Nlcy5hZGQoY2xzKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmVtb3ZlKGNscykge1xuICAgICAgICB0aGlzLmNsYXNzZXMuZGVsZXRlKGNscyk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhbmdlZCkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyaW5nID0gJyc7XG4gICAgICAgICAgICB0aGlzLmNsYXNzZXMuZm9yRWFjaCgoY2xzKSA9PiBjbGFzc1N0cmluZyArPSBjbHMgKyAnICcpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc1N0cmluZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgQ2xhc3NJbmZvIG9iamVjdCBhcHBsaWVkIHRvIGEgZ2l2ZW4gQXR0cmlidXRlUGFydC5cbiAqIFVzZWQgdG8gdW5zZXQgZXhpc3RpbmcgdmFsdWVzIHdoZW4gYSBuZXcgQ2xhc3NJbmZvIG9iamVjdCBpcyBhcHBsaWVkLlxuICovXG5jb25zdCBwcmV2aW91c0NsYXNzZXNDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHRoYXQgYXBwbGllcyBDU1MgY2xhc3Nlcy4gVGhpcyBtdXN0IGJlIHVzZWQgaW4gdGhlIGBjbGFzc2BcbiAqIGF0dHJpYnV0ZSBhbmQgbXVzdCBiZSB0aGUgb25seSBwYXJ0IHVzZWQgaW4gdGhlIGF0dHJpYnV0ZS4gSXQgdGFrZXMgZWFjaFxuICogcHJvcGVydHkgaW4gdGhlIGBjbGFzc0luZm9gIGFyZ3VtZW50IGFuZCBhZGRzIHRoZSBwcm9wZXJ0eSBuYW1lIHRvIHRoZVxuICogZWxlbWVudCdzIGBjbGFzc2AgaWYgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHRydXRoeTsgaWYgdGhlIHByb3BlcnR5IHZhbHVlIGlzXG4gKiBmYWxzZXksIHRoZSBwcm9wZXJ0eSBuYW1lIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCdzIGBjbGFzc2AuIEZvciBleGFtcGxlXG4gKiBge2ZvbzogYmFyfWAgYXBwbGllcyB0aGUgY2xhc3MgYGZvb2AgaWYgdGhlIHZhbHVlIG9mIGBiYXJgIGlzIHRydXRoeS5cbiAqIEBwYXJhbSBjbGFzc0luZm8ge0NsYXNzSW5mb31cbiAqL1xuZXhwb3J0IGNvbnN0IGNsYXNzTWFwID0gZGlyZWN0aXZlKChjbGFzc0luZm8pID0+IChwYXJ0KSA9PiB7XG4gICAgaWYgKCEocGFydCBpbnN0YW5jZW9mIEF0dHJpYnV0ZVBhcnQpIHx8IChwYXJ0IGluc3RhbmNlb2YgUHJvcGVydHlQYXJ0KSB8fFxuICAgICAgICBwYXJ0LmNvbW1pdHRlci5uYW1lICE9PSAnY2xhc3MnIHx8IHBhcnQuY29tbWl0dGVyLnBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYGNsYXNzTWFwYCBkaXJlY3RpdmUgbXVzdCBiZSB1c2VkIGluIHRoZSBgY2xhc3NgIGF0dHJpYnV0ZSAnICtcbiAgICAgICAgICAgICdhbmQgbXVzdCBiZSB0aGUgb25seSBwYXJ0IGluIHRoZSBhdHRyaWJ1dGUuJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgY29tbWl0dGVyIH0gPSBwYXJ0O1xuICAgIGNvbnN0IHsgZWxlbWVudCB9ID0gY29tbWl0dGVyO1xuICAgIGxldCBwcmV2aW91c0NsYXNzZXMgPSBwcmV2aW91c0NsYXNzZXNDYWNoZS5nZXQocGFydCk7XG4gICAgaWYgKHByZXZpb3VzQ2xhc3NlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFdyaXRlIHN0YXRpYyBjbGFzc2VzIG9uY2VcbiAgICAgICAgLy8gVXNlIHNldEF0dHJpYnV0ZSgpIGJlY2F1c2UgY2xhc3NOYW1lIGlzbid0IGEgc3RyaW5nIG9uIFNWRyBlbGVtZW50c1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjb21taXR0ZXIuc3RyaW5ncy5qb2luKCcgJykpO1xuICAgICAgICBwcmV2aW91c0NsYXNzZXNDYWNoZS5zZXQocGFydCwgcHJldmlvdXNDbGFzc2VzID0gbmV3IFNldCgpKTtcbiAgICB9XG4gICAgY29uc3QgY2xhc3NMaXN0ID0gKGVsZW1lbnQuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3QoZWxlbWVudCkpO1xuICAgIC8vIFJlbW92ZSBvbGQgY2xhc3NlcyB0aGF0IG5vIGxvbmdlciBhcHBseVxuICAgIC8vIFdlIHVzZSBmb3JFYWNoKCkgaW5zdGVhZCBvZiBmb3Itb2Ygc28gdGhhdCByZSBkb24ndCByZXF1aXJlIGRvd24tbGV2ZWxcbiAgICAvLyBpdGVyYXRpb24uXG4gICAgcHJldmlvdXNDbGFzc2VzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgaWYgKCEobmFtZSBpbiBjbGFzc0luZm8pKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKG5hbWUpO1xuICAgICAgICAgICAgcHJldmlvdXNDbGFzc2VzLmRlbGV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFkZCBvciByZW1vdmUgY2xhc3NlcyBiYXNlZCBvbiB0aGVpciBjbGFzc01hcCB2YWx1ZVxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBjbGFzc0luZm8pIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjbGFzc0luZm9bbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSAhPSBwcmV2aW91c0NsYXNzZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAvLyBXZSBleHBsaWNpdGx5IHdhbnQgYSBsb29zZSB0cnV0aHkgY2hlY2sgb2YgYHZhbHVlYCBiZWNhdXNlIGl0IHNlZW1zXG4gICAgICAgICAgICAvLyBtb3JlIGNvbnZlbmllbnQgdGhhdCAnJyBhbmQgMCBhcmUgc2tpcHBlZC5cbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQobmFtZSk7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNDbGFzc2VzLmFkZChuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNDbGFzc2VzLmRlbGV0ZShuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNsYXNzTGlzdC5jb21taXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2xhc3NMaXN0LmNvbW1pdCgpO1xuICAgIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xhc3MtbWFwLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IEF0dHJpYnV0ZVBhcnQsIGRpcmVjdGl2ZSB9IGZyb20gJy4uL2xpdC1odG1sLmpzJztcbmNvbnN0IHByZXZpb3VzVmFsdWVzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogRm9yIEF0dHJpYnV0ZVBhcnRzLCBzZXRzIHRoZSBhdHRyaWJ1dGUgaWYgdGhlIHZhbHVlIGlzIGRlZmluZWQgYW5kIHJlbW92ZXNcbiAqIHRoZSBhdHRyaWJ1dGUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZC5cbiAqXG4gKiBGb3Igb3RoZXIgcGFydCB0eXBlcywgdGhpcyBkaXJlY3RpdmUgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlmRGVmaW5lZCA9IGRpcmVjdGl2ZSgodmFsdWUpID0+IChwYXJ0KSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVmFsdWVzLmdldChwYXJ0KTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBwYXJ0IGluc3RhbmNlb2YgQXR0cmlidXRlUGFydCkge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCByZW1vdmUgdGhlIGF0dHJpYnV0ZSwgYnV0IG9ubHkgaWYgdGhlIHZhbHVlXG4gICAgICAgIC8vIHdhcyBwcmV2aW91c2x5IGRlZmluZWQuXG4gICAgICAgIGlmIChwcmV2aW91c1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgIXByZXZpb3VzVmFsdWVzLmhhcyhwYXJ0KSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHBhcnQuY29tbWl0dGVyLm5hbWU7XG4gICAgICAgICAgICBwYXJ0LmNvbW1pdHRlci5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICBwYXJ0LnNldFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgcHJldmlvdXNWYWx1ZXMuc2V0KHBhcnQsIHZhbHVlKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWYtZGVmaW5lZC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIFJPT1Q6ICdtZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcicsXG59O1xudmFyIHN0cmluZ3MgPSB7XG4gICAgUk9PVF9TRUxFQ1RPUjogXCIuXCIgKyBjc3NDbGFzc2VzLlJPT1QsXG59O1xuZXhwb3J0IHsgc3RyaW5ncywgY3NzQ2xhc3NlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG52YXIgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgdHNsaWJfMS5fX2Fzc2lnbih7fSwgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIsIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlZSB7QGxpbmsgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckFkYXB0ZXJ9IGZvciB0eXBpbmcgaW5mb3JtYXRpb24gb24gcGFyYW1ldGVycyBhbmQgcmV0dXJuIHR5cGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRDb3VudGVyVmFsdWUgPSBmdW5jdGlvbiAoY3VycmVudExlbmd0aCwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIGN1cnJlbnRMZW5ndGggPSBNYXRoLm1pbihjdXJyZW50TGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLnNldENvbnRlbnQoY3VycmVudExlbmd0aCArIFwiIC8gXCIgKyBtYXhMZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJGb3VuZGF0aW9uO1xufShNRENGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC90ZXh0ZmllbGQvY2hhcmFjdGVyLWNvdW50ZXIvZm91bmRhdGlvbi5qcyc7XG5pbXBvcnQgeyBkaXJlY3RpdmUgfSBmcm9tICdsaXQtaHRtbCc7XG5jb25zdCBjcmVhdGVBZGFwdGVyID0gKGhvc3RFbGVtZW50KSA9PiB7XG4gICAgcmV0dXJuIHsgc2V0Q29udGVudDogKGNvbnRlbnQpID0+IGhvc3RFbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudCB9O1xufTtcbmNvbnN0IHBhcnRUb0ZvdW5kYXRpb25NYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGNvbnN0IGNoYXJhY3RlckNvdW50ZXIgPSBkaXJlY3RpdmUoKCkgPT4gKHBhcnQpID0+IHtcbiAgICBjb25zdCBsYXN0Rm91bmRhdGlvbiA9IHBhcnRUb0ZvdW5kYXRpb25NYXAuZ2V0KHBhcnQpO1xuICAgIGlmICghbGFzdEZvdW5kYXRpb24pIHtcbiAgICAgICAgY29uc3QgaG9zdEVsZW1lbnQgPSBwYXJ0LmNvbW1pdHRlci5lbGVtZW50O1xuICAgICAgICBob3N0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcicpO1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gY3JlYXRlQWRhcHRlcihob3N0RWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGZvdW5kYXRpb24gPSBuZXcgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgICAgIGZvdW5kYXRpb24uaW5pdCgpO1xuICAgICAgICBwYXJ0LnNldFZhbHVlKGZvdW5kYXRpb24pO1xuICAgICAgICBwYXJ0VG9Gb3VuZGF0aW9uTWFwLnNldChwYXJ0LCBmb3VuZGF0aW9uKTtcbiAgICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW13Yy1jaGFyYWN0ZXItY291bnRlci1kaXJlY3RpdmUuanMubWFwIiwiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuaW1wb3J0ICdAbWF0ZXJpYWwvbXdjLW5vdGNoZWQtb3V0bGluZSc7XG5pbXBvcnQgeyBhZGRIYXNSZW1vdmVDbGFzcywgRm9ybUVsZW1lbnQgfSBmcm9tICdAbWF0ZXJpYWwvbXdjLWJhc2UvZm9ybS1lbGVtZW50LmpzJztcbmltcG9ydCB7IGZsb2F0aW5nTGFiZWwgfSBmcm9tICdAbWF0ZXJpYWwvbXdjLWZsb2F0aW5nLWxhYmVsJztcbmltcG9ydCB7IGxpbmVSaXBwbGUgfSBmcm9tICdAbWF0ZXJpYWwvbXdjLWxpbmUtcmlwcGxlJztcbmltcG9ydCBNRENUZXh0RmllbGRGb3VuZGF0aW9uIGZyb20gJ0BtYXRlcmlhbC90ZXh0ZmllbGQvZm91bmRhdGlvbi5qcyc7XG5pbXBvcnQgeyBldmVudE9wdGlvbnMsIGh0bWwsIHByb3BlcnR5LCBxdWVyeSB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IGNsYXNzTWFwIH0gZnJvbSAnbGl0LWh0bWwvZGlyZWN0aXZlcy9jbGFzcy1tYXAuanMnO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSAnbGl0LWh0bWwvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzJztcbmltcG9ydCB7IGNoYXJhY3RlckNvdW50ZXIgfSBmcm9tICcuL213Yy1jaGFyYWN0ZXItY291bnRlci1kaXJlY3RpdmUuanMnO1xuY29uc3QgcGFzc2l2ZUV2ZW50cyA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAnc2Nyb2xsJywgJ21vdXNld2hlZWwnXTtcbmNvbnN0IGNyZWF0ZVZhbGlkaXR5T2JqID0gKGN1c3RvbVZhbGlkaXR5ID0ge30pID0+IHtcbiAgICAvKlxuICAgICAqIFdlIG5lZWQgdG8gbWFrZSBWYWxpZGl0eVN0YXRlIGFuIG9iamVjdCBiZWNhdXNlIGl0IGlzIHJlYWRvbmx5IGFuZFxuICAgICAqIHdlIGNhbm5vdCB1c2UgdGhlIHNwcmVhZCBvcGVyYXRvci4gQWxzbywgd2UgZG9uJ3QgZXhwb3J0XG4gICAgICogYEN1c3RvbVZhbGlkaXR5U3RhdGVgIGJlY2F1c2UgaXQgaXMgYSBsZWFreSBpbXBsZW1lbnRhdGlvbiBhbmQgdGhlIHVzZXJcbiAgICAgKiBhbHJlYWR5IGhhcyBhY2Nlc3MgdG8gYFZhbGlkaXR5U3RhdGVgIGluIGxpYi5kb20udHMuIEFsc28gYW4gaW50ZXJmYWNlXG4gICAgICoge2E6IFR5cGV9IGNhbiBiZSBjYXN0ZWQgdG8ge3JlYWRvbmx5IGE6IFR5cGV9IHNvIHBhc3NpbmcgYW55IG9iamVjdFxuICAgICAqIHNob3VsZCBiZSBmaW5lLlxuICAgICAqL1xuICAgIGNvbnN0IG9iamVjdGlmaWVkQ3VzdG9tVmFsaWRpdHkgPSB7fTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiBjdXN0b21WYWxpZGl0eSkge1xuICAgICAgICAvKlxuICAgICAgICAgKiBDYXN0aW5nIGlzIG5lZWRlZCBiZWNhdXNlIFZhbGlkaXR5U3RhdGUncyBwcm9wcyBhcmUgYWxsIHJlYWRvbmx5IGFuZFxuICAgICAgICAgKiB0aHVzIGNhbm5vdCBiZSBzZXQgb24gYG9uamVjdGlmaWVkQ3VzdG9tVmFsaWRpdHlgLiBJbiB0aGUgZW5kLCB0aGVcbiAgICAgICAgICogaW50ZXJmYWNlIGlzIHRoZSBzYW1lIGFzIFZhbGlkaXR5U3RhdGUgKGJ1dCBub3QgcmVhZG9ubHkpLCBidXQgdGhlXG4gICAgICAgICAqIGZ1bmN0aW9uIHNpZ25hdHVyZSBjYXN0cyB0aGUgb3V0cHV0IHRvIFZhbGlkaXR5U3RhdGUgKHRodXMgcmVhZG9ubHkpLlxuICAgICAgICAgKi9cbiAgICAgICAgb2JqZWN0aWZpZWRDdXN0b21WYWxpZGl0eVtwcm9wTmFtZV0gPVxuICAgICAgICAgICAgY3VzdG9tVmFsaWRpdHlbcHJvcE5hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IGJhZElucHV0OiBmYWxzZSwgY3VzdG9tRXJyb3I6IGZhbHNlLCBwYXR0ZXJuTWlzbWF0Y2g6IGZhbHNlLCByYW5nZU92ZXJmbG93OiBmYWxzZSwgcmFuZ2VVbmRlcmZsb3c6IGZhbHNlLCBzdGVwTWlzbWF0Y2g6IGZhbHNlLCB0b29Mb25nOiBmYWxzZSwgdG9vU2hvcnQ6IGZhbHNlLCB0eXBlTWlzbWF0Y2g6IGZhbHNlLCB2YWxpZDogdHJ1ZSwgdmFsdWVNaXNzaW5nOiBmYWxzZSB9LCBvYmplY3RpZmllZEN1c3RvbVZhbGlkaXR5KTtcbn07XG5leHBvcnQgY2xhc3MgVGV4dEZpZWxkQmFzZSBleHRlbmRzIEZvcm1FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uQ2xhc3MgPSBNRENUZXh0RmllbGRGb3VuZGF0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgICAgIHRoaXMudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9ICcnO1xuICAgICAgICB0aGlzLmxhYmVsID0gJyc7XG4gICAgICAgIHRoaXMuaWNvbiA9ICcnO1xuICAgICAgICB0aGlzLmljb25UcmFpbGluZyA9ICcnO1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tYXhMZW5ndGggPSAtMTtcbiAgICAgICAgdGhpcy5vdXRsaW5lZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZ1bGxXaWR0aCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhlbHBlciA9ICcnO1xuICAgICAgICB0aGlzLnZhbGlkYXRlT25Jbml0aWFsUmVuZGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2UgPSAnJztcbiAgICAgICAgdGhpcy5hdXRvVmFsaWRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wYXR0ZXJuID0gJyc7XG4gICAgICAgIHRoaXMubWluID0gJyc7XG4gICAgICAgIHRoaXMubWF4ID0gJyc7XG4gICAgICAgIHRoaXMuc3RlcCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVscGVyUGVyc2lzdGVudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJDb3VudGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW5kQWxpZ25lZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlYWRPbmx5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3V0bGluZU9wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vdXRsaW5lV2lkdGggPSAwO1xuICAgICAgICB0aGlzLmlzVWlWYWxpZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3ZhbGlkaXR5ID0gY3JlYXRlVmFsaWRpdHlPYmooKTtcbiAgICAgICAgdGhpcy5fb3V0bGluZVVwZGF0ZUNvbXBsZXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdmFsdWVTZXRPbklucHV0RXZlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52YWxpZGl0eVRyYW5zZm9ybSA9IG51bGw7XG4gICAgfVxuICAgIGdldCB2YWxpZGl0eSgpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tWYWxpZGl0eSh0aGlzLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkaXR5O1xuICAgIH1cbiAgICBnZXQgd2lsbFZhbGlkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtRWxlbWVudC53aWxsVmFsaWRhdGU7XG4gICAgfVxuICAgIGdldCBzZWxlY3Rpb25TdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybUVsZW1lbnQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgfVxuICAgIGdldCBzZWxlY3Rpb25FbmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1FbGVtZW50LnNlbGVjdGlvbkVuZDtcbiAgICB9XG4gICAgZ2V0IHNob3VsZFJlbmRlckhlbHBlclRleHQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuaGVscGVyIHx8ICEhdGhpcy52YWxpZGF0aW9uTWVzc2FnZSB8fCB0aGlzLmNoYXJDb3VudGVyVmlzaWJsZTtcbiAgICB9XG4gICAgZ2V0IGNoYXJDb3VudGVyVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhckNvdW50ZXIgJiYgdGhpcy5tYXhMZW5ndGggIT09IC0xO1xuICAgIH1cbiAgICBmb2N1cygpIHtcbiAgICAgICAgY29uc3QgZm9jdXNFdnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJyk7XG4gICAgICAgIHRoaXMuZm9ybUVsZW1lbnQuZGlzcGF0Y2hFdmVudChmb2N1c0V2dCk7XG4gICAgICAgIHRoaXMuZm9ybUVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgYmx1cigpIHtcbiAgICAgICAgY29uc3QgYmx1ckV2dCA9IG5ldyBDdXN0b21FdmVudCgnYmx1cicpO1xuICAgICAgICB0aGlzLmZvcm1FbGVtZW50LmRpc3BhdGNoRXZlbnQoYmx1ckV2dCk7XG4gICAgICAgIHRoaXMuZm9ybUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgICBzZWxlY3QoKSB7XG4gICAgICAgIHRoaXMuZm9ybUVsZW1lbnQuc2VsZWN0KCk7XG4gICAgfVxuICAgIHNldFNlbGVjdGlvblJhbmdlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQsIHNlbGVjdGlvbkRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmZvcm1FbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQsIHNlbGVjdGlvbkRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgICAgICAgICdtZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkLFxuICAgICAgICAgICAgJ21kYy10ZXh0LWZpZWxkLS1uby1sYWJlbCc6ICF0aGlzLmxhYmVsLFxuICAgICAgICAgICAgJ21kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCc6IHRoaXMub3V0bGluZWQsXG4gICAgICAgICAgICAnbWRjLXRleHQtZmllbGQtLWZ1bGx3aWR0aCc6IHRoaXMuZnVsbFdpZHRoLFxuICAgICAgICAgICAgJ21kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbic6IHRoaXMuaWNvbixcbiAgICAgICAgICAgICdtZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uJzogdGhpcy5pY29uVHJhaWxpbmcsXG4gICAgICAgICAgICAnbWRjLXRleHQtZmllbGQtLWVuZC1hbGlnbmVkJzogdGhpcy5lbmRBbGlnbmVkLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByaXBwbGUgPSAhdGhpcy5vdXRsaW5lZCA/IGh0bWwgYDxkaXYgY2xhc3M9XCJtZGMtdGV4dC1maWVsZF9fcmlwcGxlXCI+PC9kaXY+YCA6ICcnO1xuICAgICAgICByZXR1cm4gaHRtbCBgXG4gICAgICA8bGFiZWwgY2xhc3M9XCJtZGMtdGV4dC1maWVsZCAke2NsYXNzTWFwKGNsYXNzZXMpfVwiPlxuICAgICAgICAke3JpcHBsZX1cbiAgICAgICAgJHt0aGlzLmljb24gPyB0aGlzLnJlbmRlckljb24odGhpcy5pY29uKSA6ICcnfVxuICAgICAgICAke3RoaXMucmVuZGVySW5wdXQoKX1cbiAgICAgICAgJHt0aGlzLmljb25UcmFpbGluZyA/IHRoaXMucmVuZGVySWNvbih0aGlzLmljb25UcmFpbGluZywgdHJ1ZSkgOiAnJ31cbiAgICAgICAgJHt0aGlzLm91dGxpbmVkID8gdGhpcy5yZW5kZXJPdXRsaW5lZCgpIDogdGhpcy5yZW5kZXJMYWJlbFRleHQoKX1cbiAgICAgIDwvbGFiZWw+XG4gICAgICAke3RoaXMucmVuZGVySGVscGVyVGV4dCh0aGlzLnJlbmRlckNoYXJDb3VudGVyKCkpfVxuICAgIGA7XG4gICAgfVxuICAgIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICAgICAgY29uc3QgbWF4TGVuZ3RoID0gY2hhbmdlZFByb3BlcnRpZXMuZ2V0KCdtYXhMZW5ndGgnKTtcbiAgICAgICAgY29uc3QgbWF4TGVuZ3RoQmVjYW1lRGVmaW5lZCA9IG1heExlbmd0aCA9PT0gLTEgJiYgdGhpcy5tYXhMZW5ndGggIT09IC0xO1xuICAgICAgICBjb25zdCBtYXhMZW5ndGhCZWNhbWVVbmRlZmluZWQgPSBtYXhMZW5ndGggIT09IHVuZGVmaW5lZCAmJiBtYXhMZW5ndGggIT09IC0xICYmIHRoaXMubWF4TGVuZ3RoID09PSAtMTtcbiAgICAgICAgLyogV2Ugd2FudCB0byByZWNyZWF0ZSB0aGUgZm91bmRhdGlvbiBpZiBtYXhMZW5ndGggY2hhbmdlcyB0byBkZWZpbmVkIG9yXG4gICAgICAgICAqIHVuZGVmaW5lZCwgYmVjYXVzZSB0aGUgdGV4dGZpZWxkIGZvdW5kYXRpb24gbmVlZHMgdG8gYmUgaW5zdGFudGlhdGVkIHdpdGhcbiAgICAgICAgICogdGhlIGNoYXIgY291bnRlcidzIGZvdW5kYXRpb24sIGFuZCB0aGUgY2hhciBjb3VudGVyJ3MgZm91bmRhdGlvbiBuZWVkc1xuICAgICAgICAgKiB0byBoYXZlIG1heExlbmd0aCBkZWZpbmVkIHRvIGJlIGluc3RhbnRpYXRlZC4gQWRkaXRpb25hbGx5LCB0aGVyZSBpcyBub1xuICAgICAgICAgKiBleHBvc2VkIEFQSSBvbiB0aGUgTWRjVGV4dEZpZWxkRm91bmRhdGlvbiB0byBkeW5hbWljYWxseSBhZGQgYSBjaGFyXG4gICAgICAgICAqIGNvdW50ZXIgZm91bmRhdGlvbiwgc28gd2UgbXVzdCByZWNyZWF0ZSBpdC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChtYXhMZW5ndGhCZWNhbWVEZWZpbmVkIHx8IG1heExlbmd0aEJlY2FtZVVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVGb3VuZGF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygndmFsdWUnKSAmJlxuICAgICAgICAgICAgY2hhbmdlZFByb3BlcnRpZXMuZ2V0KCd2YWx1ZScpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWRjRm91bmRhdGlvbi5zZXRWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJJbnB1dCgpIHtcbiAgICAgICAgY29uc3QgbWF4T3JVbmRlZiA9IHRoaXMubWF4TGVuZ3RoID09PSAtMSA/IHVuZGVmaW5lZCA6IHRoaXMubWF4TGVuZ3RoO1xuICAgICAgICByZXR1cm4gaHRtbCBgXG4gICAgICA8aW5wdXRcbiAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJsYWJlbFwiXG4gICAgICAgICAgY2xhc3M9XCJtZGMtdGV4dC1maWVsZF9faW5wdXRcIlxuICAgICAgICAgIHR5cGU9XCIke3RoaXMudHlwZX1cIlxuICAgICAgICAgIC52YWx1ZT1cIiR7dGhpcy52YWx1ZX1cIlxuICAgICAgICAgID9kaXNhYmxlZD1cIiR7dGhpcy5kaXNhYmxlZH1cIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJHt0aGlzLnBsYWNlaG9sZGVyfVwiXG4gICAgICAgICAgP3JlcXVpcmVkPVwiJHt0aGlzLnJlcXVpcmVkfVwiXG4gICAgICAgICAgP3JlYWRvbmx5PVwiJHt0aGlzLnJlYWRPbmx5fVwiXG4gICAgICAgICAgbWF4bGVuZ3RoPVwiJHtpZkRlZmluZWQobWF4T3JVbmRlZil9XCJcbiAgICAgICAgICBwYXR0ZXJuPVwiJHtpZkRlZmluZWQodGhpcy5wYXR0ZXJuID8gdGhpcy5wYXR0ZXJuIDogdW5kZWZpbmVkKX1cIlxuICAgICAgICAgIG1pbj1cIiR7aWZEZWZpbmVkKHRoaXMubWluID09PSAnJyA/IHVuZGVmaW5lZCA6IHRoaXMubWluKX1cIlxuICAgICAgICAgIG1heD1cIiR7aWZEZWZpbmVkKHRoaXMubWF4ID09PSAnJyA/IHVuZGVmaW5lZCA6IHRoaXMubWF4KX1cIlxuICAgICAgICAgIHN0ZXA9XCIke2lmRGVmaW5lZCh0aGlzLnN0ZXAgPT09IG51bGwgPyB1bmRlZmluZWQgOiB0aGlzLnN0ZXApfVwiXG4gICAgICAgICAgaW5wdXRtb2RlPVwiJHtpZkRlZmluZWQodGhpcy5pbnB1dE1vZGUpfVwiXG4gICAgICAgICAgQGlucHV0PVwiJHt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVwiXG4gICAgICAgICAgQGJsdXI9XCIke3RoaXMub25JbnB1dEJsdXJ9XCI+YDtcbiAgICB9XG4gICAgcmVuZGVySWNvbihpY29uLCBpc1RyYWlsaW5nSWNvbiA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICAgICAgICAnbWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmcnOiAhaXNUcmFpbGluZ0ljb24sXG4gICAgICAgICAgICAnbWRjLXRleHQtZmllbGRfX2ljb24tLXRyYWlsaW5nJzogaXNUcmFpbGluZ0ljb25cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGh0bWwgYDxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgbWRjLXRleHQtZmllbGRfX2ljb24gJHtjbGFzc01hcChjbGFzc2VzKX1cIj4ke2ljb259PC9pPmA7XG4gICAgfVxuICAgIHJlbmRlck91dGxpbmVkKCkge1xuICAgICAgICBsZXQgbGFiZWxUZW1wbGF0ZSA9ICcnO1xuICAgICAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgICAgICAgbGFiZWxUZW1wbGF0ZSA9IGh0bWwgYFxuICAgICAgICA8c3BhblxuICAgICAgICAgICAgLmZsb2F0aW5nTGFiZWxGb3VuZGF0aW9uPSR7ZmxvYXRpbmdMYWJlbCh0aGlzLmxhYmVsKX1cbiAgICAgICAgICAgIEBsYWJlbGNoYW5nZT0ke3RoaXMub25MYWJlbENoYW5nZX1cbiAgICAgICAgICAgIGlkPVwibGFiZWxcIj5cbiAgICAgICAgICAke3RoaXMubGFiZWx9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIGA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgPG13Yy1ub3RjaGVkLW91dGxpbmVcbiAgICAgICAgICAud2lkdGg9JHt0aGlzLm91dGxpbmVXaWR0aH1cbiAgICAgICAgICAub3Blbj0ke3RoaXMub3V0bGluZU9wZW59XG4gICAgICAgICAgY2xhc3M9XCJtZGMtbm90Y2hlZC1vdXRsaW5lXCI+XG4gICAgICAgICR7bGFiZWxUZW1wbGF0ZX1cbiAgICAgIDwvbXdjLW5vdGNoZWQtb3V0bGluZT5gO1xuICAgIH1cbiAgICByZW5kZXJMYWJlbFRleHQoKSB7XG4gICAgICAgIGxldCBsYWJlbFRlbXBsYXRlID0gJyc7XG4gICAgICAgIGlmICh0aGlzLmxhYmVsICYmICF0aGlzLmZ1bGxXaWR0aCkge1xuICAgICAgICAgICAgbGFiZWxUZW1wbGF0ZSA9IGh0bWwgYFxuICAgICAgPHNwYW5cbiAgICAgICAgICAuZmxvYXRpbmdMYWJlbEZvdW5kYXRpb249JHtmbG9hdGluZ0xhYmVsKHRoaXMubGFiZWwpfVxuICAgICAgICAgIGlkPVwibGFiZWxcIj5cbiAgICAgICAgJHt0aGlzLmxhYmVsfVxuICAgICAgPC9zcGFuPmA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgJHtsYWJlbFRlbXBsYXRlfVxuICAgICAgPHNwYW4gLmxpbmVSaXBwbGVGb3VuZGF0aW9uPSR7bGluZVJpcHBsZSgpfT48L3NwYW4+XG4gICAgYDtcbiAgICB9XG4gICAgcmVuZGVySGVscGVyVGV4dChjaGFyQ291bnRlclRlbXBsYXRlKSB7XG4gICAgICAgIGNvbnN0IHNob3dWYWxpZGF0aW9uTWVzc2FnZSA9IHRoaXMudmFsaWRhdGlvbk1lc3NhZ2UgJiYgIXRoaXMuaXNVaVZhbGlkO1xuICAgICAgICBjb25zdCBjbGFzc2VzID0ge1xuICAgICAgICAgICAgJ21kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0LS1wZXJzaXN0ZW50JzogdGhpcy5oZWxwZXJQZXJzaXN0ZW50LFxuICAgICAgICAgICAgJ21kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0LS12YWxpZGF0aW9uLW1zZyc6IHNob3dWYWxpZGF0aW9uTWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgcm9vdENsYXNzZXMgPSB7XG4gICAgICAgICAgICBoaWRkZW46ICF0aGlzLnNob3VsZFJlbmRlckhlbHBlclRleHQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBodG1sIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJtZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAke2NsYXNzTWFwKHJvb3RDbGFzc2VzKX1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0ICR7Y2xhc3NNYXAoY2xhc3Nlcyl9XCI+XG4gICAgICAgICAgJHtzaG93VmFsaWRhdGlvbk1lc3NhZ2UgPyB0aGlzLnZhbGlkYXRpb25NZXNzYWdlIDogdGhpcy5oZWxwZXJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAke2NoYXJDb3VudGVyVGVtcGxhdGV9XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICAgIH1cbiAgICByZW5kZXJDaGFyQ291bnRlcigpIHtcbiAgICAgICAgY29uc3QgY291bnRlckNsYXNzZXMgPSB7XG4gICAgICAgICAgICBoaWRkZW46ICF0aGlzLmNoYXJDb3VudGVyVmlzaWJsZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPVwiJHtjbGFzc01hcChjb3VudGVyQ2xhc3Nlcyl9XCJcbiAgICAgICAgICAuY2hhckNvdW50ZXJGb3VuZGF0aW9uPSR7Y2hhcmFjdGVyQ291bnRlcigpfT5cbiAgICAgIDwvZGl2PmA7XG4gICAgfVxuICAgIG9uSW5wdXRCbHVyKCkge1xuICAgICAgICB0aGlzLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgfVxuICAgIGNoZWNrVmFsaWRpdHkoKSB7XG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLl9jaGVja1ZhbGlkaXR5KHRoaXMudmFsdWUpO1xuICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGludmFsaWRFdmVudCA9IG5ldyBFdmVudCgnaW52YWxpZCcsIHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IHRydWUgfSk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoaW52YWxpZEV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICB9XG4gICAgcmVwb3J0VmFsaWRpdHkoKSB7XG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLmNoZWNrVmFsaWRpdHkoKTtcbiAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uLnNldFZhbGlkKGlzVmFsaWQpO1xuICAgICAgICB0aGlzLmlzVWlWYWxpZCA9IGlzVmFsaWQ7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH1cbiAgICBfY2hlY2tWYWxpZGl0eSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBuYXRpdmVWYWxpZGl0eSA9IHRoaXMuZm9ybUVsZW1lbnQudmFsaWRpdHk7XG4gICAgICAgIGxldCB2YWxpZGl0eSA9IGNyZWF0ZVZhbGlkaXR5T2JqKG5hdGl2ZVZhbGlkaXR5KTtcbiAgICAgICAgaWYgKHRoaXMudmFsaWRpdHlUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbVZhbGlkaXR5ID0gdGhpcy52YWxpZGl0eVRyYW5zZm9ybSh2YWx1ZSwgdmFsaWRpdHkpO1xuICAgICAgICAgICAgdmFsaWRpdHkgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHZhbGlkaXR5KSwgY3VzdG9tVmFsaWRpdHkpO1xuICAgICAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uLnNldFVzZU5hdGl2ZVZhbGlkYXRpb24oZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uLnNldFVzZU5hdGl2ZVZhbGlkYXRpb24odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsaWRpdHkgPSB2YWxpZGl0eTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkaXR5LnZhbGlkO1xuICAgIH1cbiAgICBzZXRDdXN0b21WYWxpZGl0eShtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLmZvcm1FbGVtZW50LnNldEN1c3RvbVZhbGlkaXR5KG1lc3NhZ2UpO1xuICAgIH1cbiAgICBoYW5kbGVJbnB1dENoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5fdmFsdWVTZXRPbklucHV0RXZlbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5mb3JtRWxlbWVudC52YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuYXV0b1ZhbGlkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2hvdWxkVXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIGNhbm5vdCBzZXQgdmFsdWUgb24gc2FmYXJpIG9uIGlucHV0IGV2ZW50IGFzIHRoaXMgY2F1c2VzIGNhcmV0IHRvIGp1bXBcbiAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygndmFsdWUnKSAmJiB0aGlzLl92YWx1ZVNldE9uSW5wdXRFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVTZXRPbklucHV0RXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuc2hvdWxkVXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgY3JlYXRlRm91bmRhdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubWRjRm91bmRhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1kY0ZvdW5kYXRpb24uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWRjRm91bmRhdGlvbiA9IG5ldyB0aGlzLm1kY0ZvdW5kYXRpb25DbGFzcyh0aGlzLmNyZWF0ZUFkYXB0ZXIoKSwge1xuICAgICAgICAgICAgY2hhcmFjdGVyQ291bnRlcjogdGhpcy5tYXhMZW5ndGggIT09IC0xID9cbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJDb3VudGVyRWxlbWVudC5jaGFyQ291bnRlckZvdW5kYXRpb24gOlxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZGNGb3VuZGF0aW9uLmluaXQoKTtcbiAgICB9XG4gICAgY3JlYXRlQWRhcHRlcigpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5nZXRSb290QWRhcHRlck1ldGhvZHMoKSksIHRoaXMuZ2V0SW5wdXRBZGFwdGVyTWV0aG9kcygpKSwgdGhpcy5nZXRMYWJlbEFkYXB0ZXJNZXRob2RzKCkpLCB0aGlzLmdldExpbmVSaXBwbGVBZGFwdGVyTWV0aG9kcygpKSwgdGhpcy5nZXRPdXRsaW5lQWRhcHRlck1ldGhvZHMoKSk7XG4gICAgfVxuICAgIGdldFJvb3RBZGFwdGVyTWV0aG9kcygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyByZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcjogKGV2dFR5cGUsIGhhbmRsZXIpID0+IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKSwgZGVyZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcjogKGV2dFR5cGUsIGhhbmRsZXIpID0+IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKSwgcmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdldEF0dHJpYnV0ZXNMaXN0ID0gKG11dGF0aW9uc0xpc3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9uc0xpc3QubWFwKChtdXRhdGlvbikgPT4gbXV0YXRpb24uYXR0cmlidXRlTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGF0dHJpYnV0ZU5hbWUpID0+IGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zTGlzdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2V0QXR0cmlidXRlc0xpc3QobXV0YXRpb25zTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmluZGV4T2YoJ21heGxlbmd0aCcpICE9PSAtMSAmJiB0aGlzLm1heExlbmd0aCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhckNvdW50ZXJFbGVtZW50LmNoYXJDb3VudGVyRm91bmRhdGlvbi5zZXRDb3VudGVyVmFsdWUodGhpcy52YWx1ZS5sZW5ndGgsIHRoaXMubWF4TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHsgYXR0cmlidXRlczogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcy5mb3JtRWxlbWVudCwgY29uZmlnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXI7XG4gICAgICAgICAgICB9LCBkZXJlZ2lzdGVyVmFsaWRhdGlvbkF0dHJpYnV0ZUNoYW5nZUhhbmRsZXI6IChvYnNlcnZlcikgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpIH0sIGFkZEhhc1JlbW92ZUNsYXNzKHRoaXMubWRjUm9vdCkpO1xuICAgIH1cbiAgICBnZXRJbnB1dEFkYXB0ZXJNZXRob2RzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0TmF0aXZlSW5wdXQ6ICgpID0+IHRoaXMuZm9ybUVsZW1lbnQsXG4gICAgICAgICAgICBpc0ZvY3VzZWQ6ICgpID0+IHRoaXMuc2hhZG93Um9vdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMuZm9ybUVsZW1lbnQgOlxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgcmVnaXN0ZXJJbnB1dEludGVyYWN0aW9uSGFuZGxlcjogKGV2dFR5cGUsIGhhbmRsZXIpID0+IHRoaXMuZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCB7IHBhc3NpdmU6IGV2dFR5cGUgaW4gcGFzc2l2ZUV2ZW50cyB9KSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJJbnB1dEludGVyYWN0aW9uSGFuZGxlcjogKGV2dFR5cGUsIGhhbmRsZXIpID0+IHRoaXMuZm9ybUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TGFiZWxBZGFwdGVyTWV0aG9kcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZsb2F0TGFiZWw6IChzaG91bGRGbG9hdCkgPT4gdGhpcy5sYWJlbEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsRWxlbWVudC5mbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5mbG9hdChzaG91bGRGbG9hdCksXG4gICAgICAgICAgICBnZXRMYWJlbFdpZHRoOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGFiZWxFbGVtZW50ID9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYWJlbEVsZW1lbnQuZmxvYXRpbmdMYWJlbEZvdW5kYXRpb24uZ2V0V2lkdGgoKSA6XG4gICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzTGFiZWw6ICgpID0+IEJvb2xlYW4odGhpcy5sYWJlbEVsZW1lbnQpLFxuICAgICAgICAgICAgc2hha2VMYWJlbDogKHNob3VsZFNoYWtlKSA9PiB0aGlzLmxhYmVsRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxFbGVtZW50LmZsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLnNoYWtlKHNob3VsZFNoYWtlKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TGluZVJpcHBsZUFkYXB0ZXJNZXRob2RzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aXZhdGVMaW5lUmlwcGxlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGluZVJpcHBsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lUmlwcGxlRWxlbWVudC5saW5lUmlwcGxlRm91bmRhdGlvbi5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWFjdGl2YXRlTGluZVJpcHBsZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVSaXBwbGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVJpcHBsZUVsZW1lbnQubGluZVJpcHBsZUZvdW5kYXRpb24uZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRMaW5lUmlwcGxlVHJhbnNmb3JtT3JpZ2luOiAobm9ybWFsaXplZFgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5saW5lUmlwcGxlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVSaXBwbGVFbGVtZW50LmxpbmVSaXBwbGVGb3VuZGF0aW9uLnNldFJpcHBsZUNlbnRlcihub3JtYWxpemVkWCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgX2dldFVwZGF0ZUNvbXBsZXRlKCkge1xuICAgICAgICBhd2FpdCBzdXBlci5fZ2V0VXBkYXRlQ29tcGxldGUoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fb3V0bGluZVVwZGF0ZUNvbXBsZXRlO1xuICAgIH1cbiAgICBhc3luYyBmaXJzdFVwZGF0ZWQoKSB7XG4gICAgICAgIGNvbnN0IG91dGxpbmVFbGVtZW50ID0gdGhpcy5vdXRsaW5lRWxlbWVudDtcbiAgICAgICAgaWYgKG91dGxpbmVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9vdXRsaW5lVXBkYXRlQ29tcGxldGUgPSBvdXRsaW5lRWxlbWVudC51cGRhdGVDb21wbGV0ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX291dGxpbmVVcGRhdGVDb21wbGV0ZTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5maXJzdFVwZGF0ZWQoKTtcbiAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVPbkluaXRpYWxSZW5kZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0VmFsaWRpdHkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRPdXRsaW5lQWRhcHRlck1ldGhvZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbG9zZU91dGxpbmU6ICgpID0+IHRoaXMub3V0bGluZUVsZW1lbnQgJiYgKHRoaXMub3V0bGluZU9wZW4gPSBmYWxzZSksXG4gICAgICAgICAgICBoYXNPdXRsaW5lOiAoKSA9PiBCb29sZWFuKHRoaXMub3V0bGluZUVsZW1lbnQpLFxuICAgICAgICAgICAgbm90Y2hPdXRsaW5lOiAobGFiZWxXaWR0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dGxpbmVFbGVtZW50ID0gdGhpcy5vdXRsaW5lRWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAob3V0bGluZUVsZW1lbnQgJiYgIXRoaXMub3V0bGluZU9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRsaW5lV2lkdGggPSBsYWJlbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGxpbmVPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIG9uTGFiZWxDaGFuZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmxhYmVsKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxheW91dCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGxheW91dCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVDb21wbGV0ZTtcbiAgICAgICAgaWYgKHRoaXMubGFiZWxFbGVtZW50ICYmIHRoaXMub3V0bGluZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8qIFdoZW4gdGhlIHRleHRmaWVsZCBhdXRvbWF0aWNhbGx5IG5vdGNoZXMgZHVlIHRvIGEgdmFsdWUgYW5kIGxhYmVsXG4gICAgICAgICAgICAgKiBiZWluZyBkZWZpbmVkLCB0aGUgdGV4dGZpZWxkIG1heSBiZSBzZXQgdG8gYGRpc3BsYXk6IG5vbmVgIGJ5IHRoZSB1c2VyLlxuICAgICAgICAgICAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBub3RjaCBpcyBvZiBzaXplIDBweC4gV2UgcHJvdmlkZSB0aGlzIGZ1bmN0aW9uIHNvXG4gICAgICAgICAgICAgKiB0aGF0IHRoZSB1c2VyIG1heSBtYW51YWxseSByZXNpemUgdGhlIG5vdGNoIHRvIHRoZSBmbG9hdGVkIGxhYmVsJ3NcbiAgICAgICAgICAgICAqIHdpZHRoLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBsYWJlbFdpZHRoID0gdGhpcy5sYWJlbEVsZW1lbnQuZmxvYXRpbmdMYWJlbEZvdW5kYXRpb24uZ2V0V2lkdGgoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm91dGxpbmVPcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRsaW5lV2lkdGggPSBsYWJlbFdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcXVlcnkoJy5tZGMtdGV4dC1maWVsZCcpXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJtZGNSb290XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBxdWVyeSgnaW5wdXQnKVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwiZm9ybUVsZW1lbnRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHF1ZXJ5KCcubWRjLWZsb2F0aW5nLWxhYmVsJylcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcImxhYmVsRWxlbWVudFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcXVlcnkoJy5tZGMtbGluZS1yaXBwbGUnKVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwibGluZVJpcHBsZUVsZW1lbnRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHF1ZXJ5KCdtd2Mtbm90Y2hlZC1vdXRsaW5lJylcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcIm91dGxpbmVFbGVtZW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBxdWVyeSgnLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoJylcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcIm5vdGNoRWxlbWVudFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcXVlcnkoJy5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcicpXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJjaGFyQ291bnRlckVsZW1lbnRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcInR5cGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJwbGFjZWhvbGRlclwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcImxhYmVsXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwiaWNvblwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcImljb25UcmFpbGluZ1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJyZXF1aXJlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIgfSlcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcIm1heExlbmd0aFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJvdXRsaW5lZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJmdWxsV2lkdGhcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJoZWxwZXJcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwidmFsaWRhdGVPbkluaXRpYWxSZW5kZXJcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJ2YWxpZGF0aW9uTWVzc2FnZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJhdXRvVmFsaWRhdGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJwYXR0ZXJuXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSh7IHR5cGU6IE51bWJlciB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwibWluXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSh7IHR5cGU6IE51bWJlciB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwibWF4XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSh7IHR5cGU6IE51bWJlciB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwic3RlcFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJoZWxwZXJQZXJzaXN0ZW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4gfSlcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcImNoYXJDb3VudGVyXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4gfSlcbl0sIFRleHRGaWVsZEJhc2UucHJvdG90eXBlLCBcImVuZEFsaWduZWRcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJpbnB1dE1vZGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwicmVhZE9ubHlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwib3V0bGluZU9wZW5cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogTnVtYmVyIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJvdXRsaW5lV2lkdGhcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiB9KVxuXSwgVGV4dEZpZWxkQmFzZS5wcm90b3R5cGUsIFwiaXNVaVZhbGlkXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBldmVudE9wdGlvbnMoeyBwYXNzaXZlOiB0cnVlIH0pXG5dLCBUZXh0RmllbGRCYXNlLnByb3RvdHlwZSwgXCJoYW5kbGVJbnB1dENoYW5nZVwiLCBudWxsKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW13Yy10ZXh0ZmllbGQtYmFzZS5qcy5tYXAiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5leHBvcnQgY29uc3Qgc3R5bGUgPSBjc3MgYC5tZGMtZmxvYXRpbmctbGFiZWx7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7Zm9udC1mYW1pbHk6Um9ib3RvLCBzYW5zLXNlcmlmO2ZvbnQtZmFtaWx5OnZhcigtLW1kYy10eXBvZ3JhcGh5LXN1YnRpdGxlMS1mb250LWZhbWlseSwgdmFyKC0tbWRjLXR5cG9ncmFwaHktZm9udC1mYW1pbHksIFJvYm90bywgc2Fucy1zZXJpZikpO2ZvbnQtc2l6ZToxcmVtO2ZvbnQtc2l6ZTp2YXIoLS1tZGMtdHlwb2dyYXBoeS1zdWJ0aXRsZTEtZm9udC1zaXplLCAxcmVtKTtmb250LXdlaWdodDo0MDA7Zm9udC13ZWlnaHQ6dmFyKC0tbWRjLXR5cG9ncmFwaHktc3VidGl0bGUxLWZvbnQtd2VpZ2h0LCA0MDApO2xldHRlci1zcGFjaW5nOi4wMDkzNzVlbTtsZXR0ZXItc3BhY2luZzp2YXIoLS1tZGMtdHlwb2dyYXBoeS1zdWJ0aXRsZTEtbGV0dGVyLXNwYWNpbmcsIDAuMDA5Mzc1ZW0pO3RleHQtZGVjb3JhdGlvbjppbmhlcml0O3RleHQtZGVjb3JhdGlvbjp2YXIoLS1tZGMtdHlwb2dyYXBoeS1zdWJ0aXRsZTEtdGV4dC1kZWNvcmF0aW9uLCBpbmhlcml0KTt0ZXh0LXRyYW5zZm9ybTppbmhlcml0O3RleHQtdHJhbnNmb3JtOnZhcigtLW1kYy10eXBvZ3JhcGh5LXN1YnRpdGxlMS10ZXh0LXRyYW5zZm9ybSwgaW5oZXJpdCk7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RyYW5zZm9ybS1vcmlnaW46bGVmdCB0b3A7bGluZS1oZWlnaHQ6MS4xNXJlbTt0ZXh0LWFsaWduOmxlZnQ7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7Y3Vyc29yOnRleHQ7b3ZlcmZsb3c6aGlkZGVuO3dpbGwtY2hhbmdlOnRyYW5zZm9ybTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpLGNvbG9yIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSl9W2Rpcj1ydGxdIC5tZGMtZmxvYXRpbmctbGFiZWwsLm1kYy1mbG9hdGluZy1sYWJlbFtkaXI9cnRsXXtyaWdodDowO2xlZnQ6YXV0bzt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcDt0ZXh0LWFsaWduOnJpZ2h0fS5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle2N1cnNvcjphdXRvfS5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMDYlKSBzY2FsZSgwLjc1KX0ubWRjLWZsb2F0aW5nLWxhYmVsLS1zaGFrZXthbmltYXRpb246bWRjLWZsb2F0aW5nLWxhYmVsLXNoYWtlLWZsb2F0LWFib3ZlLXN0YW5kYXJkIDI1MG1zIDF9QGtleWZyYW1lcyBtZGMtZmxvYXRpbmctbGFiZWwtc2hha2UtZmxvYXQtYWJvdmUtc3RhbmRhcmR7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYygwIC0gMCUpKSB0cmFuc2xhdGVZKC0xMDYlKSBzY2FsZSgwLjc1KX0zMyV7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC41LCAwLCAwLjcwMTczMiwgMC40OTU4MTkpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKGNhbGMoNCUgLSAwJSkpIHRyYW5zbGF0ZVkoLTEwNiUpIHNjYWxlKDAuNzUpfTY2JXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjMwMjQzNSwgMC4zODEzNTIsIDAuNTUsIDAuOTU2MzUyKTt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKC00JSAtIDAlKSkgdHJhbnNsYXRlWSgtMTA2JSkgc2NhbGUoMC43NSl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKDAgLSAwJSkpIHRyYW5zbGF0ZVkoLTEwNiUpIHNjYWxlKDAuNzUpfX0ubWRjLWxpbmUtcmlwcGxlOjpiZWZvcmUsLm1kYy1saW5lLXJpcHBsZTo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjA7bGVmdDowO3dpZHRoOjEwMCU7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtjb250ZW50OlwiXCJ9Lm1kYy1saW5lLXJpcHBsZTo6YmVmb3Jle2JvcmRlci1ib3R0b20td2lkdGg6MXB4O3otaW5kZXg6MX0ubWRjLWxpbmUtcmlwcGxlOjphZnRlcnt0cmFuc2Zvcm06c2NhbGVYKDApO2JvcmRlci1ib3R0b20td2lkdGg6MnB4O29wYWNpdHk6MDt6LWluZGV4OjJ9Lm1kYy1saW5lLXJpcHBsZTo6YWZ0ZXJ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMTgwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSxvcGFjaXR5IDE4MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSl9Lm1kYy1saW5lLXJpcHBsZS0tYWN0aXZlOjphZnRlcnt0cmFuc2Zvcm06c2NhbGVYKDEpO29wYWNpdHk6MX0ubWRjLWxpbmUtcmlwcGxlLS1kZWFjdGl2YXRpbmc6OmFmdGVye29wYWNpdHk6MH0ubWRjLW5vdGNoZWQtb3V0bGluZXtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtsZWZ0OjA7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjEwMCU7bWF4LXdpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7dGV4dC1hbGlnbjpsZWZ0O3BvaW50ZXItZXZlbnRzOm5vbmV9W2Rpcj1ydGxdIC5tZGMtbm90Y2hlZC1vdXRsaW5lLC5tZGMtbm90Y2hlZC1vdXRsaW5lW2Rpcj1ydGxde3RleHQtYWxpZ246cmlnaHR9Lm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjEwMCU7Ym9yZGVyLXRvcDoxcHggc29saWQ7Ym9yZGVyLWJvdHRvbToxcHggc29saWQ7cG9pbnRlci1ldmVudHM6bm9uZX0ubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZ3tib3JkZXItbGVmdDoxcHggc29saWQ7Ym9yZGVyLXJpZ2h0Om5vbmU7d2lkdGg6MTJweH1bZGlyPXJ0bF0gLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmdbZGlyPXJ0bF17Ym9yZGVyLWxlZnQ6bm9uZTtib3JkZXItcmlnaHQ6MXB4IHNvbGlkfS5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItbGVmdDpub25lO2JvcmRlci1yaWdodDoxcHggc29saWQ7ZmxleC1ncm93OjF9W2Rpcj1ydGxdIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZywubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmdbZGlyPXJ0bF17Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkO2JvcmRlci1yaWdodDpub25lfS5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaHtmbGV4OjAgMCBhdXRvO3dpZHRoOmF1dG87bWF4LXdpZHRoOmNhbGMoMTAwJSAtIDEycHggKiAyKX0ubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLWZsb2F0aW5nLWxhYmVse2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO21heC13aWR0aDoxMDAlfS5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle3RleHQtb3ZlcmZsb3c6Y2xpcH0ubWRjLW5vdGNoZWQtb3V0bGluZS0tdXBncmFkZWQgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmV7bWF4LXdpZHRoOmNhbGMoMTAwJSAvIC43NSl9Lm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vdGNoZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoe3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6OHB4O2JvcmRlci10b3A6bm9uZX1bZGlyPXJ0bF0gLm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vdGNoZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtbm90Y2hlZC1vdXRsaW5lLS1ub3RjaGVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaFtkaXI9cnRsXXtwYWRkaW5nLWxlZnQ6OHB4O3BhZGRpbmctcmlnaHQ6MH0ubWRjLW5vdGNoZWQtb3V0bGluZS0tbm8tbGFiZWwgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoe3BhZGRpbmc6MH0ubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHR7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7Zm9udC1mYW1pbHk6Um9ib3RvLCBzYW5zLXNlcmlmO2ZvbnQtZmFtaWx5OnZhcigtLW1kYy10eXBvZ3JhcGh5LWNhcHRpb24tZm9udC1mYW1pbHksIHZhcigtLW1kYy10eXBvZ3JhcGh5LWZvbnQtZmFtaWx5LCBSb2JvdG8sIHNhbnMtc2VyaWYpKTtmb250LXNpemU6Ljc1cmVtO2ZvbnQtc2l6ZTp2YXIoLS1tZGMtdHlwb2dyYXBoeS1jYXB0aW9uLWZvbnQtc2l6ZSwgMC43NXJlbSk7bGluZS1oZWlnaHQ6MS4yNXJlbTtsaW5lLWhlaWdodDp2YXIoLS1tZGMtdHlwb2dyYXBoeS1jYXB0aW9uLWxpbmUtaGVpZ2h0LCAxLjI1cmVtKTtmb250LXdlaWdodDo0MDA7Zm9udC13ZWlnaHQ6dmFyKC0tbWRjLXR5cG9ncmFwaHktY2FwdGlvbi1mb250LXdlaWdodCwgNDAwKTtsZXR0ZXItc3BhY2luZzouMDMzMzMzMzMzM2VtO2xldHRlci1zcGFjaW5nOnZhcigtLW1kYy10eXBvZ3JhcGh5LWNhcHRpb24tbGV0dGVyLXNwYWNpbmcsIDAuMDMzMzMzMzMzM2VtKTt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246dmFyKC0tbWRjLXR5cG9ncmFwaHktY2FwdGlvbi10ZXh0LWRlY29yYXRpb24sIGluaGVyaXQpO3RleHQtdHJhbnNmb3JtOmluaGVyaXQ7dGV4dC10cmFuc2Zvcm06dmFyKC0tbWRjLXR5cG9ncmFwaHktY2FwdGlvbi10ZXh0LXRyYW5zZm9ybSwgaW5oZXJpdCk7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjA7bGluZS1oZWlnaHQ6bm9ybWFsO21hcmdpbjowO29wYWNpdHk6MDt3aWxsLWNoYW5nZTpvcGFjaXR5O3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpfS5tZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dDo6YmVmb3Jle2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjA7aGVpZ2h0OjE2cHg7Y29udGVudDpcIlwiO3ZlcnRpY2FsLWFsaWduOjB9Lm1kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0LS1wZXJzaXN0ZW50e3RyYW5zaXRpb246bm9uZTtvcGFjaXR5OjE7d2lsbC1jaGFuZ2U6aW5pdGlhbH0ubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXJ7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7Zm9udC1mYW1pbHk6Um9ib3RvLCBzYW5zLXNlcmlmO2ZvbnQtZmFtaWx5OnZhcigtLW1kYy10eXBvZ3JhcGh5LWNhcHRpb24tZm9udC1mYW1pbHksIHZhcigtLW1kYy10eXBvZ3JhcGh5LWZvbnQtZmFtaWx5LCBSb2JvdG8sIHNhbnMtc2VyaWYpKTtmb250LXNpemU6Ljc1cmVtO2ZvbnQtc2l6ZTp2YXIoLS1tZGMtdHlwb2dyYXBoeS1jYXB0aW9uLWZvbnQtc2l6ZSwgMC43NXJlbSk7bGluZS1oZWlnaHQ6MS4yNXJlbTtsaW5lLWhlaWdodDp2YXIoLS1tZGMtdHlwb2dyYXBoeS1jYXB0aW9uLWxpbmUtaGVpZ2h0LCAxLjI1cmVtKTtmb250LXdlaWdodDo0MDA7Zm9udC13ZWlnaHQ6dmFyKC0tbWRjLXR5cG9ncmFwaHktY2FwdGlvbi1mb250LXdlaWdodCwgNDAwKTtsZXR0ZXItc3BhY2luZzouMDMzMzMzMzMzM2VtO2xldHRlci1zcGFjaW5nOnZhcigtLW1kYy10eXBvZ3JhcGh5LWNhcHRpb24tbGV0dGVyLXNwYWNpbmcsIDAuMDMzMzMzMzMzM2VtKTt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246dmFyKC0tbWRjLXR5cG9ncmFwaHktY2FwdGlvbi10ZXh0LWRlY29yYXRpb24sIGluaGVyaXQpO3RleHQtdHJhbnNmb3JtOmluaGVyaXQ7dGV4dC10cmFuc2Zvcm06dmFyKC0tbWRjLXR5cG9ncmFwaHktY2FwdGlvbi10ZXh0LXRyYW5zZm9ybSwgaW5oZXJpdCk7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjA7bGluZS1oZWlnaHQ6bm9ybWFsO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjE2cHg7cGFkZGluZy1yaWdodDowO3doaXRlLXNwYWNlOm5vd3JhcH0ubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXI6OmJlZm9yZXtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDowO2hlaWdodDoxNnB4O2NvbnRlbnQ6XCJcIjt2ZXJ0aWNhbC1hbGlnbjowfVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXIsLm1kYy10ZXh0LWZpZWxkLWNoYXJhY3Rlci1jb3VudGVyW2Rpcj1ydGxde21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OmF1dG99W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlciwubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXJbZGlyPXJ0bF17cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDoxNnB4fS5tZGMtdGV4dC1maWVsZF9faWNvbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpO2N1cnNvcjpwb2ludGVyfS5tZGMtdGV4dC1maWVsZF9faWNvbjpub3QoW3RhYmluZGV4XSksLm1kYy10ZXh0LWZpZWxkX19pY29uW3RhYmluZGV4PVwiLTFcIl17Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX1Aa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctcmFkaXVzLWlue2Zyb217YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zZm9ybTp0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQsIDApKSBzY2FsZSgxKX10b3t0cmFuc2Zvcm06dHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKX19QGtleWZyYW1lcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktaW57ZnJvbXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjtvcGFjaXR5OjB9dG97b3BhY2l0eTp2YXIoLS1tZGMtcmlwcGxlLWZnLW9wYWNpdHksIDApfX1Aa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXR7ZnJvbXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjtvcGFjaXR5OnZhcigtLW1kYy1yaXBwbGUtZmctb3BhY2l0eSwgMCl9dG97b3BhY2l0eTowfX0ubWRjLXRleHQtZmllbGR7LS1tZGMtcmlwcGxlLWZnLXNpemU6IDA7LS1tZGMtcmlwcGxlLWxlZnQ6IDA7LS1tZGMtcmlwcGxlLXRvcDogMDstLW1kYy1yaXBwbGUtZmctc2NhbGU6IDE7LS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQ6IDA7LS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydDogMDstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6cmdiYSgwLDAsMCwwKX0ubWRjLXRleHQtZmllbGQgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmJlZm9yZSwubWRjLXRleHQtZmllbGQgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1yYWRpdXM6NTAlO29wYWNpdHk6MDtwb2ludGVyLWV2ZW50czpub25lO2NvbnRlbnQ6XCJcIn0ubWRjLXRleHQtZmllbGQgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmJlZm9yZXt0cmFuc2l0aW9uOm9wYWNpdHkgMTVtcyBsaW5lYXIsYmFja2dyb3VuZC1jb2xvciAxNW1zIGxpbmVhcjt6LWluZGV4OjF9Lm1kYy10ZXh0LWZpZWxkLm1kYy1yaXBwbGUtdXBncmFkZWQgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmJlZm9yZXt0cmFuc2Zvcm06c2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpfS5tZGMtdGV4dC1maWVsZC5tZGMtcmlwcGxlLXVwZ3JhZGVkIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjphZnRlcnt0b3A6MDtsZWZ0OjA7dHJhbnNmb3JtOnNjYWxlKDApO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcn0ubWRjLXRleHQtZmllbGQubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjphZnRlcnt0b3A6dmFyKC0tbWRjLXJpcHBsZS10b3AsIDApO2xlZnQ6dmFyKC0tbWRjLXJpcHBsZS1sZWZ0LCAwKX0ubWRjLXRleHQtZmllbGQubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjphZnRlcnthbmltYXRpb246bWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gMjI1bXMgZm9yd2FyZHMsbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWluIDc1bXMgZm9yd2FyZHN9Lm1kYy10ZXh0LWZpZWxkLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtZGVhY3RpdmF0aW9uIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjphZnRlcnthbmltYXRpb246bWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dCAxNTBtczt0cmFuc2Zvcm06dHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKX0ubWRjLXRleHQtZmllbGQgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmJlZm9yZSwubWRjLXRleHQtZmllbGQgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmFmdGVye3RvcDpjYWxjKDUwJSAtIDEwMCUpO2xlZnQ6Y2FsYyg1MCUgLSAxMDAlKTt3aWR0aDoyMDAlO2hlaWdodDoyMDAlfS5tZGMtdGV4dC1maWVsZC5tZGMtcmlwcGxlLXVwZ3JhZGVkIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjphZnRlcnt3aWR0aDp2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDEwMCUpO2hlaWdodDp2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDEwMCUpfS5tZGMtdGV4dC1maWVsZF9fcmlwcGxle3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmV9Lm1kYy10ZXh0LWZpZWxke2hlaWdodDo1NnB4O2Rpc3BsYXk6aW5saW5lLWZsZXg7YWxpZ24taXRlbXM6YmFzZWxpbmU7Ym9yZGVyLXJhZGl1czo0cHggNHB4IDAgMDtkaXNwbGF5OmlubGluZS1mbGV4O3BhZGRpbmc6MCAxNnB4O3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpoaWRkZW47d2lsbC1jaGFuZ2U6b3BhY2l0eSx0cmFuc2Zvcm0sY29sb3J9Lm1kYy10ZXh0LWZpZWxkIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjpiZWZvcmUsLm1kYy10ZXh0LWZpZWxkIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjg3KX0ubWRjLXRleHQtZmllbGQ6aG92ZXIgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmJlZm9yZXtvcGFjaXR5Oi4wNH0ubWRjLXRleHQtZmllbGQubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjpiZWZvcmUsLm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXMgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmJlZm9yZXt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTouMTJ9Lm1kYy10ZXh0LWZpZWxkOjpiZWZvcmV7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MDtoZWlnaHQ6NDBweDtjb250ZW50OlwiXCI7dmVydGljYWwtYWxpZ246MH0ubWRjLXRleHQtZmllbGQubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLC5tZGMtdGV4dC1maWVsZC5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoLC5tZGMtdGV4dC1maWVsZC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEsLm1kYy10ZXh0LWZpZWxkLm1kYy10ZXh0LWZpZWxkLS1uby1sYWJlbHthbGlnbi1pdGVtczpjZW50ZXJ9Lm1kYy10ZXh0LWZpZWxkLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZDo6YmVmb3JlLC5tZGMtdGV4dC1maWVsZC5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoOjpiZWZvcmUsLm1kYy10ZXh0LWZpZWxkLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYTo6YmVmb3JlLC5tZGMtdGV4dC1maWVsZC5tZGMtdGV4dC1maWVsZC0tbm8tbGFiZWw6OmJlZm9yZXtkaXNwbGF5Om5vbmV9Lm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLWZsb2F0aW5nLWxhYmVse2NvbG9yOnJnYmEoMCwwLDAsLjYpfS5tZGMtdGV4dC1maWVsZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy10ZXh0LWZpZWxkX19pbnB1dHtjb2xvcjpyZ2JhKDAsMCwwLC44Nyl9QG1lZGlhIGFsbHsubWRjLXRleHQtZmllbGQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIC5tZGMtdGV4dC1maWVsZF9faW5wdXQ6OnBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMCwwLDAsLjU0KX19QG1lZGlhIGFsbHsubWRjLXRleHQtZmllbGQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIC5tZGMtdGV4dC1maWVsZF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMCwwLDAsLjU0KX19Lm1kYy10ZXh0LWZpZWxkIC5tZGMtdGV4dC1maWVsZF9faW5wdXR7Y2FyZXQtY29sb3I6IzYyMDBlZTtjYXJldC1jb2xvcjp2YXIoLS1tZGMtdGhlbWUtcHJpbWFyeSwgIzYyMDBlZSl9Lm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLWxpbmUtcmlwcGxlOjpiZWZvcmV7Ym9yZGVyLWJvdHRvbS1jb2xvcjpyZ2JhKDAsMCwwLC40Mil9Lm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKTpob3ZlciAubWRjLWxpbmUtcmlwcGxlOjpiZWZvcmV7Ym9yZGVyLWJvdHRvbS1jb2xvcjpyZ2JhKDAsMCwwLC44Nyl9Lm1kYy10ZXh0LWZpZWxkIC5tZGMtbGluZS1yaXBwbGU6OmFmdGVye2JvcmRlci1ib3R0b20tY29sb3I6IzYyMDBlZTtib3JkZXItYm90dG9tLWNvbG9yOnZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjNjIwMGVlKX0ubWRjLXRleHQtZmllbGQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpKy5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHR7Y29sb3I6cmdiYSgwLDAsMCwuNil9Lm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXIsLm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSsubWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmUgLm1kYy10ZXh0LWZpZWxkLWNoYXJhY3Rlci1jb3VudGVye2NvbG9yOnJnYmEoMCwwLDAsLjYpfS5tZGMtdGV4dC1maWVsZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy10ZXh0LWZpZWxkX19pY29uLS1sZWFkaW5ne2NvbG9yOnJnYmEoMCwwLDAsLjU0KX0ubWRjLXRleHQtZmllbGQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tdHJhaWxpbmd7Y29sb3I6cmdiYSgwLDAsMCwuNTQpfS5tZGMtdGV4dC1maWVsZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCl7YmFja2dyb3VuZC1jb2xvcjojZjVmNWY1fS5tZGMtdGV4dC1maWVsZCAubWRjLWZsb2F0aW5nLWxhYmVse2xlZnQ6MTZweDtyaWdodDppbml0aWFsO3RvcDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSk7cG9pbnRlci1ldmVudHM6bm9uZX1bZGlyPXJ0bF0gLm1kYy10ZXh0LWZpZWxkIC5tZGMtZmxvYXRpbmctbGFiZWwsLm1kYy10ZXh0LWZpZWxkIC5tZGMtZmxvYXRpbmctbGFiZWxbZGlyPXJ0bF17bGVmdDppbml0aWFsO3JpZ2h0OjE2cHh9Lm1kYy10ZXh0LWZpZWxkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMDYlKSBzY2FsZSgwLjc1KX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtZmxvYXRpbmctbGFiZWx7bGVmdDo0cHg7cmlnaHQ6aW5pdGlhbH1bZGlyPXJ0bF0gLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYSAubWRjLWZsb2F0aW5nLWxhYmVsLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1mbG9hdGluZy1sYWJlbFtkaXI9cnRsXXtsZWZ0OmluaXRpYWw7cmlnaHQ6NHB4fS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1mbG9hdGluZy1sYWJlbHtsZWZ0OjRweDtyaWdodDppbml0aWFsfVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtZmxvYXRpbmctbGFiZWwsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLWZsb2F0aW5nLWxhYmVsW2Rpcj1ydGxde2xlZnQ6aW5pdGlhbDtyaWdodDo0cHh9Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC0td2l0aC1sZWFkaW5nLWljb24gLm1kYy1mbG9hdGluZy1sYWJlbHtsZWZ0OjM2cHg7cmlnaHQ6aW5pdGlhbH1bZGlyPXJ0bF0gLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC0td2l0aC1sZWFkaW5nLWljb24gLm1kYy1mbG9hdGluZy1sYWJlbCwubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLS13aXRoLWxlYWRpbmctaWNvbiAubWRjLWZsb2F0aW5nLWxhYmVsW2Rpcj1ydGxde2xlZnQ6aW5pdGlhbDtyaWdodDozNnB4fS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQtLXdpdGgtbGVhZGluZy1pY29uIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle2xlZnQ6NDBweDtyaWdodDppbml0aWFsfVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLS13aXRoLWxlYWRpbmctaWNvbiAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZSwubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLS13aXRoLWxlYWRpbmctaWNvbiAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZVtkaXI9cnRsXXtsZWZ0OmluaXRpYWw7cmlnaHQ6NDBweH0ubWRjLXRleHQtZmllbGRfX2lucHV0ey1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2ZvbnQtZmFtaWx5OlJvYm90bywgc2Fucy1zZXJpZjtmb250LWZhbWlseTp2YXIoLS1tZGMtdHlwb2dyYXBoeS1zdWJ0aXRsZTEtZm9udC1mYW1pbHksIHZhcigtLW1kYy10eXBvZ3JhcGh5LWZvbnQtZmFtaWx5LCBSb2JvdG8sIHNhbnMtc2VyaWYpKTtmb250LXNpemU6MXJlbTtmb250LXNpemU6dmFyKC0tbWRjLXR5cG9ncmFwaHktc3VidGl0bGUxLWZvbnQtc2l6ZSwgMXJlbSk7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtd2VpZ2h0OnZhcigtLW1kYy10eXBvZ3JhcGh5LXN1YnRpdGxlMS1mb250LXdlaWdodCwgNDAwKTtsZXR0ZXItc3BhY2luZzouMDA5Mzc1ZW07bGV0dGVyLXNwYWNpbmc6dmFyKC0tbWRjLXR5cG9ncmFwaHktc3VidGl0bGUxLWxldHRlci1zcGFjaW5nLCAwLjAwOTM3NWVtKTt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246dmFyKC0tbWRjLXR5cG9ncmFwaHktc3VidGl0bGUxLXRleHQtZGVjb3JhdGlvbiwgaW5oZXJpdCk7dGV4dC10cmFuc2Zvcm06aW5oZXJpdDt0ZXh0LXRyYW5zZm9ybTp2YXIoLS1tZGMtdHlwb2dyYXBoeS1zdWJ0aXRsZTEtdGV4dC10cmFuc2Zvcm0sIGluaGVyaXQpO3dpZHRoOjEwMCU7aGVpZ2h0OjI4cHg7Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czowO2JhY2tncm91bmQ6bm9uZTthcHBlYXJhbmNlOm5vbmU7cGFkZGluZzowO3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpfUBtZWRpYSBhbGx7Lm1kYy10ZXh0LWZpZWxkX19pbnB1dDo6cGxhY2Vob2xkZXJ7dHJhbnNpdGlvbjpvcGFjaXR5IDY3bXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtvcGFjaXR5OjB9fUBtZWRpYSBhbGx7Lm1kYy10ZXh0LWZpZWxkX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7dHJhbnNpdGlvbjpvcGFjaXR5IDY3bXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtvcGFjaXR5OjB9fUBtZWRpYSBhbGx7Lm1kYy10ZXh0LWZpZWxkLS1mdWxsd2lkdGggLm1kYy10ZXh0LWZpZWxkX19pbnB1dDo6cGxhY2Vob2xkZXIsLm1kYy10ZXh0LWZpZWxkLS1uby1sYWJlbCAubWRjLXRleHQtZmllbGRfX2lucHV0OjpwbGFjZWhvbGRlciwubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgLm1kYy10ZXh0LWZpZWxkX19pbnB1dDo6cGxhY2Vob2xkZXJ7dHJhbnNpdGlvbi1kZWxheTo0MG1zO3RyYW5zaXRpb24tZHVyYXRpb246MTEwbXM7b3BhY2l0eToxfX1AbWVkaWEgYWxsey5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoIC5tZGMtdGV4dC1maWVsZF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVyLC5tZGMtdGV4dC1maWVsZC0tbm8tbGFiZWwgLm1kYy10ZXh0LWZpZWxkX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXIsLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtdGV4dC1maWVsZF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVye3RyYW5zaXRpb24tZGVsYXk6NDBtczt0cmFuc2l0aW9uLWR1cmF0aW9uOjExMG1zO29wYWNpdHk6MX19Lm1kYy10ZXh0LWZpZWxkX19pbnB1dDpmb2N1c3tvdXRsaW5lOm5vbmV9Lm1kYy10ZXh0LWZpZWxkX19pbnB1dDppbnZhbGlke2JveC1zaGFkb3c6bm9uZX0ubWRjLXRleHQtZmllbGRfX2lucHV0Oi13ZWJraXQtYXV0b2ZpbGx7ei1pbmRleDphdXRvICFpbXBvcnRhbnR9Lm1kYy10ZXh0LWZpZWxkX19pbnB1dDotd2Via2l0LWF1dG9maWxsKy5tZGMtZmxvYXRpbmctbGFiZWx7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMC43NSk7Y3Vyc29yOmF1dG99Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZHtvdmVyZmxvdzp2aXNpYmxlfS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19sZWFkaW5nLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCwubWRjLXRleHQtZmllbGQtLW91dGxpbmVkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmd7Ym9yZGVyLWNvbG9yOnJnYmEoMCwwLDAsLjM4KX0ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKTpub3QoLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKTpob3ZlciAubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLXRleHQtZmllbGQtLW91dGxpbmVkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKTpub3QoLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKTpob3ZlciAubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCk6bm90KC5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCk6aG92ZXIgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1jb2xvcjpyZ2JhKDAsMCwwLC44Nyl9Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItY29sb3I6IzYyMDBlZTtib3JkZXItY29sb3I6dmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICM2MjAwZWUpfS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1mbG9hdGluZy1sYWJlbC0tc2hha2V7YW5pbWF0aW9uOm1kYy1mbG9hdGluZy1sYWJlbC1zaGFrZS1mbG9hdC1hYm92ZS10ZXh0LWZpZWxkLW91dGxpbmVkIDI1MG1zIDF9Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZ3tib3JkZXItcmFkaXVzOjRweCAwIDAgNHB4fVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19sZWFkaW5nLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmdbZGlyPXJ0bF17Ym9yZGVyLXJhZGl1czowIDRweCA0cHggMH0ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItcmFkaXVzOjAgNHB4IDRweCAwfVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZywubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ1tkaXI9cnRsXXtib3JkZXItcmFkaXVzOjRweCAwIDAgNHB4fS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTM3LjI1cHgpIHNjYWxlKDEpfS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmV7Zm9udC1zaXplOi43NXJlbX0ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zNC43NXB4KSBzY2FsZSgwLjc1KX0ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle2ZvbnQtc2l6ZToxcmVtfS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vdGNoZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoe3BhZGRpbmctdG9wOjFweH0ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtdGV4dC1maWVsZF9fcmlwcGxlOjpiZWZvcmUsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLXRleHQtZmllbGRfX3JpcHBsZTo6YWZ0ZXJ7Y29udGVudDpub25lfS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpe2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLXRleHQtZmllbGRfX2lucHV0e2Rpc3BsYXk6ZmxleDtib3JkZXI6bm9uZSAhaW1wb3J0YW50O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7ei1pbmRleDoxfS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy10ZXh0LWZpZWxkX19pY29ue3otaW5kZXg6Mn0ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lLS1ub3RjaGVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaHtwYWRkaW5nLXRvcDoycHh9Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCwubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItd2lkdGg6MnB4fS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQubWRjLXRleHQtZmllbGQtLWRpc2FibGVke2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItY29sb3I6cmdiYSgwLDAsMCwuMDYpfUBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKXsubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1jb2xvcjpHcmF5VGV4dH19Lm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbntwYWRkaW5nLWxlZnQ6NDhweDtwYWRkaW5nLXJpZ2h0OjE2cHh9Lm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbiAubWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmd7bGVmdDoxNnB4O3JpZ2h0OmluaXRpYWx9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24gLm1kYy10ZXh0LWZpZWxkX19pY29uLS1sZWFkaW5nLC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24gLm1kYy10ZXh0LWZpZWxkX19pY29uLS1sZWFkaW5nW2Rpcj1ydGxde2xlZnQ6aW5pdGlhbDtyaWdodDoxNnB4fVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb25bZGlyPXJ0bF17cGFkZGluZy1sZWZ0OjE2cHg7cGFkZGluZy1yaWdodDo0OHB4fS5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24gLm1kYy1mbG9hdGluZy1sYWJlbHtsZWZ0OjQ4cHg7cmlnaHQ6aW5pdGlhbH1bZGlyPXJ0bF0gLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbiAubWRjLWZsb2F0aW5nLWxhYmVsLC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24gLm1kYy1mbG9hdGluZy1sYWJlbFtkaXI9cnRsXXtsZWZ0OmluaXRpYWw7cmlnaHQ6NDhweH0ubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmd7bGVmdDoxNnB4O3JpZ2h0OmluaXRpYWx9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tbGVhZGluZywubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmdbZGlyPXJ0bF17bGVmdDppbml0aWFsO3JpZ2h0OjE2cHh9Lm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTM3LjI1cHgpIHRyYW5zbGF0ZVgoLTMycHgpIHNjYWxlKDEpfVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZSwubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZVtkaXI9cnRsXXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzcuMjVweCkgdHJhbnNsYXRlWCgzMnB4KSBzY2FsZSgxKX0ubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZXtmb250LXNpemU6Ljc1cmVtfS5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlLC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lLS11cGdyYWRlZCAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzQuNzVweCkgdHJhbnNsYXRlWCgtMzJweCkgc2NhbGUoMC43NSl9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlLC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlW2Rpcj1ydGxdLFtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLW5vdGNoZWQtb3V0bGluZS0tdXBncmFkZWQgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmUsLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlW2Rpcj1ydGxde3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zNC43NXB4KSB0cmFuc2xhdGVYKDMycHgpIHNjYWxlKDAuNzUpfS5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlLC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lLS11cGdyYWRlZCAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZXtmb250LXNpemU6MXJlbX0ubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLWZsb2F0aW5nLWxhYmVsLS1zaGFrZXthbmltYXRpb246bWRjLWZsb2F0aW5nLWxhYmVsLXNoYWtlLWZsb2F0LWFib3ZlLXRleHQtZmllbGQtb3V0bGluZWQtbGVhZGluZy1pY29uIDI1MG1zIDF9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLXNoYWtlLC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkW2Rpcj1ydGxdIC5tZGMtZmxvYXRpbmctbGFiZWwtLXNoYWtle2FuaW1hdGlvbjptZGMtZmxvYXRpbmctbGFiZWwtc2hha2UtZmxvYXQtYWJvdmUtdGV4dC1maWVsZC1vdXRsaW5lZC1sZWFkaW5nLWljb24tcnRsIDI1MG1zIDF9Lm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1mbG9hdGluZy1sYWJlbHtsZWZ0OjM2cHg7cmlnaHQ6aW5pdGlhbH1bZGlyPXJ0bF0gLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgLm1kYy1mbG9hdGluZy1sYWJlbCwubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCAubWRjLWZsb2F0aW5nLWxhYmVsW2Rpcj1ydGxde2xlZnQ6aW5pdGlhbDtyaWdodDozNnB4fS5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29ue3BhZGRpbmctbGVmdDoxNnB4O3BhZGRpbmctcmlnaHQ6NDhweH0ubWRjLXRleHQtZmllbGQtLXdpdGgtdHJhaWxpbmctaWNvbiAubWRjLXRleHQtZmllbGRfX2ljb24tLXRyYWlsaW5ne2xlZnQ6aW5pdGlhbDtyaWdodDoxMnB4fVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLXdpdGgtdHJhaWxpbmctaWNvbiAubWRjLXRleHQtZmllbGRfX2ljb24tLXRyYWlsaW5nLC5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tdHJhaWxpbmdbZGlyPXJ0bF17bGVmdDoxMnB4O3JpZ2h0OmluaXRpYWx9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uLC5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uW2Rpcj1ydGxde3BhZGRpbmctbGVmdDo0OHB4O3BhZGRpbmctcmlnaHQ6MTZweH0ubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS13aXRoLXRyYWlsaW5nLWljb257cGFkZGluZy1yaWdodDo0OHB4O3BhZGRpbmctbGVmdDo0OHB4fS5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLXdpdGgtdHJhaWxpbmctaWNvbiAubWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmd7bGVmdDoxNnB4O3JpZ2h0OmluaXRpYWx9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ubWRjLXRleHQtZmllbGQtLXdpdGgtdHJhaWxpbmctaWNvbiAubWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tbGVhZGluZ1tkaXI9cnRsXXtsZWZ0OmluaXRpYWw7cmlnaHQ6MTZweH0ubWRjLXRleHQtZmllbGQtLXdpdGgtbGVhZGluZy1pY29uLm1kYy10ZXh0LWZpZWxkLS13aXRoLXRyYWlsaW5nLWljb24gLm1kYy10ZXh0LWZpZWxkX19pY29uLS10cmFpbGluZ3tsZWZ0OmluaXRpYWw7cmlnaHQ6MTJweH1bZGlyPXJ0bF0gLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tdHJhaWxpbmcsLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tdHJhaWxpbmdbZGlyPXJ0bF17bGVmdDoxMnB4O3JpZ2h0OmluaXRpYWx9Lm1kYy10ZXh0LWZpZWxkX19pbnB1dDpyZXF1aXJlZH4ubWRjLWZsb2F0aW5nLWxhYmVsOjphZnRlciwubWRjLXRleHQtZmllbGRfX2lucHV0OnJlcXVpcmVkfi5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtZmxvYXRpbmctbGFiZWw6OmFmdGVye21hcmdpbi1sZWZ0OjFweDtjb250ZW50OlwiKlwifS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWF7ZGlzcGxheTppbmxpbmUtZmxleDt3aWR0aDphdXRvO2hlaWdodDphdXRvO3BhZGRpbmc6MDtvdmVyZmxvdzp2aXNpYmxlO3RyYW5zaXRpb246bm9uZX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLXRleHQtZmllbGQtLXRleHRhcmVhOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gsLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYTpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1jb2xvcjpyZ2JhKDAsMCwwLC4zOCl9Lm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYTpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCk6bm90KC5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCk6aG92ZXIgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYTpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCk6bm90KC5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCk6aG92ZXIgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWE6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWZvY3VzZWQpOmhvdmVyIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItY29sb3I6cmdiYSgwLDAsMCwuODcpfS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWE6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19sZWFkaW5nLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWE6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCwubWRjLXRleHQtZmllbGQtLXRleHRhcmVhOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKS5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCAubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmd7Ym9yZGVyLWNvbG9yOiM2MjAwZWU7Ym9yZGVyLWNvbG9yOnZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjNjIwMGVlKX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtZmxvYXRpbmctbGFiZWwtLXNoYWtle2FuaW1hdGlvbjptZGMtZmxvYXRpbmctbGFiZWwtc2hha2UtZmxvYXQtYWJvdmUtdGV4dGFyZWEgMjUwbXMgMX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19sZWFkaW5ne2JvcmRlci1yYWRpdXM6NHB4IDAgMCA0cHh9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYSAubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZ1tkaXI9cnRsXXtib3JkZXItcmFkaXVzOjAgNHB4IDRweCAwfS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1yYWRpdXM6MCA0cHggNHB4IDB9W2Rpcj1ydGxdIC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5nLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1ub3RjaGVkLW91dGxpbmUgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5nW2Rpcj1ydGxde2JvcmRlci1yYWRpdXM6NHB4IDAgMCA0cHh9Lm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYSAubWRjLXRleHQtZmllbGRfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy10ZXh0LWZpZWxkX19yaXBwbGU6OmFmdGVye2NvbnRlbnQ6bm9uZX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKXtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE0NCUpIHNjYWxlKDEpfS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmV7Zm9udC1zaXplOi43NXJlbX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMzAlKSBzY2FsZSgwLjc1KX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3Zle2ZvbnQtc2l6ZToxcmVtfS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy10ZXh0LWZpZWxkLWNoYXJhY3Rlci1jb3VudGVye2xlZnQ6aW5pdGlhbDtyaWdodDoxNnB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxM3B4fVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlciwubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcltkaXI9cnRsXXtsZWZ0OjE2cHg7cmlnaHQ6aW5pdGlhbH0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtdGV4dC1maWVsZF9faW5wdXR7YWxpZ24tc2VsZjpzdHJldGNoO2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6YXV0bzttYXJnaW4tdG9wOjhweDttYXJnaW4tYm90dG9tOjFweDttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDoxcHg7cGFkZGluZzowIDE2cHggMTZweDtsaW5lLWhlaWdodDoxLjc1cmVtfVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtdGV4dC1maWVsZF9faW5wdXQsLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYSAubWRjLXRleHQtZmllbGRfX2lucHV0W2Rpcj1ydGxde21hcmdpbi1sZWZ0OjFweDttYXJnaW4tcmlnaHQ6MH0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcisubWRjLXRleHQtZmllbGRfX2lucHV0e21hcmdpbi1ib3R0b206MjhweDtwYWRkaW5nLWJvdHRvbTowfS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy1mbG9hdGluZy1sYWJlbHt0b3A6MTdweDt3aWR0aDphdXRvO3BvaW50ZXItZXZlbnRzOm5vbmV9Lm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYSAubWRjLWZsb2F0aW5nLWxhYmVsOm5vdCgubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZSl7dHJhbnNmb3JtOm5vbmV9Lm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYS5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCwubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItd2lkdGg6MnB4fS5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoe3BhZGRpbmc6MDt3aWR0aDoxMDAlfS5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLWxpbmUtcmlwcGxlOjpiZWZvcmV7Ym9yZGVyLWJvdHRvbS1jb2xvcjpyZ2JhKDAsMCwwLC40Mil9Lm1kYy10ZXh0LWZpZWxkLS1mdWxsd2lkdGgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtbGluZS1yaXBwbGU6OmJlZm9yZXtib3JkZXItYm90dG9tLWNvbG9yOnJnYmEoMCwwLDAsLjQyKX0ubWRjLXRleHQtZmllbGQtLWZ1bGx3aWR0aDpub3QoLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYSl7ZGlzcGxheTpmbGV4fS5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoOm5vdCgubWRjLXRleHQtZmllbGQtLXRleHRhcmVhKSAubWRjLXRleHQtZmllbGRfX3JpcHBsZTo6YmVmb3JlLC5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoOm5vdCgubWRjLXRleHQtZmllbGQtLXRleHRhcmVhKSAubWRjLXRleHQtZmllbGRfX3JpcHBsZTo6YWZ0ZXJ7Y29udGVudDpub25lfS5tZGMtdGV4dC1maWVsZC0tZnVsbHdpZHRoOm5vdCgubWRjLXRleHQtZmllbGQtLXRleHRhcmVhKTpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCl7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0ubWRjLXRleHQtZmllbGQtLWZ1bGx3aWR0aC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEgLm1kYy10ZXh0LWZpZWxkX19pbnB1dHtyZXNpemU6dmVydGljYWx9Lm1kYy10ZXh0LWZpZWxkLS1mdWxsd2lkdGgubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIC5tZGMtbGluZS1yaXBwbGU6OmJlZm9yZXtib3JkZXItYm90dG9tLWNvbG9yOiNiMDAwMjA7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1tZGMtdGhlbWUtZXJyb3IsICNiMDAwMjApfS5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZXtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Ym94LXNpemluZzpib3JkZXItYm94fS5tZGMtdGV4dC1maWVsZCsubWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmV7cGFkZGluZy1yaWdodDoxNnB4O3BhZGRpbmctbGVmdDoxNnB4fS5tZGMtZm9ybS1maWVsZD4ubWRjLXRleHQtZmllbGQrbGFiZWx7YWxpZ24tc2VsZjpmbGV4LXN0YXJ0fS5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy1mbG9hdGluZy1sYWJlbHtjb2xvcjpyZ2JhKDk4LDAsMjM4LC44Nyl9Lm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKy5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHQ6bm90KC5tZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dC0tdmFsaWRhdGlvbi1tc2cpe29wYWNpdHk6MX0ubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIC5tZGMtbGluZS1yaXBwbGU6OmJlZm9yZXtib3JkZXItYm90dG9tLWNvbG9yOiNiMDAwMjA7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1tZGMtdGhlbWUtZXJyb3IsICNiMDAwMjApfS5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCk6aG92ZXIgLm1kYy1saW5lLXJpcHBsZTo6YmVmb3Jle2JvcmRlci1ib3R0b20tY29sb3I6I2IwMDAyMDtib3JkZXItYm90dG9tLWNvbG9yOnZhcigtLW1kYy10aGVtZS1lcnJvciwgI2IwMDAyMCl9Lm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLWxpbmUtcmlwcGxlOjphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiNiMDAwMjA7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1tZGMtdGhlbWUtZXJyb3IsICNiMDAwMjApfS5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy1mbG9hdGluZy1sYWJlbHtjb2xvcjojYjAwMDIwO2NvbG9yOnZhcigtLW1kYy10aGVtZS1lcnJvciwgI2IwMDAyMCl9Lm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKS5tZGMtdGV4dC1maWVsZC0taW52YWxpZCsubWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmUgLm1kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0LS12YWxpZGF0aW9uLW1zZ3tjb2xvcjojYjAwMDIwO2NvbG9yOnZhcigtLW1kYy10aGVtZS1lcnJvciwgI2IwMDAyMCl9Lm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkIC5tZGMtdGV4dC1maWVsZF9faW5wdXR7Y2FyZXQtY29sb3I6I2IwMDAyMDtjYXJldC1jb2xvcjp2YXIoLS1tZGMtdGhlbWUtZXJyb3IsICNiMDAwMjApfS5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy10ZXh0LWZpZWxkX19pY29uLS10cmFpbGluZ3tjb2xvcjojYjAwMDIwO2NvbG9yOnZhcigtLW1kYy10aGVtZS1lcnJvciwgI2IwMDAyMCl9Lm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkKy5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHQtLXZhbGlkYXRpb24tbXNne29wYWNpdHk6MX0ubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gsLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYS5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1jb2xvcjojYjAwMDIwO2JvcmRlci1jb2xvcjp2YXIoLS1tZGMtdGhlbWUtZXJyb3IsICNiMDAwMjApfS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWZvY3VzZWQpOmhvdmVyIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19sZWFkaW5nLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWZvY3VzZWQpOmhvdmVyIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCwubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKTpub3QoLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKTpob3ZlciAubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmd7Ym9yZGVyLWNvbG9yOiNiMDAwMjA7Ym9yZGVyLWNvbG9yOnZhcigtLW1kYy10aGVtZS1lcnJvciwgI2IwMDAyMCl9Lm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYS5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYS5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItY29sb3I6I2IwMDAyMDtib3JkZXItY29sb3I6dmFyKC0tbWRjLXRoZW1lLWVycm9yLCAjYjAwMDIwKX0ubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZywubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5ne2JvcmRlci1jb2xvcjojYjAwMDIwO2JvcmRlci1jb2xvcjp2YXIoLS1tZGMtdGhlbWUtZXJyb3IsICNiMDAwMjApfS5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWZvY3VzZWQpOmhvdmVyIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19sZWFkaW5nLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWZvY3VzZWQpOmhvdmVyIC5tZGMtbm90Y2hlZC1vdXRsaW5lIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCwubWRjLXRleHQtZmllbGQtLW91dGxpbmVkLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKTpub3QoLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKTpob3ZlciAubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmd7Ym9yZGVyLWNvbG9yOiNiMDAwMjA7Ym9yZGVyLWNvbG9yOnZhcigtLW1kYy10aGVtZS1lcnJvciwgI2IwMDAyMCl9Lm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZC5tZGMtdGV4dC1maWVsZC0taW52YWxpZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQubWRjLXRleHQtZmllbGQtLWludmFsaWQ6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItY29sb3I6I2IwMDAyMDtib3JkZXItY29sb3I6dmFyKC0tbWRjLXRoZW1lLWVycm9yLCAjYjAwMDIwKX0ubWRjLXRleHQtZmllbGQtLWRpc2FibGVke2JhY2tncm91bmQtY29sb3I6I2ZhZmFmYTtwb2ludGVyLWV2ZW50czpub25lfS5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy1saW5lLXJpcHBsZTo6YmVmb3Jle2JvcmRlci1ib3R0b20tY29sb3I6cmdiYSgwLDAsMCwuMDYpfS5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy10ZXh0LWZpZWxkX19pbnB1dHtjb2xvcjpyZ2JhKDAsMCwwLC4zOCl9QG1lZGlhIGFsbHsubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtdGV4dC1maWVsZF9faW5wdXQ6OnBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMCwwLDAsLjM4KX19QG1lZGlhIGFsbHsubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtdGV4dC1maWVsZF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMCwwLDAsLjM4KX19Lm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLWZsb2F0aW5nLWxhYmVse2NvbG9yOnJnYmEoMCwwLDAsLjM4KX0ubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKy5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHR7Y29sb3I6cmdiYSgwLDAsMCwuMzgpfS5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy10ZXh0LWZpZWxkLWNoYXJhY3Rlci1jb3VudGVyLC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQrLm1kYy10ZXh0LWZpZWxkLWhlbHBlci1saW5lIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcntjb2xvcjpyZ2JhKDAsMCwwLC4zOCl9Lm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmd7Y29sb3I6cmdiYSgwLDAsMCwuMyl9Lm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLXRleHQtZmllbGRfX2ljb24tLXRyYWlsaW5ne2NvbG9yOnJnYmEoMCwwLDAsLjMpfUBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKXsubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtbGluZS1yaXBwbGU6OmJlZm9yZXtib3JkZXItYm90dG9tLWNvbG9yOkdyYXlUZXh0fX1AbWVkaWEgc2NyZWVuIGFuZCAoLW1zLWhpZ2gtY29udHJhc3Q6IGFjdGl2ZSl7Lm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLXRleHQtZmllbGRfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjpHcmF5VGV4dH19QG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpey5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy10ZXh0LWZpZWxkX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6R3JheVRleHR9fUBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKXsubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtZmxvYXRpbmctbGFiZWx7Y29sb3I6R3JheVRleHR9fUBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKXsubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKy5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHR7Y29sb3I6R3JheVRleHR9fUBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKXsubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlciwubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKy5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXJ7Y29sb3I6R3JheVRleHR9fUBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKXsubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tbGVhZGluZ3tjb2xvcjpHcmF5VGV4dH19QG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpey5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy10ZXh0LWZpZWxkX19pY29uLS10cmFpbGluZ3tjb2xvcjpHcmF5VGV4dH19Lm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLWZsb2F0aW5nLWxhYmVse2N1cnNvcjpkZWZhdWx0fS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEubWRjLXRleHQtZmllbGQtLWRpc2FibGVke2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7YmFja2dyb3VuZC1jb2xvcjojZjlmOWY5fS5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19sZWFkaW5nLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCwubWRjLXRleHQtZmllbGQtLXRleHRhcmVhLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCAubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmd7Ym9yZGVyLWNvbG9yOnJnYmEoMCwwLDAsLjA2KX1AbWVkaWEgc2NyZWVuIGFuZCAoLW1zLWhpZ2gtY29udHJhc3Q6IGFjdGl2ZSl7Lm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYS5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX2xlYWRpbmcsLm1kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYS5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIC5tZGMtbm90Y2hlZC1vdXRsaW5lX190cmFpbGluZ3tib3JkZXItY29sb3I6R3JheVRleHR9fS5tZGMtdGV4dC1maWVsZC0tZW5kLWFsaWduZWQgLm1kYy10ZXh0LWZpZWxkX19pbnB1dHt0ZXh0LWFsaWduOnJpZ2h0fVtkaXI9cnRsXSAubWRjLXRleHQtZmllbGQtLWVuZC1hbGlnbmVkIC5tZGMtdGV4dC1maWVsZF9faW5wdXQsLm1kYy10ZXh0LWZpZWxkLS1lbmQtYWxpZ25lZCAubWRjLXRleHQtZmllbGRfX2lucHV0W2Rpcj1ydGxde3RleHQtYWxpZ246bGVmdH1Aa2V5ZnJhbWVzIG1kYy1mbG9hdGluZy1sYWJlbC1zaGFrZS1mbG9hdC1hYm92ZS10ZXh0LWZpZWxkLW91dGxpbmVkezAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKGNhbGMoMCAtIDAlKSkgdHJhbnNsYXRlWSgtMzQuNzVweCkgc2NhbGUoMC43NSl9MzMle2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuNSwgMCwgMC43MDE3MzIsIDAuNDk1ODE5KTt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKDQlIC0gMCUpKSB0cmFuc2xhdGVZKC0zNC43NXB4KSBzY2FsZSgwLjc1KX02NiV7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4zMDI0MzUsIDAuMzgxMzUyLCAwLjU1LCAwLjk1NjM1Mik7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYygtNCUgLSAwJSkpIHRyYW5zbGF0ZVkoLTM0Ljc1cHgpIHNjYWxlKDAuNzUpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYygwIC0gMCUpKSB0cmFuc2xhdGVZKC0zNC43NXB4KSBzY2FsZSgwLjc1KX19QGtleWZyYW1lcyBtZGMtZmxvYXRpbmctbGFiZWwtc2hha2UtZmxvYXQtYWJvdmUtdGV4dC1maWVsZC1vdXRsaW5lZC1sZWFkaW5nLWljb257MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYygwIC0gMCkpIHRyYW5zbGF0ZVkoLTM0Ljc1cHgpIHNjYWxlKDAuNzUpfTMzJXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjUsIDAsIDAuNzAxNzMyLCAwLjQ5NTgxOSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYyg0JSAtIDApKSB0cmFuc2xhdGVZKC0zNC43NXB4KSBzY2FsZSgwLjc1KX02NiV7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4zMDI0MzUsIDAuMzgxMzUyLCAwLjU1LCAwLjk1NjM1Mik7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYygtNCUgLSAwKSkgdHJhbnNsYXRlWSgtMzQuNzVweCkgc2NhbGUoMC43NSl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKDAgLSAwKSkgdHJhbnNsYXRlWSgtMzQuNzVweCkgc2NhbGUoMC43NSl9fUBrZXlmcmFtZXMgbWRjLWZsb2F0aW5nLWxhYmVsLXNoYWtlLWZsb2F0LWFib3ZlLXRleHQtZmllbGQtb3V0bGluZWQtbGVhZGluZy1pY29uLXJ0bHswJXt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKDAgLSAwKSkgdHJhbnNsYXRlWSgtMzQuNzVweCkgc2NhbGUoMC43NSl9MzMle2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuNSwgMCwgMC43MDE3MzIsIDAuNDk1ODE5KTt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKDQlIC0gMCkpIHRyYW5zbGF0ZVkoLTM0Ljc1cHgpIHNjYWxlKDAuNzUpfTY2JXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjMwMjQzNSwgMC4zODEzNTIsIDAuNTUsIDAuOTU2MzUyKTt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKC00JSAtIDApKSB0cmFuc2xhdGVZKC0zNC43NXB4KSBzY2FsZSgwLjc1KX0xMDAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKGNhbGMoMCAtIDApKSB0cmFuc2xhdGVZKC0zNC43NXB4KSBzY2FsZSgwLjc1KX19QGtleWZyYW1lcyBtZGMtZmxvYXRpbmctbGFiZWwtc2hha2UtZmxvYXQtYWJvdmUtdGV4dGFyZWF7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYygwIC0gMCUpKSB0cmFuc2xhdGVZKC0xMzAlKSBzY2FsZSgwLjc1KX0zMyV7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC41LCAwLCAwLjcwMTczMiwgMC40OTU4MTkpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKGNhbGMoNCUgLSAwJSkpIHRyYW5zbGF0ZVkoLTEzMCUpIHNjYWxlKDAuNzUpfTY2JXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjMwMjQzNSwgMC4zODEzNTIsIDAuNTUsIDAuOTU2MzUyKTt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKC00JSAtIDAlKSkgdHJhbnNsYXRlWSgtMTMwJSkgc2NhbGUoMC43NSl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKDAgLSAwJSkpIHRyYW5zbGF0ZVkoLTEzMCUpIHNjYWxlKDAuNzUpfX0ubWF0ZXJpYWwtaWNvbnN7Zm9udC1mYW1pbHk6dmFyKC0tbWRjLWljb24tZm9udCwgXCJNYXRlcmlhbCBJY29uc1wiKTtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC1zaXplOnZhcigtLW1kYy1pY29uLXNpemUsIDI0cHgpO2xpbmUtaGVpZ2h0OjE7bGV0dGVyLXNwYWNpbmc6bm9ybWFsO3RleHQtdHJhbnNmb3JtOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2hpdGUtc3BhY2U6bm93cmFwO3dvcmQtd3JhcDpub3JtYWw7ZGlyZWN0aW9uOmx0cjstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO3RleHQtcmVuZGVyaW5nOm9wdGltaXplTGVnaWJpbGl0eTstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7Zm9udC1mZWF0dXJlLXNldHRpbmdzOlwibGlnYVwifS5oaWRkZW4sLmhpZGRlbjo6YmVmb3JlLC5oaWRkZW46OmFmdGVye2Rpc3BsYXk6bm9uZX06aG9zdHtkaXNwbGF5OmlubGluZS1mbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtvdXRsaW5lOm5vbmV9Omhvc3QoW2Z1bGx3aWR0aF0pe2Rpc3BsYXk6ZmxleH0ubWRjLXRleHQtZmllbGR7d2lkdGg6MTAwJTtib3JkZXItcmFkaXVzOjRweCA0cHggMCAwO2JvcmRlci1yYWRpdXM6dmFyKC0tbWRjLXRleHQtZmllbGQtZmlsbGVkLWJvcmRlci1yYWRpdXMsIDRweCA0cHggMCAwKX1td2Mtbm90Y2hlZC1vdXRsaW5ley0tbWRjLW5vdGNoZWQtb3V0bGluZS1ib3JkZXItY29sb3I6IHZhcigtLW1kYy10ZXh0LWZpZWxkLW91dGxpbmVkLWlkbGUtYm9yZGVyLWNvbG9yLCByZ2JhKDAsIDAsIDAsIDAuMzgpKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pOmhvdmVyKSA6bm90KC5tZGMtdGV4dC1maWVsZC0taW52YWxpZCk6bm90KC5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCkgbXdjLW5vdGNoZWQtb3V0bGluZXstLW1kYy1ub3RjaGVkLW91dGxpbmUtYm9yZGVyLWNvbG9yOiB2YXIoLS1tZGMtdGV4dC1maWVsZC1vdXRsaW5lZC1ob3Zlci1ib3JkZXItY29sb3IsIHJnYmEoMCwgMCwgMCwgMC44NykpfTpob3N0KDpub3QoW2Rpc2FibGVkXSkpIC5tZGMtdGV4dC1maWVsZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCl7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1maWxsLWNvbG9yLCB3aGl0ZXNtb2tlKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQ6bm90KC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWludmFsaWQpIC5tZGMtdGV4dC1maWVsZF9faW5wdXR7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1pZGxlLWxpbmUtY29sb3IsIGJsYWNrKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQ6bm90KC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWludmFsaWQpIC5tZGMtdGV4dC1maWVsZF9faW5wdXQ6aG92ZXJ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1ob3Zlci1saW5lLWNvbG9yLCAjMDAwMDAxKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQubWRjLXRleHQtZmllbGQtLWludmFsaWQgbXdjLW5vdGNoZWQtb3V0bGluZXstLW1kYy1ub3RjaGVkLW91dGxpbmUtYm9yZGVyLWNvbG9yOiB2YXIoLS1tZGMtdGV4dC1maWVsZC1lcnJvci1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLWVycm9yLCAjYjAwMDIwKSl9Omhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLm1kYy10ZXh0LWZpZWxkLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkKy5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXIsOmhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLm1kYy10ZXh0LWZpZWxkLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkIC5tZGMtdGV4dC1maWVsZF9faWNvbntjb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1lcnJvci1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLWVycm9yLCAjYjAwMDIwKSl9Omhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLWludmFsaWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWZvY3VzZWQpIC5tZGMtZmxvYXRpbmctbGFiZWwsOmhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLWludmFsaWQpOm5vdCgubWRjLXRleHQtZmllbGQtLWZvY3VzZWQpIC5tZGMtZmxvYXRpbmctbGFiZWw6OmFmdGVye2NvbG9yOnZhcigtLW1kYy10ZXh0LWZpZWxkLWxhYmVsLWluay1jb2xvciwgcmdiYSgwLCAwLCAwLCAwLjYpKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgbXdjLW5vdGNoZWQtb3V0bGluZXstLW1kYy1ub3RjaGVkLW91dGxpbmUtc3Ryb2tlLXdpZHRoOiAycHh9Omhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLm1kYy10ZXh0LWZpZWxkLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkOm5vdCgubWRjLXRleHQtZmllbGQtLWludmFsaWQpIG13Yy1ub3RjaGVkLW91dGxpbmV7LS1tZGMtbm90Y2hlZC1vdXRsaW5lLWJvcmRlci1jb2xvcjogdmFyKC0tbWRjLXRleHQtZmllbGQtZm9jdXNlZC1sYWJlbC1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLXByaW1hcnksIHJnYmEoOTgsIDAsIDIzOCwgMC44NykpKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQubWRjLXRleHQtZmllbGQtLWZvY3VzZWQ6bm90KC5tZGMtdGV4dC1maWVsZC0taW52YWxpZCkgLm1kYy1mbG9hdGluZy1sYWJlbHtjb2xvcjojNjIwMGVlO2NvbG9yOnZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjNjIwMGVlKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQubWRjLXRleHQtZmllbGQtLWZvY3VzZWQ6bm90KC5tZGMtdGV4dC1maWVsZC0taW52YWxpZCkgLm1kYy10ZXh0LWZpZWxkX19pbnB1dDpyZXF1aXJlZH4ubWRjLWZsb2F0aW5nLWxhYmVsOjphZnRlciw6aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQubWRjLXRleHQtZmllbGQtLWZvY3VzZWQ6bm90KC5tZGMtdGV4dC1maWVsZC0taW52YWxpZCkgLm1kYy10ZXh0LWZpZWxkX19pbnB1dDpyZXF1aXJlZH4ubWRjLW5vdGNoZWQtb3V0bGluZSAubWRjLWZsb2F0aW5nLWxhYmVsOjphZnRlcntjb2xvcjojNjIwMGVlO2NvbG9yOnZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjNjIwMGVlKX06aG9zdCg6bm90KFtkaXNhYmxlZF0pKSAubWRjLXRleHQtZmllbGQgLm1kYy10ZXh0LWZpZWxkX19pbnB1dHtjb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1pbmstY29sb3IsIHJnYmEoMCwgMCwgMCwgMC44NykpfTpob3N0KDpub3QoW2Rpc2FibGVkXSkpIC5tZGMtdGV4dC1maWVsZCAubWRjLXRleHQtZmllbGRfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1sYWJlbC1pbmstY29sb3IsIHJnYmEoMCwgMCwgMCwgMC42KSl9Omhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLm1kYy10ZXh0LWZpZWxkLWhlbHBlci1saW5lIC5tZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dDpub3QoLm1kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0LS12YWxpZGF0aW9uLW1zZyksOmhvc3QoOm5vdChbZGlzYWJsZWRdKSkgLm1kYy10ZXh0LWZpZWxkLWhlbHBlci1saW5lOm5vdCgubWRjLXRleHQtZmllbGQtLWludmFsaWQpIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcntjb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1sYWJlbC1pbmstY29sb3IsIHJnYmEoMCwgMCwgMCwgMC42KSl9Omhvc3QoW2Rpc2FibGVkXSkgLm1kYy10ZXh0LWZpZWxkOm5vdCgubWRjLXRleHQtZmllbGQtLW91dGxpbmVkKXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLW1kYy10ZXh0LWZpZWxkLWRpc2FibGVkLWZpbGwtY29sb3IsICNmYWZhZmEpfTpob3N0KFtkaXNhYmxlZF0pIC5tZGMtdGV4dC1maWVsZC5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQgbXdjLW5vdGNoZWQtb3V0bGluZXstLW1kYy1ub3RjaGVkLW91dGxpbmUtYm9yZGVyLWNvbG9yOiB2YXIoLS1tZGMtdGV4dC1maWVsZC1vdXRsaW5lZC1kaXNhYmxlZC1ib3JkZXItY29sb3IsIHJnYmEoMCwgMCwgMCwgMC4wNikpfTpob3N0KFtkaXNhYmxlZF0pIC5tZGMtdGV4dC1maWVsZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkKTpub3QoLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKSAubWRjLWZsb2F0aW5nLWxhYmVsLDpob3N0KFtkaXNhYmxlZF0pIC5tZGMtdGV4dC1maWVsZDpub3QoLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkKTpub3QoLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKSAubWRjLWZsb2F0aW5nLWxhYmVsOjphZnRlcntjb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1kaXNhYmxlZC1pbmstY29sb3IsIHJnYmEoMCwgMCwgMCwgMC4zOCkpfTpob3N0KFtkaXNhYmxlZF0pIC5tZGMtdGV4dC1maWVsZCAubWRjLXRleHQtZmllbGRfX2lucHV0LDpob3N0KFtkaXNhYmxlZF0pIC5tZGMtdGV4dC1maWVsZCAubWRjLXRleHQtZmllbGRfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1kaXNhYmxlZC1pbmstY29sb3IsIHJnYmEoMCwgMCwgMCwgMC4zOCkpfTpob3N0KFtkaXNhYmxlZF0pIC5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHQsOmhvc3QoW2Rpc2FibGVkXSkgLm1kYy10ZXh0LWZpZWxkLWhlbHBlci1saW5lIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcntjb2xvcjp2YXIoLS1tZGMtdGV4dC1maWVsZC1kaXNhYmxlZC1pbmstY29sb3IsIHJnYmEoMCwgMCwgMCwgMC4zOCkpfWA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1td2MtdGV4dGZpZWxkLWNzcy5qcy5tYXAiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5pbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuaW1wb3J0IHsgVGV4dEZpZWxkQmFzZSB9IGZyb20gJy4vbXdjLXRleHRmaWVsZC1iYXNlLmpzJztcbmltcG9ydCB7IHN0eWxlIH0gZnJvbSAnLi9td2MtdGV4dGZpZWxkLWNzcy5qcyc7XG5sZXQgVGV4dEZpZWxkID0gY2xhc3MgVGV4dEZpZWxkIGV4dGVuZHMgVGV4dEZpZWxkQmFzZSB7XG59O1xuVGV4dEZpZWxkLnN0eWxlcyA9IHN0eWxlO1xuVGV4dEZpZWxkID0gX19kZWNvcmF0ZShbXG4gICAgY3VzdG9tRWxlbWVudCgnbXdjLXRleHRmaWVsZCcpXG5dLCBUZXh0RmllbGQpO1xuZXhwb3J0IHsgVGV4dEZpZWxkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1td2MtdGV4dGZpZWxkLmpzLm1hcCIsIi8qKlxuICogRnVzZS5qcyB2NS4yLjMgLSBMaWdodHdlaWdodCBmdXp6eS1zZWFyY2ggKGh0dHA6Ly9mdXNlanMuaW8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDIwIEtpcm8gUmlzayAoaHR0cDovL2tpcm8ubWUpXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLiBBcGFjaGUgU29mdHdhcmUgTGljZW5zZSAyLjBcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqL1xuXG5jb25zdCBJTkZJTklUWSA9IDEgLyAwO1xuXG5jb25zdCBpc0FycmF5ID0gKHZhbHVlKSA9PlxuICAhQXJyYXkuaXNBcnJheVxuICAgID8gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG5cbi8vIEFkYXB0ZWQgZnJvbTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvZjRjYTM5NmE3OTY0MzU0MjJiZDRmZDQxZmFkYmQyMjVlZGRkZjE3NS8uaW50ZXJuYWwvYmFzZVRvU3RyaW5nLmpzXG5jb25zdCBiYXNlVG9TdHJpbmcgPSAodmFsdWUpID0+IHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIGxldCByZXN1bHQgPSB2YWx1ZSArICcnO1xuICByZXR1cm4gcmVzdWx0ID09ICcwJyAmJiAxIC8gdmFsdWUgPT0gLUlORklOSVRZID8gJy0wJyA6IHJlc3VsdFxufTtcblxuY29uc3QgdG9TdHJpbmcgPSAodmFsdWUpID0+ICh2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpKTtcblxuY29uc3QgaXNTdHJpbmcgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG5cbmNvbnN0IGlzTnVtYmVyID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuXG5jb25zdCBpc0RlZmluZWQgPSAodmFsdWUpID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGw7XG5cbmNvbnN0IGlzQmxhbmsgPSAodmFsdWUpID0+ICF2YWx1ZS50cmltKCkubGVuZ3RoO1xuXG5mdW5jdGlvbiBnZXQob2JqLCBwYXRoKSB7XG4gIGxldCBsaXN0ID0gW107XG4gIGxldCBhcnIgPSBmYWxzZTtcblxuICBjb25zdCBfZ2V0ID0gKG9iaiwgcGF0aCkgPT4ge1xuICAgIGlmICghcGF0aCkge1xuICAgICAgLy8gSWYgdGhlcmUncyBubyBwYXRoIGxlZnQsIHdlJ3ZlIGdvdHRlbiB0byB0aGUgb2JqZWN0IHdlIGNhcmUgYWJvdXQuXG4gICAgICBsaXN0LnB1c2gob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZG90SW5kZXggPSBwYXRoLmluZGV4T2YoJy4nKTtcblxuICAgICAgbGV0IGtleSA9IHBhdGg7XG4gICAgICBsZXQgcmVtYWluaW5nID0gbnVsbDtcblxuICAgICAgaWYgKGRvdEluZGV4ICE9PSAtMSkge1xuICAgICAgICBrZXkgPSBwYXRoLnNsaWNlKDAsIGRvdEluZGV4KTtcbiAgICAgICAgcmVtYWluaW5nID0gcGF0aC5zbGljZShkb3RJbmRleCArIDEpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuXG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBpZiAoIXJlbWFpbmluZyAmJiAoaXNTdHJpbmcodmFsdWUpIHx8IGlzTnVtYmVyKHZhbHVlKSkpIHtcbiAgICAgICAgICBsaXN0LnB1c2godG9TdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGFyciA9IHRydWU7XG4gICAgICAgICAgLy8gU2VhcmNoIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBfZ2V0KHZhbHVlW2ldLCByZW1haW5pbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZW1haW5pbmcpIHtcbiAgICAgICAgICAvLyBBbiBvYmplY3QuIFJlY3Vyc2UgZnVydGhlci5cbiAgICAgICAgICBfZ2V0KHZhbHVlLCByZW1haW5pbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9nZXQob2JqLCBwYXRoKTtcblxuICBpZiAoYXJyKSB7XG4gICAgcmV0dXJuIGxpc3RcbiAgfVxuXG4gIHJldHVybiBsaXN0WzBdXG59XG5cbmNvbnN0IE1hdGNoT3B0aW9ucyA9IHtcbiAgLy8gV2hldGhlciB0aGUgbWF0Y2hlcyBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdCBzZXQuIFdoZW4gdHJ1ZSwgZWFjaCByZWNvcmQgaW4gdGhlIHJlc3VsdFxuICAvLyBzZXQgd2lsbCBpbmNsdWRlIHRoZSBpbmRpY2VzIG9mIHRoZSBtYXRjaGVkIGNoYXJhY3RlcnMuXG4gIC8vIFRoZXNlIGNhbiBjb25zZXF1ZW50bHkgYmUgdXNlZCBmb3IgaGlnaGxpZ2h0aW5nIHB1cnBvc2VzLlxuICBpbmNsdWRlTWF0Y2hlczogZmFsc2UsXG4gIC8vIFdoZW4gdHJ1ZSwgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIHdpbGwgY29udGludWUgdG8gdGhlIGVuZCBvZiBhIHNlYXJjaCBwYXR0ZXJuIGV2ZW4gaWZcbiAgLy8gYSBwZXJmZWN0IG1hdGNoIGhhcyBhbHJlYWR5IGJlZW4gbG9jYXRlZCBpbiB0aGUgc3RyaW5nLlxuICBmaW5kQWxsTWF0Y2hlczogZmFsc2UsXG4gIC8vIE1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCBtdXN0IGJlIG1hdGNoZWQgYmVmb3JlIGEgcmVzdWx0IGlzIGNvbnNpZGVyZWQgYSBtYXRjaFxuICBtaW5NYXRjaENoYXJMZW5ndGg6IDFcbn07XG5cbmNvbnN0IEJhc2ljT3B0aW9ucyA9IHtcbiAgLy8gV2hlbiB0cnVlLCB0aGUgYWxnb3JpdGhtIGNvbnRpbnVlcyBzZWFyY2hpbmcgdG8gdGhlIGVuZCBvZiB0aGUgaW5wdXQgZXZlbiBpZiBhIHBlcmZlY3RcbiAgLy8gbWF0Y2ggaXMgZm91bmQgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIHNhbWUgaW5wdXQuXG4gIGlzQ2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gIC8vIFdoZW4gdHJ1ZSwgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIHdpbGwgY29udGludWUgdG8gdGhlIGVuZCBvZiBhIHNlYXJjaCBwYXR0ZXJuIGV2ZW4gaWZcbiAgaW5jbHVkZVNjb3JlOiBmYWxzZSxcbiAgLy8gTGlzdCBvZiBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSBzZWFyY2hlZC4gVGhpcyBhbHNvIHN1cHBvcnRzIG5lc3RlZCBwcm9wZXJ0aWVzLlxuICBrZXlzOiBbXSxcbiAgLy8gV2hldGhlciB0byBzb3J0IHRoZSByZXN1bHQgbGlzdCwgYnkgc2NvcmVcbiAgc2hvdWxkU29ydDogdHJ1ZSxcbiAgLy8gRGVmYXVsdCBzb3J0IGZ1bmN0aW9uOiBzb3J0IGJ5IGFzY2VuZGluZyBzY29yZSwgYXNjZW5kaW5nIGluZGV4XG4gIHNvcnRGbjogKGEsIGIpID0+XG4gICAgYS5zY29yZSA9PT0gYi5zY29yZSA/IChhLmlkeCA8IGIuaWR4ID8gLTEgOiAxKSA6IGEuc2NvcmUgPCBiLnNjb3JlID8gLTEgOiAxXG59O1xuXG5jb25zdCBGdXp6eU9wdGlvbnMgPSB7XG4gIC8vIEFwcHJveGltYXRlbHkgd2hlcmUgaW4gdGhlIHRleHQgaXMgdGhlIHBhdHRlcm4gZXhwZWN0ZWQgdG8gYmUgZm91bmQ/XG4gIGxvY2F0aW9uOiAwLFxuICAvLyBBdCB3aGF0IHBvaW50IGRvZXMgdGhlIG1hdGNoIGFsZ29yaXRobSBnaXZlIHVwLiBBIHRocmVzaG9sZCBvZiAnMC4wJyByZXF1aXJlcyBhIHBlcmZlY3QgbWF0Y2hcbiAgLy8gKG9mIGJvdGggbGV0dGVycyBhbmQgbG9jYXRpb24pLCBhIHRocmVzaG9sZCBvZiAnMS4wJyB3b3VsZCBtYXRjaCBhbnl0aGluZy5cbiAgdGhyZXNob2xkOiAwLjYsXG4gIC8vIERldGVybWluZXMgaG93IGNsb3NlIHRoZSBtYXRjaCBtdXN0IGJlIHRvIHRoZSBmdXp6eSBsb2NhdGlvbiAoc3BlY2lmaWVkIGFib3ZlKS5cbiAgLy8gQW4gZXhhY3QgbGV0dGVyIG1hdGNoIHdoaWNoIGlzICdkaXN0YW5jZScgY2hhcmFjdGVycyBhd2F5IGZyb20gdGhlIGZ1enp5IGxvY2F0aW9uXG4gIC8vIHdvdWxkIHNjb3JlIGFzIGEgY29tcGxldGUgbWlzbWF0Y2guIEEgZGlzdGFuY2Ugb2YgJzAnIHJlcXVpcmVzIHRoZSBtYXRjaCBiZSBhdFxuICAvLyB0aGUgZXhhY3QgbG9jYXRpb24gc3BlY2lmaWVkLCBhIHRocmVzaG9sZCBvZiAnMTAwMCcgd291bGQgcmVxdWlyZSBhIHBlcmZlY3QgbWF0Y2hcbiAgLy8gdG8gYmUgd2l0aGluIDgwMCBjaGFyYWN0ZXJzIG9mIHRoZSBmdXp6eSBsb2NhdGlvbiB0byBiZSBmb3VuZCB1c2luZyBhIDAuOCB0aHJlc2hvbGQuXG4gIGRpc3RhbmNlOiAxMDBcbn07XG5cbmNvbnN0IEFkdmFuY2VkT3B0aW9ucyA9IHtcbiAgLy8gV2hlbiB0cnVlLCBpdCBlbmFibGVzIHRoZSB1c2Ugb2YgdW5peC1saWtlIHNlYXJjaCBjb21tYW5kc1xuICB1c2VFeHRlbmRlZFNlYXJjaDogZmFsc2UsXG4gIC8vIFRoZSBnZXQgZnVuY3Rpb24gdG8gdXNlIHdoZW4gZmV0Y2hpbmcgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gVGhlIGRlZmF1bHQgd2lsbCBzZWFyY2ggbmVzdGVkIHBhdGhzICppZSBmb28uYmFyLmJheipcbiAgZ2V0Rm46IGdldFxufTtcblxudmFyIENvbmZpZyA9IHtcbiAgLi4uQmFzaWNPcHRpb25zLFxuICAuLi5NYXRjaE9wdGlvbnMsXG4gIC4uLkZ1enp5T3B0aW9ucyxcbiAgLi4uQWR2YW5jZWRPcHRpb25zXG59O1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUoXG4gIHBhdHRlcm4sXG4gIHtcbiAgICBlcnJvcnMgPSAwLFxuICAgIGN1cnJlbnRMb2NhdGlvbiA9IDAsXG4gICAgZXhwZWN0ZWRMb2NhdGlvbiA9IDAsXG4gICAgZGlzdGFuY2UgPSBDb25maWcuZGlzdGFuY2VcbiAgfSA9IHt9XG4pIHtcbiAgY29uc3QgYWNjdXJhY3kgPSBlcnJvcnMgLyBwYXR0ZXJuLmxlbmd0aDtcbiAgY29uc3QgcHJveGltaXR5ID0gTWF0aC5hYnMoZXhwZWN0ZWRMb2NhdGlvbiAtIGN1cnJlbnRMb2NhdGlvbik7XG5cbiAgaWYgKCFkaXN0YW5jZSkge1xuICAgIC8vIERvZGdlIGRpdmlkZSBieSB6ZXJvIGVycm9yLlxuICAgIHJldHVybiBwcm94aW1pdHkgPyAxLjAgOiBhY2N1cmFjeVxuICB9XG5cbiAgcmV0dXJuIGFjY3VyYWN5ICsgcHJveGltaXR5IC8gZGlzdGFuY2Vcbn1cblxuZnVuY3Rpb24gY29udmVydE1hc2tUb0luZGljZXMoXG4gIG1hdGNobWFzayA9IFtdLFxuICBtaW5NYXRjaENoYXJMZW5ndGggPSBDb25maWcubWluTWF0Y2hDaGFyTGVuZ3RoXG4pIHtcbiAgbGV0IG1hdGNoZWRJbmRpY2VzID0gW107XG4gIGxldCBzdGFydCA9IC0xO1xuICBsZXQgZW5kID0gLTE7XG4gIGxldCBpID0gMDtcblxuICBmb3IgKGxldCBsZW4gPSBtYXRjaG1hc2subGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaG1hc2tbaV07XG4gICAgaWYgKG1hdGNoICYmIHN0YXJ0ID09PSAtMSkge1xuICAgICAgc3RhcnQgPSBpO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoICYmIHN0YXJ0ICE9PSAtMSkge1xuICAgICAgZW5kID0gaSAtIDE7XG4gICAgICBpZiAoZW5kIC0gc3RhcnQgKyAxID49IG1pbk1hdGNoQ2hhckxlbmd0aCkge1xuICAgICAgICBtYXRjaGVkSW5kaWNlcy5wdXNoKFtzdGFydCwgZW5kXSk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIC8vIChpLTEgLSBzdGFydCkgKyAxID0+IGkgLSBzdGFydFxuICBpZiAobWF0Y2htYXNrW2kgLSAxXSAmJiBpIC0gc3RhcnQgPj0gbWluTWF0Y2hDaGFyTGVuZ3RoKSB7XG4gICAgbWF0Y2hlZEluZGljZXMucHVzaChbc3RhcnQsIGkgLSAxXSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZEluZGljZXNcbn1cblxuLy8gTWFjaGluZSB3b3JkIHNpemVcbmNvbnN0IE1BWF9CSVRTID0gMzI7XG5cbmZ1bmN0aW9uIHNlYXJjaChcbiAgdGV4dCxcbiAgcGF0dGVybixcbiAgcGF0dGVybkFscGhhYmV0LFxuICB7XG4gICAgbG9jYXRpb24gPSBDb25maWcubG9jYXRpb24sXG4gICAgZGlzdGFuY2UgPSBDb25maWcuZGlzdGFuY2UsXG4gICAgdGhyZXNob2xkID0gQ29uZmlnLnRocmVzaG9sZCxcbiAgICBmaW5kQWxsTWF0Y2hlcyA9IENvbmZpZy5maW5kQWxsTWF0Y2hlcyxcbiAgICBtaW5NYXRjaENoYXJMZW5ndGggPSBDb25maWcubWluTWF0Y2hDaGFyTGVuZ3RoLFxuICAgIGluY2x1ZGVNYXRjaGVzID0gQ29uZmlnLmluY2x1ZGVNYXRjaGVzXG4gIH0gPSB7fVxuKSB7XG4gIGlmIChwYXR0ZXJuLmxlbmd0aCA+IE1BWF9CSVRTKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQYXR0ZXJuIGxlbmd0aCBleGNlZWRzIG1heCBvZiAke01BWF9CSVRTfS5gKVxuICB9XG5cbiAgY29uc3QgcGF0dGVybkxlbiA9IHBhdHRlcm4ubGVuZ3RoO1xuICAvLyBTZXQgc3RhcnRpbmcgbG9jYXRpb24gYXQgYmVnaW5uaW5nIHRleHQgYW5kIGluaXRpYWxpemUgdGhlIGFscGhhYmV0LlxuICBjb25zdCB0ZXh0TGVuID0gdGV4dC5sZW5ndGg7XG4gIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIGxvY2F0aW9uID4gdGV4dC5sZW5ndGhcbiAgY29uc3QgZXhwZWN0ZWRMb2NhdGlvbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKGxvY2F0aW9uLCB0ZXh0TGVuKSk7XG4gIC8vIEhpZ2hlc3Qgc2NvcmUgYmV5b25kIHdoaWNoIHdlIGdpdmUgdXAuXG4gIGxldCBjdXJyZW50VGhyZXNob2xkID0gdGhyZXNob2xkO1xuICAvLyBJcyB0aGVyZSBhIG5lYXJieSBleGFjdCBtYXRjaD8gKHNwZWVkdXApXG4gIGxldCBiZXN0TG9jYXRpb24gPSBleHBlY3RlZExvY2F0aW9uO1xuXG4gIC8vIEEgbWFzayBvZiB0aGUgbWF0Y2hlcywgdXNlZCBmb3IgYnVpbGRpbmcgdGhlIGluZGljZXNcbiAgY29uc3QgbWF0Y2hNYXNrID0gW107XG5cbiAgaWYgKGluY2x1ZGVNYXRjaGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0TGVuOyBpICs9IDEpIHtcbiAgICAgIG1hdGNoTWFza1tpXSA9IDA7XG4gICAgfVxuICB9XG5cbiAgbGV0IGluZGV4O1xuXG4gIC8vIEdldCBhbGwgZXhhY3QgbWF0Y2hlcywgaGVyZSBmb3Igc3BlZWQgdXBcbiAgd2hpbGUgKChpbmRleCA9IHRleHQuaW5kZXhPZihwYXR0ZXJuLCBiZXN0TG9jYXRpb24pKSA+IC0xKSB7XG4gICAgbGV0IHNjb3JlID0gY29tcHV0ZVNjb3JlKHBhdHRlcm4sIHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW5kZXgsXG4gICAgICBleHBlY3RlZExvY2F0aW9uLFxuICAgICAgZGlzdGFuY2VcbiAgICB9KTtcblxuICAgIGN1cnJlbnRUaHJlc2hvbGQgPSBNYXRoLm1pbihzY29yZSwgY3VycmVudFRocmVzaG9sZCk7XG4gICAgYmVzdExvY2F0aW9uID0gaW5kZXggKyBwYXR0ZXJuTGVuO1xuXG4gICAgaWYgKGluY2x1ZGVNYXRjaGVzKSB7XG4gICAgICBsZXQgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IHBhdHRlcm5MZW4pIHtcbiAgICAgICAgbWF0Y2hNYXNrW2luZGV4ICsgaV0gPSAxO1xuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzZXQgdGhlIGJlc3QgbG9jYXRpb25cbiAgYmVzdExvY2F0aW9uID0gLTE7XG5cbiAgbGV0IGxhc3RCaXRBcnIgPSBbXTtcbiAgbGV0IGZpbmFsU2NvcmUgPSAxO1xuICBsZXQgYmluTWF4ID0gcGF0dGVybkxlbiArIHRleHRMZW47XG5cbiAgY29uc3QgbWFzayA9IDEgPDwgKHBhdHRlcm5MZW4gPD0gTUFYX0JJVFMgLSAxID8gcGF0dGVybkxlbiAtIDEgOiBNQVhfQklUUyAtIDIpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybkxlbjsgaSArPSAxKSB7XG4gICAgLy8gU2NhbiBmb3IgdGhlIGJlc3QgbWF0Y2g7IGVhY2ggaXRlcmF0aW9uIGFsbG93cyBmb3Igb25lIG1vcmUgZXJyb3IuXG4gICAgLy8gUnVuIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgaG93IGZhciBmcm9tIHRoZSBtYXRjaCBsb2NhdGlvbiB3ZSBjYW4gc3RyYXlcbiAgICAvLyBhdCB0aGlzIGVycm9yIGxldmVsLlxuICAgIGxldCBiaW5NaW4gPSAwO1xuICAgIGxldCBiaW5NaWQgPSBiaW5NYXg7XG5cbiAgICB3aGlsZSAoYmluTWluIDwgYmluTWlkKSB7XG4gICAgICBjb25zdCBzY29yZSA9IGNvbXB1dGVTY29yZShwYXR0ZXJuLCB7XG4gICAgICAgIGVycm9yczogaSxcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBleHBlY3RlZExvY2F0aW9uICsgYmluTWlkLFxuICAgICAgICBleHBlY3RlZExvY2F0aW9uLFxuICAgICAgICBkaXN0YW5jZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzY29yZSA8PSBjdXJyZW50VGhyZXNob2xkKSB7XG4gICAgICAgIGJpbk1pbiA9IGJpbk1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbk1heCA9IGJpbk1pZDtcbiAgICAgIH1cblxuICAgICAgYmluTWlkID0gTWF0aC5mbG9vcigoYmluTWF4IC0gYmluTWluKSAvIDIgKyBiaW5NaW4pO1xuICAgIH1cblxuICAgIC8vIFVzZSB0aGUgcmVzdWx0IGZyb20gdGhpcyBpdGVyYXRpb24gYXMgdGhlIG1heGltdW0gZm9yIHRoZSBuZXh0LlxuICAgIGJpbk1heCA9IGJpbk1pZDtcblxuICAgIGxldCBzdGFydCA9IE1hdGgubWF4KDEsIGV4cGVjdGVkTG9jYXRpb24gLSBiaW5NaWQgKyAxKTtcbiAgICBsZXQgZmluaXNoID0gZmluZEFsbE1hdGNoZXNcbiAgICAgID8gdGV4dExlblxuICAgICAgOiBNYXRoLm1pbihleHBlY3RlZExvY2F0aW9uICsgYmluTWlkLCB0ZXh0TGVuKSArIHBhdHRlcm5MZW47XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBiaXQgYXJyYXlcbiAgICBsZXQgYml0QXJyID0gQXJyYXkoZmluaXNoICsgMik7XG5cbiAgICBiaXRBcnJbZmluaXNoICsgMV0gPSAoMSA8PCBpKSAtIDE7XG5cbiAgICBmb3IgKGxldCBqID0gZmluaXNoOyBqID49IHN0YXJ0OyBqIC09IDEpIHtcbiAgICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBqIC0gMTtcbiAgICAgIGxldCBjaGFyTWF0Y2ggPSBwYXR0ZXJuQWxwaGFiZXRbdGV4dC5jaGFyQXQoY3VycmVudExvY2F0aW9uKV07XG5cbiAgICAgIGlmIChjaGFyTWF0Y2ggJiYgaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hNYXNrW2N1cnJlbnRMb2NhdGlvbl0gPSAxO1xuICAgICAgfVxuXG4gICAgICAvLyBGaXJzdCBwYXNzOiBleGFjdCBtYXRjaFxuICAgICAgYml0QXJyW2pdID0gKChiaXRBcnJbaiArIDFdIDw8IDEpIHwgMSkgJiBjaGFyTWF0Y2g7XG5cbiAgICAgIC8vIFN1YnNlcXVlbnQgcGFzc2VzOiBmdXp6eSBtYXRjaFxuICAgICAgaWYgKGkgIT09IDApIHtcbiAgICAgICAgYml0QXJyW2pdIHw9XG4gICAgICAgICAgKChsYXN0Qml0QXJyW2ogKyAxXSB8IGxhc3RCaXRBcnJbal0pIDw8IDEpIHwgMSB8IGxhc3RCaXRBcnJbaiArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYml0QXJyW2pdICYgbWFzaykge1xuICAgICAgICBmaW5hbFNjb3JlID0gY29tcHV0ZVNjb3JlKHBhdHRlcm4sIHtcbiAgICAgICAgICBlcnJvcnM6IGksXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICAgICAgZGlzdGFuY2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGhpcyBtYXRjaCB3aWxsIGFsbW9zdCBjZXJ0YWlubHkgYmUgYmV0dGVyIHRoYW4gYW55IGV4aXN0aW5nIG1hdGNoLlxuICAgICAgICAvLyBCdXQgY2hlY2sgYW55d2F5LlxuICAgICAgICBpZiAoZmluYWxTY29yZSA8PSBjdXJyZW50VGhyZXNob2xkKSB7XG4gICAgICAgICAgLy8gSW5kZWVkIGl0IGlzXG4gICAgICAgICAgY3VycmVudFRocmVzaG9sZCA9IGZpbmFsU2NvcmU7XG4gICAgICAgICAgYmVzdExvY2F0aW9uID0gY3VycmVudExvY2F0aW9uO1xuXG4gICAgICAgICAgLy8gQWxyZWFkeSBwYXNzZWQgYGxvY2AsIGRvd25oaWxsIGZyb20gaGVyZSBvbiBpbi5cbiAgICAgICAgICBpZiAoYmVzdExvY2F0aW9uIDw9IGV4cGVjdGVkTG9jYXRpb24pIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gV2hlbiBwYXNzaW5nIGBiZXN0TG9jYXRpb25gLCBkb24ndCBleGNlZWQgb3VyIGN1cnJlbnQgZGlzdGFuY2UgZnJvbSBgZXhwZWN0ZWRMb2NhdGlvbmAuXG4gICAgICAgICAgc3RhcnQgPSBNYXRoLm1heCgxLCAyICogZXhwZWN0ZWRMb2NhdGlvbiAtIGJlc3RMb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBObyBob3BlIGZvciBhIChiZXR0ZXIpIG1hdGNoIGF0IGdyZWF0ZXIgZXJyb3IgbGV2ZWxzLlxuICAgIGNvbnN0IHNjb3JlID0gY29tcHV0ZVNjb3JlKHBhdHRlcm4sIHtcbiAgICAgIGVycm9yczogaSArIDEsXG4gICAgICBjdXJyZW50TG9jYXRpb246IGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICBleHBlY3RlZExvY2F0aW9uLFxuICAgICAgZGlzdGFuY2VcbiAgICB9KTtcblxuICAgIGlmIChzY29yZSA+IGN1cnJlbnRUaHJlc2hvbGQpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgbGFzdEJpdEFyciA9IGJpdEFycjtcbiAgfVxuXG4gIGxldCByZXN1bHQgPSB7XG4gICAgaXNNYXRjaDogYmVzdExvY2F0aW9uID49IDAsXG4gICAgLy8gQ291bnQgZXhhY3QgbWF0Y2hlcyAodGhvc2Ugd2l0aCBhIHNjb3JlIG9mIDApIHRvIGJlIFwiYWxtb3N0XCIgZXhhY3RcbiAgICBzY29yZTogIWZpbmFsU2NvcmUgPyAwLjAwMSA6IGZpbmFsU2NvcmVcbiAgfTtcblxuICBpZiAoaW5jbHVkZU1hdGNoZXMpIHtcbiAgICByZXN1bHQubWF0Y2hlZEluZGljZXMgPSBjb252ZXJ0TWFza1RvSW5kaWNlcyhtYXRjaE1hc2ssIG1pbk1hdGNoQ2hhckxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdHRlcm5BbHBoYWJldChwYXR0ZXJuKSB7XG4gIGxldCBtYXNrID0ge307XG4gIGxldCBsZW4gPSBwYXR0ZXJuLmxlbmd0aDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgbWFza1twYXR0ZXJuLmNoYXJBdChpKV0gPSAwO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIG1hc2tbcGF0dGVybi5jaGFyQXQoaSldIHw9IDEgPDwgKGxlbiAtIGkgLSAxKTtcbiAgfVxuXG4gIHJldHVybiBtYXNrXG59XG5cbmNsYXNzIEJpdGFwU2VhcmNoIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcGF0dGVybixcbiAgICB7XG4gICAgICBsb2NhdGlvbiA9IENvbmZpZy5sb2NhdGlvbixcbiAgICAgIHRocmVzaG9sZCA9IENvbmZpZy50aHJlc2hvbGQsXG4gICAgICBkaXN0YW5jZSA9IENvbmZpZy5kaXN0YW5jZSxcbiAgICAgIGluY2x1ZGVNYXRjaGVzID0gQ29uZmlnLmluY2x1ZGVNYXRjaGVzLFxuICAgICAgZmluZEFsbE1hdGNoZXMgPSBDb25maWcuZmluZEFsbE1hdGNoZXMsXG4gICAgICBtaW5NYXRjaENoYXJMZW5ndGggPSBDb25maWcubWluTWF0Y2hDaGFyTGVuZ3RoLFxuICAgICAgaXNDYXNlU2Vuc2l0aXZlID0gQ29uZmlnLmlzQ2FzZVNlbnNpdGl2ZVxuICAgIH0gPSB7fVxuICApIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIHRocmVzaG9sZCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgaW5jbHVkZU1hdGNoZXMsXG4gICAgICBmaW5kQWxsTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgIGlzQ2FzZVNlbnNpdGl2ZVxuICAgIH07XG5cbiAgICB0aGlzLnBhdHRlcm4gPSBpc0Nhc2VTZW5zaXRpdmUgPyBwYXR0ZXJuIDogcGF0dGVybi50b0xvd2VyQ2FzZSgpO1xuXG4gICAgdGhpcy5jaHVua3MgPSBbXTtcblxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgdGhpcy5wYXR0ZXJuLmxlbmd0aCkge1xuICAgICAgbGV0IHBhdHRlcm4gPSB0aGlzLnBhdHRlcm4uc3Vic3RyaW5nKGluZGV4LCBpbmRleCArIE1BWF9CSVRTKTtcbiAgICAgIHRoaXMuY2h1bmtzLnB1c2goe1xuICAgICAgICBwYXR0ZXJuLFxuICAgICAgICBhbHBoYWJldDogY3JlYXRlUGF0dGVybkFscGhhYmV0KHBhdHRlcm4pXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IE1BWF9CSVRTO1xuICAgIH1cbiAgfVxuXG4gIHNlYXJjaEluKHZhbHVlKSB7XG4gICAgbGV0IHRleHQgPSB2YWx1ZS4kO1xuICAgIHJldHVybiB0aGlzLnNlYXJjaEluU3RyaW5nKHRleHQpXG4gIH1cblxuICBzZWFyY2hJblN0cmluZyh0ZXh0KSB7XG4gICAgY29uc3QgeyBpc0Nhc2VTZW5zaXRpdmUsIGluY2x1ZGVNYXRjaGVzIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAoIWlzQ2FzZVNlbnNpdGl2ZSkge1xuICAgICAgdGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvLyBFeGFjdCBtYXRjaFxuICAgIGlmICh0aGlzLnBhdHRlcm4gPT09IHRleHQpIHtcbiAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgIGlzTWF0Y2g6IHRydWUsXG4gICAgICAgIHNjb3JlOiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAoaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgICAgcmVzdWx0Lm1hdGNoZWRJbmRpY2VzID0gW1swLCB0ZXh0Lmxlbmd0aCAtIDFdXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgdXNlIEJpdGFwIGFsZ29yaXRobVxuICAgIGNvbnN0IHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICB0aHJlc2hvbGQsXG4gICAgICBmaW5kQWxsTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aFxuICAgIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBsZXQgYWxsTWF0Y2hlZEluZGljZXMgPSBbXTtcbiAgICBsZXQgdG90YWxTY29yZSA9IDA7XG4gICAgbGV0IGhhc01hdGNoZXMgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmNodW5rcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbGV0IHsgcGF0dGVybiwgYWxwaGFiZXQgfSA9IHRoaXMuY2h1bmtzW2ldO1xuXG4gICAgICBsZXQgcmVzdWx0ID0gc2VhcmNoKHRleHQsIHBhdHRlcm4sIGFscGhhYmV0LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbiArIE1BWF9CSVRTICogaSxcbiAgICAgICAgZGlzdGFuY2UsXG4gICAgICAgIHRocmVzaG9sZCxcbiAgICAgICAgZmluZEFsbE1hdGNoZXMsXG4gICAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgICAgaW5jbHVkZU1hdGNoZXNcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7IGlzTWF0Y2gsIHNjb3JlLCBtYXRjaGVkSW5kaWNlcyB9ID0gcmVzdWx0O1xuXG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICBoYXNNYXRjaGVzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdG90YWxTY29yZSArPSBzY29yZTtcblxuICAgICAgaWYgKGlzTWF0Y2ggJiYgbWF0Y2hlZEluZGljZXMpIHtcbiAgICAgICAgYWxsTWF0Y2hlZEluZGljZXMgPSBbLi4uYWxsTWF0Y2hlZEluZGljZXMsIC4uLm1hdGNoZWRJbmRpY2VzXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgaXNNYXRjaDogaGFzTWF0Y2hlcyxcbiAgICAgIHNjb3JlOiBoYXNNYXRjaGVzID8gdG90YWxTY29yZSAvIHRoaXMuY2h1bmtzLmxlbmd0aCA6IDFcbiAgICB9O1xuXG4gICAgaWYgKGhhc01hdGNoZXMgJiYgaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgIHJlc3VsdC5tYXRjaGVkSW5kaWNlcyA9IGFsbE1hdGNoZWRJbmRpY2VzO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG5jbGFzcyBCYXNlTWF0Y2gge1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuKSB7XG4gICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybjtcbiAgfVxuICBzdGF0aWMgaXNNdWx0aU1hdGNoKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gZ2V0TWF0Y2gocGF0dGVybiwgdGhpcy5tdWx0aVJlZ2V4KVxuICB9XG4gIHN0YXRpYyBpc1NpbmdsZU1hdGNoKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gZ2V0TWF0Y2gocGF0dGVybiwgdGhpcy5zaW5nbGVSZWdleClcbiAgfVxuICBzZWFyY2goLyp0ZXh0Ki8pIHt9XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoKHBhdHRlcm4sIGV4cCkge1xuICBjb25zdCBtYXRjaGVzID0gcGF0dGVybi5tYXRjaChleHApO1xuICByZXR1cm4gbWF0Y2hlcyA/IG1hdGNoZXNbMV0gOiBudWxsXG59XG5cbi8vIFRva2VuOiAnZmlsZVxuXG5jbGFzcyBFeGFjdE1hdGNoIGV4dGVuZHMgQmFzZU1hdGNoIHtcbiAgY29uc3RydWN0b3IocGF0dGVybikge1xuICAgIHN1cGVyKHBhdHRlcm4pO1xuICB9XG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gJ2V4YWN0J1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL14nXCIoLiopXCIkL1xuICB9XG4gIHN0YXRpYyBnZXQgc2luZ2xlUmVnZXgoKSB7XG4gICAgcmV0dXJuIC9eJyguKikkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgbGV0IGxvY2F0aW9uID0gMDtcbiAgICBsZXQgaW5kZXg7XG5cbiAgICBjb25zdCBtYXRjaGVkSW5kaWNlcyA9IFtdO1xuICAgIGNvbnN0IHBhdHRlcm5MZW4gPSB0aGlzLnBhdHRlcm4ubGVuZ3RoO1xuXG4gICAgLy8gR2V0IGFsbCBleGFjdCBtYXRjaGVzXG4gICAgd2hpbGUgKChpbmRleCA9IHRleHQuaW5kZXhPZih0aGlzLnBhdHRlcm4sIGxvY2F0aW9uKSkgPiAtMSkge1xuICAgICAgbG9jYXRpb24gPSBpbmRleCArIHBhdHRlcm5MZW47XG4gICAgICBtYXRjaGVkSW5kaWNlcy5wdXNoKFtpbmRleCwgbG9jYXRpb24gLSAxXSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNNYXRjaCA9ICEhbWF0Y2hlZEluZGljZXMubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTWF0Y2gsXG4gICAgICBzY29yZTogaXNNYXRjaCA/IDEgOiAwLFxuICAgICAgbWF0Y2hlZEluZGljZXNcbiAgICB9XG4gIH1cbn1cblxuLy8gVG9rZW46ICFmaXJlXG5cbmNsYXNzIEludmVyc2VFeGFjdE1hdGNoIGV4dGVuZHMgQmFzZU1hdGNoIHtcbiAgY29uc3RydWN0b3IocGF0dGVybikge1xuICAgIHN1cGVyKHBhdHRlcm4pO1xuICB9XG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gJ2ludmVyc2UtZXhhY3QnXG4gIH1cbiAgc3RhdGljIGdldCBtdWx0aVJlZ2V4KCkge1xuICAgIHJldHVybiAvXiFcIiguKilcIiQvXG4gIH1cbiAgc3RhdGljIGdldCBzaW5nbGVSZWdleCgpIHtcbiAgICByZXR1cm4gL14hKC4qKSQvXG4gIH1cbiAgc2VhcmNoKHRleHQpIHtcbiAgICBjb25zdCBpbmRleCA9IHRleHQuaW5kZXhPZih0aGlzLnBhdHRlcm4pO1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBpbmRleCA9PT0gLTE7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNNYXRjaCxcbiAgICAgIHNjb3JlOiBpc01hdGNoID8gMCA6IDEsXG4gICAgICBtYXRjaGVkSW5kaWNlczogWzAsIHRleHQubGVuZ3RoIC0gMV1cbiAgICB9XG4gIH1cbn1cblxuLy8gVG9rZW46IF5maWxlXG5cbmNsYXNzIFByZWZpeEV4YWN0TWF0Y2ggZXh0ZW5kcyBCYXNlTWF0Y2gge1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuKSB7XG4gICAgc3VwZXIocGF0dGVybik7XG4gIH1cbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAncHJlZml4LWV4YWN0J1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL15cXF5cIiguKilcIiQvXG4gIH1cbiAgc3RhdGljIGdldCBzaW5nbGVSZWdleCgpIHtcbiAgICByZXR1cm4gL15cXF4oLiopJC9cbiAgfVxuICBzZWFyY2godGV4dCkge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSB0ZXh0LnN0YXJ0c1dpdGgodGhpcy5wYXR0ZXJuKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpc01hdGNoLFxuICAgICAgc2NvcmU6IGlzTWF0Y2ggPyAwIDogMSxcbiAgICAgIG1hdGNoZWRJbmRpY2VzOiBbMCwgdGhpcy5wYXR0ZXJuLmxlbmd0aCAtIDFdXG4gICAgfVxuICB9XG59XG5cbi8vIFRva2VuOiAhXmZpcmVcblxuY2xhc3MgSW52ZXJzZVByZWZpeEV4YWN0TWF0Y2ggZXh0ZW5kcyBCYXNlTWF0Y2gge1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuKSB7XG4gICAgc3VwZXIocGF0dGVybik7XG4gIH1cbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAnaW52ZXJzZS1wcmVmaXgtZXhhY3QnXG4gIH1cbiAgc3RhdGljIGdldCBtdWx0aVJlZ2V4KCkge1xuICAgIHJldHVybiAvXiFcXF5cIiguKilcIiQvXG4gIH1cbiAgc3RhdGljIGdldCBzaW5nbGVSZWdleCgpIHtcbiAgICByZXR1cm4gL14hXFxeKC4qKSQvXG4gIH1cbiAgc2VhcmNoKHRleHQpIHtcbiAgICBjb25zdCBpc01hdGNoID0gIXRleHQuc3RhcnRzV2l0aCh0aGlzLnBhdHRlcm4pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTWF0Y2gsXG4gICAgICBzY29yZTogaXNNYXRjaCA/IDAgOiAxLFxuICAgICAgbWF0Y2hlZEluZGljZXM6IFswLCB0ZXh0Lmxlbmd0aCAtIDFdXG4gICAgfVxuICB9XG59XG5cbi8vIFRva2VuOiAuZmlsZSRcblxuY2xhc3MgU3VmZml4RXhhY3RNYXRjaCBleHRlbmRzIEJhc2VNYXRjaCB7XG4gIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcbiAgICBzdXBlcihwYXR0ZXJuKTtcbiAgfVxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuICdzdWZmaXgtZXhhY3QnXG4gIH1cbiAgc3RhdGljIGdldCBtdWx0aVJlZ2V4KCkge1xuICAgIHJldHVybiAvXlwiKC4qKVwiXFwkJC9cbiAgfVxuICBzdGF0aWMgZ2V0IHNpbmdsZVJlZ2V4KCkge1xuICAgIHJldHVybiAvXiguKilcXCQkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgY29uc3QgaXNNYXRjaCA9IHRleHQuZW5kc1dpdGgodGhpcy5wYXR0ZXJuKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpc01hdGNoLFxuICAgICAgc2NvcmU6IGlzTWF0Y2ggPyAwIDogMSxcbiAgICAgIG1hdGNoZWRJbmRpY2VzOiBbdGV4dC5sZW5ndGggLSB0aGlzLnBhdHRlcm4ubGVuZ3RoLCB0ZXh0Lmxlbmd0aCAtIDFdXG4gICAgfVxuICB9XG59XG5cbi8vIFRva2VuOiAhLmZpbGUkXG5cbmNsYXNzIEludmVyc2VTdWZmaXhFeGFjdE1hdGNoIGV4dGVuZHMgQmFzZU1hdGNoIHtcbiAgY29uc3RydWN0b3IocGF0dGVybikge1xuICAgIHN1cGVyKHBhdHRlcm4pO1xuICB9XG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gJ2ludmVyc2Utc3VmZml4LWV4YWN0J1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL14hXCIoLiopXCJcXCQkL1xuICB9XG4gIHN0YXRpYyBnZXQgc2luZ2xlUmVnZXgoKSB7XG4gICAgcmV0dXJuIC9eISguKilcXCQkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgY29uc3QgaXNNYXRjaCA9ICF0ZXh0LmVuZHNXaXRoKHRoaXMucGF0dGVybik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTWF0Y2gsXG4gICAgICBzY29yZTogaXNNYXRjaCA/IDAgOiAxLFxuICAgICAgbWF0Y2hlZEluZGljZXM6IFswLCB0ZXh0Lmxlbmd0aCAtIDFdXG4gICAgfVxuICB9XG59XG5cbmNsYXNzIEZ1enp5TWF0Y2ggZXh0ZW5kcyBCYXNlTWF0Y2gge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwYXR0ZXJuLFxuICAgIHtcbiAgICAgIGxvY2F0aW9uID0gQ29uZmlnLmxvY2F0aW9uLFxuICAgICAgdGhyZXNob2xkID0gQ29uZmlnLnRocmVzaG9sZCxcbiAgICAgIGRpc3RhbmNlID0gQ29uZmlnLmRpc3RhbmNlLFxuICAgICAgaW5jbHVkZU1hdGNoZXMgPSBDb25maWcuaW5jbHVkZU1hdGNoZXMsXG4gICAgICBmaW5kQWxsTWF0Y2hlcyA9IENvbmZpZy5maW5kQWxsTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCA9IENvbmZpZy5taW5NYXRjaENoYXJMZW5ndGgsXG4gICAgICBpc0Nhc2VTZW5zaXRpdmUgPSBDb25maWcuaXNDYXNlU2Vuc2l0aXZlXG4gICAgfSA9IHt9XG4gICkge1xuICAgIHN1cGVyKHBhdHRlcm4pO1xuICAgIHRoaXMuX2JpdGFwU2VhcmNoID0gbmV3IEJpdGFwU2VhcmNoKHBhdHRlcm4sIHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgdGhyZXNob2xkLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBpbmNsdWRlTWF0Y2hlcyxcbiAgICAgIGZpbmRBbGxNYXRjaGVzLFxuICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoLFxuICAgICAgaXNDYXNlU2Vuc2l0aXZlXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAnZnV6enknXG4gIH1cbiAgc3RhdGljIGdldCBtdWx0aVJlZ2V4KCkge1xuICAgIHJldHVybiAvXlwiKC4qKVwiJC9cbiAgfVxuICBzdGF0aWMgZ2V0IHNpbmdsZVJlZ2V4KCkge1xuICAgIHJldHVybiAvXiguKikkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2JpdGFwU2VhcmNoLnNlYXJjaEluU3RyaW5nKHRleHQpXG4gIH1cbn1cblxuLy8g4p2XT3JkZXIgaXMgaW1wb3J0YW50LiBETyBOT1QgQ0hBTkdFLlxuY29uc3Qgc2VhcmNoZXJzID0gW1xuICBFeGFjdE1hdGNoLFxuICBQcmVmaXhFeGFjdE1hdGNoLFxuICBJbnZlcnNlUHJlZml4RXhhY3RNYXRjaCxcbiAgSW52ZXJzZVN1ZmZpeEV4YWN0TWF0Y2gsXG4gIFN1ZmZpeEV4YWN0TWF0Y2gsXG4gIEludmVyc2VFeGFjdE1hdGNoLFxuICBGdXp6eU1hdGNoXG5dO1xuXG5jb25zdCBzZWFyY2hlcnNMZW4gPSBzZWFyY2hlcnMubGVuZ3RoO1xuXG4vLyBSZWdleCB0byBzcGxpdCBieSBzcGFjZXMsIGJ1dCBrZWVwIGFueXRoaW5nIGluIHF1b3RlcyB0b2dldGhlclxuY29uc3QgU1BBQ0VfUkUgPSAvICsoPz0oW15cXFwiXSpcXFwiW15cXFwiXSpcXFwiKSpbXlxcXCJdKiQpLztcbmNvbnN0IE9SX1RPS0VOID0gJ3wnO1xuXG4vLyBSZXR1cm4gYSAyRCBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcXVlcnksIGZvciBzaW1wbGVyIHBhcnNpbmcuXG4vLyBFeGFtcGxlOlxuLy8gXCJeY29yZSBnbyQgfCByYiQgfCBweSQgeHkkXCIgPT4gW1tcIl5jb3JlXCIsIFwiZ28kXCJdLCBbXCJyYiRcIl0sIFtcInB5JFwiLCBcInh5JFwiXV1cbmZ1bmN0aW9uIHBhcnNlUXVlcnkocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBwYXR0ZXJuLnNwbGl0KE9SX1RPS0VOKS5tYXAoKGl0ZW0pID0+IHtcbiAgICBsZXQgcXVlcnkgPSBpdGVtXG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoU1BBQ0VfUkUpXG4gICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtICYmICEhaXRlbS50cmltKCkpO1xuXG4gICAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcXVlcnkubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5SXRlbSA9IHF1ZXJ5W2ldO1xuXG4gICAgICAvLyAxLiBIYW5kbGUgbXVsdGlwbGUgcXVlcnkgbWF0Y2ggKGkuZSwgb25jZSB0aGF0IGFyZSBxdW90ZWQsIGxpa2UgYFwiaGVsbG8gd29ybGRcImApXG4gICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgIGxldCBpZHggPSAtMTtcbiAgICAgIHdoaWxlICghZm91bmQgJiYgKytpZHggPCBzZWFyY2hlcnNMZW4pIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoZXIgPSBzZWFyY2hlcnNbaWR4XTtcbiAgICAgICAgbGV0IHRva2VuID0gc2VhcmNoZXIuaXNNdWx0aU1hdGNoKHF1ZXJ5SXRlbSk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChuZXcgc2VhcmNoZXIodG9rZW4sIG9wdGlvbnMpKTtcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIuIEhhbmRsZSBzaW5nbGUgcXVlcnkgbWF0Y2hlcyAoaS5lLCBvbmNlIHRoYXQgYXJlICpub3QqIHF1b3RlZClcbiAgICAgIGlkeCA9IC0xO1xuICAgICAgd2hpbGUgKCsraWR4IDwgc2VhcmNoZXJzTGVuKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaGVyID0gc2VhcmNoZXJzW2lkeF07XG4gICAgICAgIGxldCB0b2tlbiA9IHNlYXJjaGVyLmlzU2luZ2xlTWF0Y2gocXVlcnlJdGVtKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG5ldyBzZWFyY2hlcih0b2tlbiwgb3B0aW9ucykpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9KVxufVxuXG4vLyBUaGVzZSBleHRlbmRlZCBtYXRjaGVycyBjYW4gcmV0dXJuIGFuIGFycmF5IG9mIG1hdGNoZXMsIGFzIG9wcG9zZWRcbi8vIHRvIGEgc2luZ2wgbWF0Y2hcbmNvbnN0IE11bHRpTWF0Y2hTZXQgPSBuZXcgU2V0KFtGdXp6eU1hdGNoLnR5cGUsIEV4YWN0TWF0Y2gudHlwZV0pO1xuXG4vKipcbiAqIENvbW1hbmQtbGlrZSBzZWFyY2hpbmdcbiAqID09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBHaXZlbiBtdWx0aXBsZSBzZWFyY2ggdGVybXMgZGVsaW1pdGVkIGJ5IHNwYWNlcy5lLmcuIGBeanNjcmlwdCAucHl0aG9uJCBydWJ5ICFqYXZhYCxcbiAqIHNlYXJjaCBpbiBhIGdpdmVuIHRleHQuXG4gKlxuICogU2VhcmNoIHN5bnRheDpcbiAqXG4gKiB8IFRva2VuICAgICAgIHwgTWF0Y2ggdHlwZSAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IC0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4gKiB8IGBqc2NyaXB0YCAgIHwgZnV6enktbWF0Y2ggICAgICAgICAgICAgICAgfCBJdGVtcyB0aGF0IG1hdGNoIGBqc2NyaXB0YCAgICAgICAgICAgICB8XG4gKiB8IGAncHl0aG9uYCAgIHwgZXhhY3QtbWF0Y2ggICAgICAgICAgICAgICAgfCBJdGVtcyB0aGF0IGluY2x1ZGUgYHB5dGhvbmAgICAgICAgICAgICB8XG4gKiB8IGAhcnVieWAgICAgIHwgaW52ZXJzZS1leGFjdC1tYXRjaCAgICAgICAgfCBJdGVtcyB0aGF0IGRvIG5vdCBpbmNsdWRlIGBydWJ5YCAgICAgICB8XG4gKiB8IGBeamF2YWAgICAgIHwgcHJlZml4LWV4YWN0LW1hdGNoICAgICAgICAgfCBJdGVtcyB0aGF0IHN0YXJ0IHdpdGggYGphdmFgICAgICAgICAgICB8XG4gKiB8IGAhXmVhcmxhbmdgIHwgaW52ZXJzZS1wcmVmaXgtZXhhY3QtbWF0Y2ggfCBJdGVtcyB0aGF0IGRvIG5vdCBzdGFydCB3aXRoIGBlYXJsYW5nYCB8XG4gKiB8IGAuanMkYCAgICAgIHwgc3VmZml4LWV4YWN0LW1hdGNoICAgICAgICAgfCBJdGVtcyB0aGF0IGVuZCB3aXRoIGAuanNgICAgICAgICAgICAgICB8XG4gKiB8IGAhLmdvJGAgICAgIHwgaW52ZXJzZS1zdWZmaXgtZXhhY3QtbWF0Y2ggfCBJdGVtcyB0aGF0IGRvIG5vdCBlbmQgd2l0aCBgLmdvYCAgICAgICB8XG4gKlxuICogQSBzaW5nbGUgcGlwZSBjaGFyYWN0ZXIgYWN0cyBhcyBhbiBPUiBvcGVyYXRvci4gRm9yIGV4YW1wbGUsIHRoZSBmb2xsb3dpbmdcbiAqIHF1ZXJ5IG1hdGNoZXMgZW50cmllcyB0aGF0IHN0YXJ0IHdpdGggYGNvcmVgIGFuZCBlbmQgd2l0aCBlaXRoZXJgZ29gLCBgcmJgLFxuICogb3JgcHlgLlxuICpcbiAqIGBgYFxuICogXmNvcmUgZ28kIHwgcmIkIHwgcHkkXG4gKiBgYGBcbiAqL1xuY2xhc3MgRXh0ZW5kZWRTZWFyY2gge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwYXR0ZXJuLFxuICAgIHtcbiAgICAgIGlzQ2FzZVNlbnNpdGl2ZSA9IENvbmZpZy5pc0Nhc2VTZW5zaXRpdmUsXG4gICAgICBpbmNsdWRlTWF0Y2hlcyA9IENvbmZpZy5pbmNsdWRlTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCA9IENvbmZpZy5taW5NYXRjaENoYXJMZW5ndGgsXG4gICAgICBmaW5kQWxsTWF0Y2hlcyA9IENvbmZpZy5maW5kQWxsTWF0Y2hlcyxcbiAgICAgIGxvY2F0aW9uID0gQ29uZmlnLmxvY2F0aW9uLFxuICAgICAgdGhyZXNob2xkID0gQ29uZmlnLnRocmVzaG9sZCxcbiAgICAgIGRpc3RhbmNlID0gQ29uZmlnLmRpc3RhbmNlXG4gICAgfSA9IHt9XG4gICkge1xuICAgIHRoaXMucXVlcnkgPSBudWxsO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGlzQ2FzZVNlbnNpdGl2ZSxcbiAgICAgIGluY2x1ZGVNYXRjaGVzLFxuICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoLFxuICAgICAgZmluZEFsbE1hdGNoZXMsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIHRocmVzaG9sZCxcbiAgICAgIGRpc3RhbmNlXG4gICAgfTtcblxuICAgIHRoaXMucGF0dGVybiA9IGlzQ2FzZVNlbnNpdGl2ZSA/IHBhdHRlcm4gOiBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5xdWVyeSA9IHBhcnNlUXVlcnkodGhpcy5wYXR0ZXJuLCB0aGlzLm9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGNvbmRpdGlvbihfLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMudXNlRXh0ZW5kZWRTZWFyY2hcbiAgfVxuXG4gIHNlYXJjaEluKHZhbHVlKSB7XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuXG4gICAgaWYgKCFxdWVyeSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNNYXRjaDogZmFsc2UsXG4gICAgICAgIHNjb3JlOiAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHRleHQgPSB2YWx1ZS4kO1xuXG4gICAgY29uc3QgeyBpbmNsdWRlTWF0Y2hlcywgaXNDYXNlU2Vuc2l0aXZlIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICB0ZXh0ID0gaXNDYXNlU2Vuc2l0aXZlID8gdGV4dCA6IHRleHQudG9Mb3dlckNhc2UoKTtcblxuICAgIGxldCBudW1NYXRjaGVzID0gMDtcbiAgICBsZXQgaW5kaWNlcyA9IFtdO1xuICAgIGxldCB0b3RhbFNjb3JlID0gMDtcblxuICAgIC8vIE9Sc1xuICAgIGZvciAobGV0IGkgPSAwLCBxTGVuID0gcXVlcnkubGVuZ3RoOyBpIDwgcUxlbjsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzZWFyY2hlcnMgPSBxdWVyeVtpXTtcblxuICAgICAgLy8gUmVzZXQgaW5kaWNlc1xuICAgICAgaW5kaWNlcy5sZW5ndGggPSAwO1xuICAgICAgbnVtTWF0Y2hlcyA9IDA7XG5cbiAgICAgIC8vIEFORHNcbiAgICAgIGZvciAobGV0IGogPSAwLCBwTGVuID0gc2VhcmNoZXJzLmxlbmd0aDsgaiA8IHBMZW47IGogKz0gMSkge1xuICAgICAgICBjb25zdCBzZWFyY2hlciA9IHNlYXJjaGVyc1tqXTtcbiAgICAgICAgY29uc3QgeyBpc01hdGNoLCBtYXRjaGVkSW5kaWNlcywgc2NvcmUgfSA9IHNlYXJjaGVyLnNlYXJjaCh0ZXh0KTtcblxuICAgICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICAgIG51bU1hdGNoZXMgKz0gMTtcbiAgICAgICAgICB0b3RhbFNjb3JlICs9IHNjb3JlO1xuICAgICAgICAgIGlmIChpbmNsdWRlTWF0Y2hlcykge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHNlYXJjaGVyLmNvbnN0cnVjdG9yLnR5cGU7XG4gICAgICAgICAgICBpZiAoTXVsdGlNYXRjaFNldC5oYXModHlwZSkpIHtcbiAgICAgICAgICAgICAgaW5kaWNlcyA9IFsuLi5pbmRpY2VzLCAuLi5tYXRjaGVkSW5kaWNlc107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpbmRpY2VzLnB1c2gobWF0Y2hlZEluZGljZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3RhbFNjb3JlID0gMDtcbiAgICAgICAgICBudW1NYXRjaGVzID0gMDtcbiAgICAgICAgICBpbmRpY2VzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPUiBjb25kaXRpb24sIHNvIGlmIFRSVUUsIHJldHVyblxuICAgICAgaWYgKG51bU1hdGNoZXMpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgICBpc01hdGNoOiB0cnVlLFxuICAgICAgICAgIHNjb3JlOiB0b3RhbFNjb3JlIC8gbnVtTWF0Y2hlc1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpbmNsdWRlTWF0Y2hlcykge1xuICAgICAgICAgIHJlc3VsdC5tYXRjaGVkSW5kaWNlcyA9IGluZGljZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTm90aGluZyB3YXMgbWF0Y2hlZFxuICAgIHJldHVybiB7XG4gICAgICBpc01hdGNoOiBmYWxzZSxcbiAgICAgIHNjb3JlOiAxXG4gICAgfVxuICB9XG59XG5cbmNvbnN0IFNQQUNFID0gL1teIF0rL2c7XG5cbmZ1bmN0aW9uIGNyZWF0ZUluZGV4KGtleXMsIGxpc3QsIHsgZ2V0Rm4gPSBDb25maWcuZ2V0Rm4gfSA9IHt9KSB7XG4gIGxldCBpbmRleGVkTGlzdCA9IFtdO1xuXG4gIC8vIExpc3QgaXMgQXJyYXk8U3RyaW5nPlxuICBpZiAoaXNTdHJpbmcobGlzdFswXSkpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgZXZlcnkgc3RyaW5nIGluIHRoZSBsaXN0XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbGlzdFtpXTtcblxuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkgJiYgIWlzQmxhbmsodmFsdWUpKSB7XG4gICAgICAgIGxldCByZWNvcmQgPSB7XG4gICAgICAgICAgJDogdmFsdWUsXG4gICAgICAgICAgaWR4OiBpLFxuICAgICAgICAgIHQ6IHZhbHVlLm1hdGNoKFNQQUNFKS5sZW5ndGhcbiAgICAgICAgfTtcblxuICAgICAgICBpbmRleGVkTGlzdC5wdXNoKHJlY29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIExpc3QgaXMgQXJyYXk8T2JqZWN0PlxuICAgIGNvbnN0IGtleXNMZW4gPSBrZXlzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBsZXQgaXRlbSA9IGxpc3RbaV07XG5cbiAgICAgIGxldCByZWNvcmQgPSB7IGlkeDogaSwgJDoge30gfTtcblxuICAgICAgLy8gSXRlcmF0ZSBvdmVyIGV2ZXJ5IGtleSAoaS5lLCBwYXRoKSwgYW5kIGZldGNoIHRoZSB2YWx1ZSBhdCB0aGF0IGtleVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXlzTGVuOyBqICs9IDEpIHtcbiAgICAgICAgbGV0IGtleSA9IGtleXNbal07XG4gICAgICAgIGxldCB2YWx1ZSA9IGdldEZuKGl0ZW0sIGtleSk7XG5cbiAgICAgICAgaWYgKCFpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGxldCBzdWJSZWNvcmRzID0gW107XG4gICAgICAgICAgY29uc3Qgc3RhY2sgPSBbeyBhcnJheUluZGV4OiAtMSwgdmFsdWUgfV07XG5cbiAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGFycmF5SW5kZXgsIHZhbHVlIH0gPSBzdGFjay5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKCFpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgJiYgIWlzQmxhbmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGxldCBzdWJSZWNvcmQgPSB7XG4gICAgICAgICAgICAgICAgJDogdmFsdWUsXG4gICAgICAgICAgICAgICAgaWR4OiBhcnJheUluZGV4LFxuICAgICAgICAgICAgICAgIHQ6IHZhbHVlLm1hdGNoKFNQQUNFKS5sZW5ndGhcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgc3ViUmVjb3Jkcy5wdXNoKHN1YlJlY29yZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwLCBhcnJMZW4gPSB2YWx1ZS5sZW5ndGg7IGsgPCBhcnJMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgYXJyYXlJbmRleDogayxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVtrXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlY29yZC4kW2tleV0gPSBzdWJSZWNvcmRzO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0JsYW5rKHZhbHVlKSkge1xuICAgICAgICAgIGxldCBzdWJSZWNvcmQgPSB7XG4gICAgICAgICAgICAkOiB2YWx1ZSxcbiAgICAgICAgICAgIHQ6IHZhbHVlLm1hdGNoKFNQQUNFKS5sZW5ndGhcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmVjb3JkLiRba2V5XSA9IHN1YlJlY29yZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbmRleGVkTGlzdC5wdXNoKHJlY29yZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZGV4ZWRMaXN0XG59XG5cbmNsYXNzIEtleVN0b3JlIHtcbiAgY29uc3RydWN0b3Ioa2V5cykge1xuICAgIHRoaXMuX2tleXMgPSB7fTtcbiAgICB0aGlzLl9rZXlOYW1lcyA9IFtdO1xuICAgIHRoaXMuX2xlbmd0aCA9IGtleXMubGVuZ3RoO1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIGV2ZXJ5IGtleVxuICAgIGlmIChrZXlzLmxlbmd0aCAmJiBpc1N0cmluZyhrZXlzWzBdKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB0aGlzLl9rZXlzW2tleV0gPSB7XG4gICAgICAgICAgd2VpZ2h0OiAxXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2tleU5hbWVzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRvdGFsV2VpZ2h0ID0gMDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGtleSwgJ25hbWUnKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcIm5hbWVcIiBwcm9wZXJ0eSBpbiBrZXkgb2JqZWN0JylcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGtleU5hbWUgPSBrZXkubmFtZTtcbiAgICAgICAgdGhpcy5fa2V5TmFtZXMucHVzaChrZXlOYW1lKTtcblxuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChrZXksICd3ZWlnaHQnKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcIndlaWdodFwiIHByb3BlcnR5IGluIGtleSBvYmplY3QnKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgd2VpZ2h0ID0ga2V5LndlaWdodDtcblxuICAgICAgICBpZiAod2VpZ2h0IDw9IDAgfHwgd2VpZ2h0ID49IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnXCJ3ZWlnaHRcIiBwcm9wZXJ0eSBpbiBrZXkgbXVzdCBiZSBpbiB0aGUgcmFuZ2Ugb2YgKDAsIDEpJ1xuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2tleXNba2V5TmFtZV0gPSB7XG4gICAgICAgICAgd2VpZ2h0XG4gICAgICAgIH07XG5cbiAgICAgICAgdG90YWxXZWlnaHQgKz0gd2VpZ2h0O1xuICAgICAgfVxuXG4gICAgICAvLyBOb3JtYWxpemUgd2VpZ2h0cyBzbyB0aGF0IHRoZWlyIHN1bSBpcyBlcXVhbCB0byAxXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2xlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGtleU5hbWUgPSB0aGlzLl9rZXlOYW1lc1tpXTtcbiAgICAgICAgY29uc3Qga2V5V2VpZ2h0ID0gdGhpcy5fa2V5c1trZXlOYW1lXS53ZWlnaHQ7XG4gICAgICAgIHRoaXMuX2tleXNba2V5TmFtZV0ud2VpZ2h0ID0ga2V5V2VpZ2h0IC8gdG90YWxXZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldChrZXksIG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fa2V5c1trZXldID8gdGhpcy5fa2V5c1trZXldW25hbWVdIDogLTFcbiAgfVxuICBrZXlzKCkge1xuICAgIHJldHVybiB0aGlzLl9rZXlOYW1lc1xuICB9XG4gIGNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGhcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuX2tleXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtTWF0Y2hlcyhyZXN1bHQsIGRhdGEpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHJlc3VsdC5tYXRjaGVzO1xuICBkYXRhLm1hdGNoZXMgPSBbXTtcblxuICBpZiAoIWlzRGVmaW5lZChtYXRjaGVzKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG1hdGNoZXMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzW2ldO1xuXG4gICAgaWYgKCFpc0RlZmluZWQobWF0Y2guaW5kaWNlcykgfHwgbWF0Y2guaW5kaWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgbGV0IG9iaiA9IHtcbiAgICAgIGluZGljZXM6IG1hdGNoLmluZGljZXMsXG4gICAgICB2YWx1ZTogbWF0Y2gudmFsdWVcbiAgICB9O1xuXG4gICAgaWYgKG1hdGNoLmtleSkge1xuICAgICAgb2JqLmtleSA9IG1hdGNoLmtleTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2guaWR4ID4gLTEpIHtcbiAgICAgIG9iai5yZWZJbmRleCA9IG1hdGNoLmlkeDtcbiAgICB9XG5cbiAgICBkYXRhLm1hdGNoZXMucHVzaChvYmopO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVNjb3JlKHJlc3VsdCwgZGF0YSkge1xuICBkYXRhLnNjb3JlID0gcmVzdWx0LnNjb3JlO1xufVxuXG5jb25zdCByZWdpc3RlcmVkU2VhcmNoZXJzID0gW107XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyKC4uLmFyZ3MpIHtcbiAgcmVnaXN0ZXJlZFNlYXJjaGVycy5wdXNoKC4uLmFyZ3MpO1xufVxuXG5jbGFzcyBGdXNlIHtcbiAgY29uc3RydWN0b3IobGlzdCwgb3B0aW9ucyA9IHt9LCBpbmRleCA9IG51bGwpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLkNvbmZpZywgLi4ub3B0aW9ucyB9O1xuXG4gICAgdGhpcy5fcHJvY2Vzc0tleXModGhpcy5vcHRpb25zLmtleXMpO1xuICAgIHRoaXMuc2V0Q29sbGVjdGlvbihsaXN0LCBpbmRleCk7XG4gIH1cblxuICBzZXRDb2xsZWN0aW9uKGxpc3QsIGluZGV4ID0gbnVsbCkge1xuICAgIHRoaXMubGlzdCA9IGxpc3Q7XG4gICAgdGhpcy5saXN0SXNTdHJpbmdBcnJheSA9IGlzU3RyaW5nKGxpc3RbMF0pO1xuXG4gICAgaWYgKGluZGV4KSB7XG4gICAgICB0aGlzLnNldEluZGV4KGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRJbmRleCh0aGlzLl9jcmVhdGVJbmRleCgpKTtcbiAgICB9XG4gIH1cblxuICBzZXRJbmRleChsaXN0SW5kZXgpIHtcbiAgICB0aGlzLl9pbmRleGVkTGlzdCA9IGxpc3RJbmRleDtcbiAgfVxuXG4gIF9wcm9jZXNzS2V5cyhrZXlzKSB7XG4gICAgdGhpcy5fa2V5U3RvcmUgPSBuZXcgS2V5U3RvcmUoa2V5cyk7XG4gIH1cblxuICBfY3JlYXRlSW5kZXgoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluZGV4KHRoaXMuX2tleVN0b3JlLmtleXMoKSwgdGhpcy5saXN0LCB7XG4gICAgICBnZXRGbjogdGhpcy5vcHRpb25zLmdldEZuXG4gICAgfSlcbiAgfVxuXG4gIHNlYXJjaChwYXR0ZXJuLCBvcHRzID0geyBsaW1pdDogZmFsc2UgfSkge1xuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnRyaW0oKTtcblxuICAgIGlmICghcGF0dGVybi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cblxuICAgIGNvbnN0IHsgc2hvdWxkU29ydCB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgbGV0IHNlYXJjaGVyID0gbnVsbDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZWdpc3RlcmVkU2VhcmNoZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBsZXQgc2VhcmNoZXJDbGFzcyA9IHJlZ2lzdGVyZWRTZWFyY2hlcnNbaV07XG4gICAgICBpZiAoc2VhcmNoZXJDbGFzcy5jb25kaXRpb24ocGF0dGVybiwgdGhpcy5vcHRpb25zKSkge1xuICAgICAgICBzZWFyY2hlciA9IG5ldyBzZWFyY2hlckNsYXNzKHBhdHRlcm4sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzZWFyY2hlcikge1xuICAgICAgc2VhcmNoZXIgPSBuZXcgQml0YXBTZWFyY2gocGF0dGVybiwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0cyA9IHRoaXMuX3NlYXJjaFVzaW5nKHNlYXJjaGVyKTtcblxuICAgIHRoaXMuX2NvbXB1dGVTY29yZShyZXN1bHRzKTtcblxuICAgIGlmIChzaG91bGRTb3J0KSB7XG4gICAgICB0aGlzLl9zb3J0KHJlc3VsdHMpO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxpbWl0ICYmIGlzTnVtYmVyKG9wdHMubGltaXQpKSB7XG4gICAgICByZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBvcHRzLmxpbWl0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZm9ybWF0KHJlc3VsdHMpXG4gIH1cblxuICBfc2VhcmNoVXNpbmcoc2VhcmNoZXIpIHtcbiAgICBjb25zdCBsaXN0ID0gdGhpcy5faW5kZXhlZExpc3Q7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGNvbnN0IHsgaW5jbHVkZU1hdGNoZXMgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIC8vIExpc3QgaXMgQXJyYXk8U3RyaW5nPlxuICAgIGlmICh0aGlzLmxpc3RJc1N0cmluZ0FycmF5KSB7XG4gICAgICAvLyBJdGVyYXRlIG92ZXIgZXZlcnkgc3RyaW5nIGluIHRoZSBsaXN0XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBsZXQgdmFsdWUgPSBsaXN0W2ldO1xuICAgICAgICBsZXQgeyAkOiB0ZXh0LCBpZHgsIHQgfSA9IHZhbHVlO1xuXG4gICAgICAgIGlmICghaXNEZWZpbmVkKHRleHQpKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzZWFyY2hSZXN1bHQgPSBzZWFyY2hlci5zZWFyY2hJbih2YWx1ZSk7XG5cbiAgICAgICAgY29uc3QgeyBpc01hdGNoLCBzY29yZSB9ID0gc2VhcmNoUmVzdWx0O1xuXG4gICAgICAgIGlmICghaXNNYXRjaCkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWF0Y2ggPSB7IHNjb3JlLCB2YWx1ZTogdGV4dCwgdCB9O1xuXG4gICAgICAgIGlmIChpbmNsdWRlTWF0Y2hlcykge1xuICAgICAgICAgIG1hdGNoLmluZGljZXMgPSBzZWFyY2hSZXN1bHQubWF0Y2hlZEluZGljZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgIGl0ZW06IHRleHQsXG4gICAgICAgICAgaWR4LFxuICAgICAgICAgIG1hdGNoZXM6IFttYXRjaF1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3QgaXMgQXJyYXk8T2JqZWN0PlxuICAgICAgY29uc3Qga2V5TmFtZXMgPSB0aGlzLl9rZXlTdG9yZS5rZXlzKCk7XG4gICAgICBjb25zdCBrZXlzTGVuID0gdGhpcy5fa2V5U3RvcmUuY291bnQoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHsgJDogaXRlbSwgaWR4IH0gPSBsaXN0W2ldO1xuXG4gICAgICAgIGlmICghaXNEZWZpbmVkKGl0ZW0pKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtYXRjaGVzID0gW107XG5cbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGV2ZXJ5IGtleSAoaS5lLCBwYXRoKSwgYW5kIGZldGNoIHRoZSB2YWx1ZSBhdCB0aGF0IGtleVxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGtleXNMZW47IGogKz0gMSkge1xuICAgICAgICAgIGxldCBrZXkgPSBrZXlOYW1lc1tqXTtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBpdGVtW2tleV07XG5cbiAgICAgICAgICBpZiAoIWlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoOyBrIDwgbGVuOyBrICs9IDEpIHtcbiAgICAgICAgICAgICAgbGV0IGFyckl0ZW0gPSB2YWx1ZVtrXTtcbiAgICAgICAgICAgICAgY29uc3QgeyAkOiB0ZXh0LCBpZHgsIHQgfSA9IGFyckl0ZW07XG5cbiAgICAgICAgICAgICAgaWYgKCFpc0RlZmluZWQodGV4dCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbGV0IHNlYXJjaFJlc3VsdCA9IHNlYXJjaGVyLnNlYXJjaEluKGFyckl0ZW0pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHsgaXNNYXRjaCwgc2NvcmUgfSA9IHNlYXJjaFJlc3VsdDtcblxuICAgICAgICAgICAgICBpZiAoIWlzTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbGV0IG1hdGNoID0geyBzY29yZSwga2V5LCB2YWx1ZTogdGV4dCwgaWR4LCB0IH07XG5cbiAgICAgICAgICAgICAgaWYgKGluY2x1ZGVNYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2guaW5kaWNlcyA9IHNlYXJjaFJlc3VsdC5tYXRjaGVkSW5kaWNlcztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgJDogdGV4dCwgdCB9ID0gdmFsdWU7XG5cbiAgICAgICAgICAgIGxldCBzZWFyY2hSZXN1bHQgPSBzZWFyY2hlci5zZWFyY2hJbih2YWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgaXNNYXRjaCwgc2NvcmUgfSA9IHNlYXJjaFJlc3VsdDtcblxuICAgICAgICAgICAgaWYgKCFpc01hdGNoKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBtYXRjaCA9IHsgc2NvcmUsIGtleSwgdmFsdWU6IHRleHQsIHQgfTtcblxuICAgICAgICAgICAgaWYgKGluY2x1ZGVNYXRjaGVzKSB7XG4gICAgICAgICAgICAgIG1hdGNoLmluZGljZXMgPSBzZWFyY2hSZXN1bHQubWF0Y2hlZEluZGljZXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgIGlkeCxcbiAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICBtYXRjaGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG5cbiAgLy8gUHJhY3RpY2FsIHNjb3JpbmcgZnVuY3Rpb25cbiAgX2NvbXB1dGVTY29yZShyZXN1bHRzKSB7XG4gICAgY29uc3QgcmVzdWx0c0xlbiA9IHJlc3VsdHMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzTGVuOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICBjb25zdCBtYXRjaGVzID0gcmVzdWx0Lm1hdGNoZXM7XG4gICAgICBjb25zdCBudW1NYXRjaGVzID0gbWF0Y2hlcy5sZW5ndGg7XG5cbiAgICAgIGxldCB0b3RhbFNjb3JlID0gMTtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBudW1NYXRjaGVzOyBqICs9IDEpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaGVzW2pdO1xuICAgICAgICBjb25zdCB7IGtleSwgdCB9ID0gbWF0Y2g7XG5cbiAgICAgICAgY29uc3Qga2V5V2VpZ2h0ID0gdGhpcy5fa2V5U3RvcmUuZ2V0KGtleSwgJ3dlaWdodCcpO1xuICAgICAgICBjb25zdCB3ZWlnaHQgPSBrZXlXZWlnaHQgPiAtMSA/IGtleVdlaWdodCA6IDE7XG4gICAgICAgIGNvbnN0IHNjb3JlID1cbiAgICAgICAgICBtYXRjaC5zY29yZSA9PT0gMCAmJiBrZXlXZWlnaHQgPiAtMSA/IE51bWJlci5FUFNJTE9OIDogbWF0Y2guc2NvcmU7XG5cbiAgICAgICAgLy8gRmllbGQtbGVuZ3RoIG5vcm06IHRoZSBzaG9ydGVyIHRoZSBmaWVsZCwgdGhlIGhpZ2hlciB0aGUgd2VpZ2h0LlxuICAgICAgICBjb25zdCBub3JtID0gMSAvIE1hdGguc3FydCh0KTtcblxuICAgICAgICB0b3RhbFNjb3JlICo9IE1hdGgucG93KHNjb3JlLCB3ZWlnaHQgKiBub3JtKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0LnNjb3JlID0gdG90YWxTY29yZTtcbiAgICB9XG4gIH1cblxuICBfc29ydChyZXN1bHRzKSB7XG4gICAgcmVzdWx0cy5zb3J0KHRoaXMub3B0aW9ucy5zb3J0Rm4pO1xuICB9XG5cbiAgX2Zvcm1hdChyZXN1bHRzKSB7XG4gICAgY29uc3QgZmluYWxPdXRwdXQgPSBbXTtcblxuICAgIGNvbnN0IHsgaW5jbHVkZU1hdGNoZXMsIGluY2x1ZGVTY29yZSB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgbGV0IHRyYW5zZm9ybWVycyA9IFtdO1xuXG4gICAgaWYgKGluY2x1ZGVNYXRjaGVzKSB0cmFuc2Zvcm1lcnMucHVzaCh0cmFuc2Zvcm1NYXRjaGVzKTtcbiAgICBpZiAoaW5jbHVkZVNjb3JlKSB0cmFuc2Zvcm1lcnMucHVzaCh0cmFuc2Zvcm1TY29yZSk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgIGNvbnN0IHsgaWR4IH0gPSByZXN1bHQ7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGl0ZW06IHRoaXMubGlzdFtpZHhdLFxuICAgICAgICByZWZJbmRleDogaWR4XG4gICAgICB9O1xuXG4gICAgICBpZiAodHJhbnNmb3JtZXJzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBqID0gMCwgbGVuID0gdHJhbnNmb3JtZXJzLmxlbmd0aDsgaiA8IGxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgdHJhbnNmb3JtZXJzW2pdKHJlc3VsdCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmluYWxPdXRwdXQucHVzaChkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmluYWxPdXRwdXRcbiAgfVxufVxuXG5yZWdpc3RlcihFeHRlbmRlZFNlYXJjaCk7XG5cbkZ1c2UudmVyc2lvbiA9ICc1LjIuMyc7XG5GdXNlLmNyZWF0ZUluZGV4ID0gY3JlYXRlSW5kZXg7XG5GdXNlLmNvbmZpZyA9IENvbmZpZztcblxuZXhwb3J0IGRlZmF1bHQgRnVzZTtcbiIsIlxuICAgIGltcG9ydCB7Y3NzfSBmcm9tICdsaXQtZWxlbWVudCc7XG4gICAgZXhwb3J0IGRlZmF1bHQgY3NzYDpob3N0e2Rpc3BsYXk6YmxvY2s7b3ZlcmZsb3c6YXV0b30uc2hvcnRjdXRze21hcmdpbi1ib3R0b206NHB4O2NvbG9yOiM5OTk7Zm9udC1zaXplOjE0cHg7dGV4dC1hbGlnbjpjZW50ZXJ9LnNob3J0Y3V0cyBzcGFuOm5vdCg6bGFzdC1jaGlsZCl7bWFyZ2luLXJpZ2h0OjhweH0uc2VhcmNoLWlucHV0e3dpZHRoOjEwMCU7LS1tZGMtdGhlbWUtcHJpbWFyeTogIzg4ODstLW1kYy10ZXh0LWZpZWxkLWZpbGwtY29sb3I6IHJnYmEoMCwwLDAsLjgpOy0tbWRjLXRleHQtZmllbGQtaW5rLWNvbG9yOiAjZGRkOy0tbWRjLXRleHQtZmllbGQtZmlsbGVkLWJvcmRlci1yYWRpdXM6IDhweCA4cHggMCAwfS5yZXN1bHRze21heC1oZWlnaHQ6NDgwcHg7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuNyk7Ym9yZGVyLXJhZGl1czowIDAgOHB4IDhweDtvdmVyZmxvdy15OnNjcm9sbDtvdmVyZmxvdy15Oi1tb3otc2Nyb2xsYmFycy1ub25lOy1tcy1vdmVyZmxvdy1zdHlsZTpub25lO3Njcm9sbGJhci13aWR0aDp0aGlufS5yZXN1bHRzOjotd2Via2l0LXNjcm9sbGJhcntkaXNwbGF5Om5vbmV9Lm5vLXJlc3VsdHN7dGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZzoxMnB4IDA7Y29sb3I6IzQ0NDtmb250LXNpemU6MTRweH1cbmA7XG4gICIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnLmRldidcblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuICBwcmVmaXg6IHN0cmluZ1xuICB1cmw/OiBzdHJpbmdcbiAgaW50ZXJuYWw/OiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGluayB7XG4gIG5hbWU6IHN0cmluZ1xuICB1cmw/OiBzdHJpbmdcbiAgYWN0aW9uPzogQWN0aW9uXG4gIGZhdmljb25Vcmw/OiBzdHJpbmdcbiAgdGFnczogc3RyaW5nW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hDb25maWcge1xuICBtYXhSZXN1bHRzOiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuICBhcGlCYXNlVXJsOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBzZWFyY2g6IFNlYXJjaENvbmZpZ1xuICBsaW5rczogTGlua1tdXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZyBhcyBDb25maWdcbiIsIi8vIFRISVMgTU9EVUxFIFdJTEwgQkUgUkVQTEFDRUQgQlkgL2NvbmZpZy9jb25maWcucHJvZC50c1xuLy8gRk9SIFBST0RVQ1RJT04gQlVJTERcblxuZXhwb3J0IGRlZmF1bHQge1xuICBhcGlCYXNlVXJsOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaScsXG4gIHRpdGxlOiAnTmV3IFRhYicsXG4gIHNlYXJjaDoge1xuICAgIG1heFJlc3VsdHM6IDgsXG4gIH0sXG4gIGxpbmtzOiBbXG4gICAge1xuICAgICAgbmFtZTogJ3RyYW5zbGF0ZScsXG4gICAgICBhY3Rpb246IHtcbiAgICAgICAgcHJlZml4OiAndHJhbnNsYXRlOiAnLFxuICAgICAgICB1cmw6ICdodHRwczovL3RyYW5zbGF0ZS5nb29nbGUuY29tLyN2aWV3PWhvbWUmb3A9dHJhbnNsYXRlJnNsPWF1dG8mdGw9YXV0byZ0ZXh0PScsXG4gICAgICB9LFxuICAgICAgdGFnczogWyAnYWN0aW9uJyBdLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2dvb2dsZScsXG4gICAgICBhY3Rpb246IHtcbiAgICAgICAgcHJlZml4OiAnZ29vZ2xlOiAnLFxuICAgICAgICB1cmw6ICdodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPScsXG4gICAgICB9LFxuICAgICAgdGFnczogWyAnYWN0aW9uJyBdLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2xvYWQnLFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIHByZWZpeDogJ2xvYWQ6ICcsXG4gICAgICAgIGludGVybmFsOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHRhZ3M6IFsgJ2FjdGlvbicgXSxcbiAgICB9LFxuICBdLFxufTtcbiIsImltcG9ydCBjb25maWcsIHsgTGluayB9IGZyb20gJ3V0aWxzL2NvbmZpZydcbmltcG9ydCB7IHNldENvb2tpZSwgZ2V0Q29va2llIH0gZnJvbSAndXRpbHMvY29va2llcydcblxuXG5jb25zdCBTT1VSQ0VfQ09PS0lFID0gJ2xpbmtzLXNvdXJjZSdcblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSB7XG4gIGxpbmtzOiBMaW5rW11cbiAgaXNMb2FkaW5nOiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIFN1YnNjcmliZXJGbiA9IChzdGF0ZTogU3RhdGUpID0+IHZvaWRcbmV4cG9ydCB0eXBlIFVuc3Vic2NyaWJlRm4gPSAoKSA9PiB2b2lkXG5cbmNsYXNzIFN0b3JlIHtcbiAgaXNMb2FkaW5nOiBib29sZWFuID0gdHJ1ZVxuICBsaW5rczogTGlua1tdXG4gIF9zdWJzOiBTdWJzY3JpYmVyRm5bXSA9IFtdXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5saW5rcyA9IFsgLi4uY29uZmlnLmxpbmtzIF1cbiAgICB0aGlzLl9pbml0TGlua3MoKVxuICB9XG5cbiAgX2dldFN0YXRlKCk6IFN0YXRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGlua3M6IHRoaXMubGlua3MsXG4gICAgICBpc0xvYWRpbmc6IHRoaXMuaXNMb2FkaW5nXG4gICAgfVxuICB9XG5cbiAgX3NldExpbmtzKGxpbmtzOiBMaW5rW10pIHtcbiAgICB0aGlzLmxpbmtzID0gWyAuLi5saW5rcyBdXG4gICAgdGhpcy5fdXBkYXRlU3Vic2NyaWJlcnMoKVxuICB9XG5cbiAgX3NldExvYWRpbmcodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc0xvYWRpbmcgPSB2YWxcbiAgICB0aGlzLl91cGRhdGVTdWJzY3JpYmVycygpXG4gIH1cblxuICBfdXBkYXRlU3Vic2NyaWJlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5fc3Vicy5mb3JFYWNoKHMgPT4gcyh0aGlzLl9nZXRTdGF0ZSgpKSlcbiAgfVxuXG4gIHN1YnNjcmliZShjYjogU3Vic2NyaWJlckZuKSB7XG4gICAgY29uc3QgaW5kID0gdGhpcy5fc3Vicy5sZW5ndGhcbiAgICB0aGlzLl9zdWJzLnB1c2goY2IpXG5cbiAgICAvLyBub3RpZnkgaW1tZWRpYXRlbGx5IHdpdGggY3VycmVudCBkYXRhXG4gICAgY2IodGhpcy5fZ2V0U3RhdGUoKSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLl9zdWJzLnNwbGljZShpbmQsIDEpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX2luaXRMaW5rcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB1cmwgPSBnZXRDb29raWUoU09VUkNFX0NPT0tJRSlcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhpcy5fc2V0TG9hZGluZyhmYWxzZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9mZXRjaExpbmtzKHVybClcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdGhpcy5fc2V0TGlua3MoWyAuLi5kYXRhLCAuLi5jb25maWcubGlua3MgXSlcbiAgICAgIHRoaXMuX3NldExvYWRpbmcoZmFsc2UpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbG9hZCh1cmw6IHN0cmluZykge1xuICAgIHRoaXMuX3NldExvYWRpbmcodHJ1ZSlcbiAgICBpZiAodXJsLm1hdGNoKC9eaHR0cHM6XFwvXFwvLipcXC5qc29uJC8pKSB7XG4gICAgICBzZXRDb29raWUoU09VUkNFX0NPT0tJRSwgdXJsLCAwLCB0cnVlKVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5fZmV0Y2hMaW5rcyh1cmwpXG4gICAgICB0aGlzLl9zZXRMb2FkaW5nKGZhbHNlKVxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fc2V0TGlua3MoWyAuLi5kYXRhLCAuLi5jb25maWcubGlua3MgXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIGFzeW5jIF9mZXRjaExpbmtzKHVybDogc3RyaW5nKTogUHJvbWlzZTxMaW5rW10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLmFsbG9yaWdpbnMud2luL2dldD91cmw9JHtlbmNvZGVVUklDb21wb25lbnQodXJsKX1gKVxuICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLmpzb24oKVxuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSh0ZXh0LmNvbnRlbnRzKVxuICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgfVxuICAgIH0gY2F0Y2goZXJyKSB7IH1cblxuICAgIHJldHVybiBbXVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBTdG9yZSgpXG4iLCJleHBvcnQgZnVuY3Rpb24gc2V0Q29va2llKG5hbWU6IHN0cmluZywgdmFsOiBzdHJpbmcsIGRheXM/OiBudW1iZXIsIG5vRG9tYWluPzogYm9vbGVhbikge1xuICBsZXQgZXhwaXJlcyA9ICcnXG4gIGlmIChkYXlzKSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKClcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKVxuICAgIGV4cGlyZXMgPSBcIjsgZXhwaXJlcz0gXCIgKyBkYXRlLnRvVVRDU3RyaW5nKClcbiAgfVxuXG4gIGxldCBkb21haW5OYW1lID0gZ2V0SG9zdE5hbWUobG9jYXRpb24uaHJlZilcbiAgaWYgKGRvbWFpbk5hbWUgIT09ICdsb2NhbGhvc3QnKSB7IGRvbWFpbk5hbWUgPSAnLicgKyBkb21haW5OYW1lIH1cbiAgY29uc3QgZG9tYWluID0gbm9Eb21haW4gPT09IHRydWUgPyAnJyA6ICgnOyBkb21haW49JyArIGRvbWFpbk5hbWUpXG5cbiAgY29uc3QgY29va2llU3RyID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nICtcbiAgICBlbmNvZGVVUklDb21wb25lbnQodmFsKSArXG4gICAgZXhwaXJlcyArXG4gICAgZG9tYWluICtcbiAgICAnOyBwYXRoPS87J1xuICBjb25zb2xlLmxvZyhjb29raWVTdHIpXG4gIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVN0clxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29va2llKG5hbWU6IHN0cmluZykge1xuICBjb25zdCBtID0gZG9jdW1lbnQuY29va2llLm1hdGNoKCcoXnw7KVxcXFxzKicgKyBuYW1lICsgJ1xcXFxzKj1cXFxccyooW147XSspJylcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChtID8gbS5wb3AoKSB8fCAnJyA6ICcnKVxufVxuXG5mdW5jdGlvbiBnZXRIb3N0TmFtZSh1cmw6IHN0cmluZykge1xuICB2YXIgbSA9IHVybC5tYXRjaCgvOlxcL1xcLyh3d3dbMC05XT9cXC4pPyguW14vOl0rKS9pKVxuICBpZiAobSAhPSBudWxsICYmIG0ubGVuZ3RoID4gMiAmJiB0eXBlb2YgbVsyXSA9PT0gJ3N0cmluZycgJiYgbVsyXS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIG1bMl1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlUGFydCwgZGlyZWN0aXZlLCBQcm9wZXJ0eVBhcnQgfSBmcm9tICcuLi9saXQtaHRtbC5qcyc7XG4vKipcbiAqIFN0b3JlcyB0aGUgU3R5bGVJbmZvIG9iamVjdCBhcHBsaWVkIHRvIGEgZ2l2ZW4gQXR0cmlidXRlUGFydC5cbiAqIFVzZWQgdG8gdW5zZXQgZXhpc3RpbmcgdmFsdWVzIHdoZW4gYSBuZXcgU3R5bGVJbmZvIG9iamVjdCBpcyBhcHBsaWVkLlxuICovXG5jb25zdCBwcmV2aW91c1N0eWxlUHJvcGVydHlDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHRoYXQgYXBwbGllcyBDU1MgcHJvcGVydGllcyB0byBhbiBlbGVtZW50LlxuICpcbiAqIGBzdHlsZU1hcGAgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYHN0eWxlYCBhdHRyaWJ1dGUgYW5kIG11c3QgYmUgdGhlIG9ubHlcbiAqIGV4cHJlc3Npb24gaW4gdGhlIGF0dHJpYnV0ZS4gSXQgdGFrZXMgdGhlIHByb3BlcnR5IG5hbWVzIGluIHRoZSBgc3R5bGVJbmZvYFxuICogb2JqZWN0IGFuZCBhZGRzIHRoZSBwcm9wZXJ0eSB2YWx1ZXMgYXMgQ1NTIHByb3BlcnRpZXMuIFByb3BlcnR5IG5hbWVzIHdpdGhcbiAqIGRhc2hlcyAoYC1gKSBhcmUgYXNzdW1lZCB0byBiZSB2YWxpZCBDU1MgcHJvcGVydHkgbmFtZXMgYW5kIHNldCBvbiB0aGVcbiAqIGVsZW1lbnQncyBzdHlsZSBvYmplY3QgdXNpbmcgYHNldFByb3BlcnR5KClgLiBOYW1lcyB3aXRob3V0IGRhc2hlcyBhcmVcbiAqIGFzc3VtZWQgdG8gYmUgY2FtZWxDYXNlZCBKYXZhU2NyaXB0IHByb3BlcnR5IG5hbWVzIGFuZCBzZXQgb24gdGhlIGVsZW1lbnQnc1xuICogc3R5bGUgb2JqZWN0IHVzaW5nIHByb3BlcnR5IGFzc2lnbm1lbnQsIGFsbG93aW5nIHRoZSBzdHlsZSBvYmplY3QgdG9cbiAqIHRyYW5zbGF0ZSBKYXZhU2NyaXB0LXN0eWxlIG5hbWVzIHRvIENTUyBwcm9wZXJ0eSBuYW1lcy5cbiAqXG4gKiBGb3IgZXhhbXBsZSBgc3R5bGVNYXAoe2JhY2tncm91bmRDb2xvcjogJ3JlZCcsICdib3JkZXItdG9wJzogJzVweCcsICctLXNpemUnOlxuICogJzAnfSlgIHNldHMgdGhlIGBiYWNrZ3JvdW5kLWNvbG9yYCwgYGJvcmRlci10b3BgIGFuZCBgLS1zaXplYCBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSBzdHlsZUluZm8ge1N0eWxlSW5mb31cbiAqL1xuZXhwb3J0IGNvbnN0IHN0eWxlTWFwID0gZGlyZWN0aXZlKChzdHlsZUluZm8pID0+IChwYXJ0KSA9PiB7XG4gICAgaWYgKCEocGFydCBpbnN0YW5jZW9mIEF0dHJpYnV0ZVBhcnQpIHx8IChwYXJ0IGluc3RhbmNlb2YgUHJvcGVydHlQYXJ0KSB8fFxuICAgICAgICBwYXJ0LmNvbW1pdHRlci5uYW1lICE9PSAnc3R5bGUnIHx8IHBhcnQuY29tbWl0dGVyLnBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHN0eWxlTWFwYCBkaXJlY3RpdmUgbXVzdCBiZSB1c2VkIGluIHRoZSBzdHlsZSBhdHRyaWJ1dGUgJyArXG4gICAgICAgICAgICAnYW5kIG11c3QgYmUgdGhlIG9ubHkgcGFydCBpbiB0aGUgYXR0cmlidXRlLicpO1xuICAgIH1cbiAgICBjb25zdCB7IGNvbW1pdHRlciB9ID0gcGFydDtcbiAgICBjb25zdCB7IHN0eWxlIH0gPSBjb21taXR0ZXIuZWxlbWVudDtcbiAgICBsZXQgcHJldmlvdXNTdHlsZVByb3BlcnRpZXMgPSBwcmV2aW91c1N0eWxlUHJvcGVydHlDYWNoZS5nZXQocGFydCk7XG4gICAgaWYgKHByZXZpb3VzU3R5bGVQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gV3JpdGUgc3RhdGljIHN0eWxlcyBvbmNlXG4gICAgICAgIHN0eWxlLmNzc1RleHQgPSBjb21taXR0ZXIuc3RyaW5ncy5qb2luKCcgJyk7XG4gICAgICAgIHByZXZpb3VzU3R5bGVQcm9wZXJ0eUNhY2hlLnNldChwYXJ0LCBwcmV2aW91c1N0eWxlUHJvcGVydGllcyA9IG5ldyBTZXQoKSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBvbGQgcHJvcGVydGllcyB0aGF0IG5vIGxvbmdlciBleGlzdCBpbiBzdHlsZUluZm9cbiAgICAvLyBXZSB1c2UgZm9yRWFjaCgpIGluc3RlYWQgb2YgZm9yLW9mIHNvIHRoYXQgcmUgZG9uJ3QgcmVxdWlyZSBkb3duLWxldmVsXG4gICAgLy8gaXRlcmF0aW9uLlxuICAgIHByZXZpb3VzU3R5bGVQcm9wZXJ0aWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgaWYgKCEobmFtZSBpbiBzdHlsZUluZm8pKSB7XG4gICAgICAgICAgICBwcmV2aW91c1N0eWxlUHJvcGVydGllcy5kZWxldGUobmFtZSk7XG4gICAgICAgICAgICBpZiAobmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICBzdHlsZVtuYW1lXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFkZCBvciB1cGRhdGUgcHJvcGVydGllc1xuICAgIGZvciAoY29uc3QgbmFtZSBpbiBzdHlsZUluZm8pIHtcbiAgICAgICAgcHJldmlvdXNTdHlsZVByb3BlcnRpZXMuYWRkKG5hbWUpO1xuICAgICAgICBpZiAobmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgc3R5bGVbbmFtZV0gPSBzdHlsZUluZm9bbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBzdHlsZUluZm9bbmFtZV0pO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZS1tYXAuanMubWFwIiwiXG4gICAgaW1wb3J0IHtjc3N9IGZyb20gJ2xpdC1lbGVtZW50JztcbiAgICBleHBvcnQgZGVmYXVsdCBjc3NgOmhvc3R7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzo4cHggOHB4O2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXJ9Omhvc3QoW3BsYWNlaG9sZGVyXSl7aGVpZ2h0OjQwcHh9YXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7Zm9udC1zaXplOjE2cHg7Y29sb3I6I2JiYjt0ZXh0LWRlY29yYXRpb246bm9uZX1pe21hcmdpbi1yaWdodDo0cHg7ZGlzcGxheTpibG9jazt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmJvdHRvbSA0cHggY2VudGVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdH0uY29udGVudHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm5hbWV7Zm9udC13ZWlnaHQ6NTAwfS51cmx7Zm9udC1zaXplOjEzcHg7Zm9udC13ZWlnaHQ6MzAwO21heC13aWR0aDozMDBweDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXB9LnRhZ3N7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6NnB4O3RvcDo0cHh9LnRhZ3Mgc3BhbnttYXJnaW4tcmlnaHQ6NHB4O2ZvbnQtc2l6ZToxM3B4O2ZvbnQtd2VpZ2h0OjQwMDtjb2xvcjojYjE4ZGUxfTpob3N0KDpub3QoW2hvdmVyZWRdKSl7b3BhY2l0eTouOH06aG9zdChbaG92ZXJlZF0pLDpob3N0KDpob3Zlcil7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LDAuMDgpfTpob3N0KFtob3ZlcmVkXSkgYSw6aG9zdCg6aG92ZXIpIGF7Y29sb3I6I2YzZjNmM31cbmA7XG4gICIsImltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwsIGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSAnbGl0LWVsZW1lbnQnXG5pbXBvcnQgeyBzdHlsZU1hcCB9IGZyb20gJ2xpdC1odG1sL2RpcmVjdGl2ZXMvc3R5bGUtbWFwJ1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vaHAtbGluay5zYXNzJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3V0aWxzL2NvbmZpZydcblxuQGN1c3RvbUVsZW1lbnQoJ2hwLWxpbmsnKVxuZXhwb3J0IGNsYXNzIEhwTGluayBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gIGhvdmVyZWQgPSBmYWxzZVxuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IE9iamVjdCB9KVxuICBsaW5rPzogTGlua1xuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgcGxhY2Vob2xkZXI/OiBib29sZWFuID0gZmFsc2VcblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gWyBzdHlsZXMgXVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gJydcbiAgICBpZiAoIXRoaXMubGluaykgcmV0dXJuICcnXG5cbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybChodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP2RvbWFpbj0ke3RoaXMubGluay5mYXZpY29uVXJsIHx8XG4gICAgICAgIHRoaXMubGluay51cmx9KWAsXG4gICAgfVxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGEgaHJlZj1cIiR7dGhpcy5saW5rLnVybH1cIj5cbiAgICAgICAgPGkgc3R5bGU9XCIke3N0eWxlTWFwKHN0eWxlKX1cIj48L2k+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibmFtZVwiPiR7dGhpcy5saW5rLm5hbWV9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInVybFwiPiR7dGhpcy5saW5rLnVybH08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRhZ3NcIj5cbiAgICAgICAgICAke3RoaXMubGluay50YWdzLm1hcChcbiAgICAgICAgICAgIHQgPT4gaHRtbGBcbiAgICAgICAgICAgICAgPHNwYW4+JHt0fTwvc3Bhbj5cbiAgICAgICAgICAgIGBcbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYT5cbiAgICBgXG4gIH1cbn1cbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwsIGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5LCBQcm9wZXJ0eVZhbHVlcyB9IGZyb20gJ2xpdC1lbGVtZW50J1xuXG5pbXBvcnQgJ0BtYXRlcmlhbC9td2MtdGV4dGZpZWxkJ1xuaW1wb3J0IEZ1c2UgZnJvbSAnZnVzZS5qcydcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2hwLXNlYXJjaC5zYXNzJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3V0aWxzL2NvbmZpZydcbmltcG9ydCBzdG9yZSwgeyBVbnN1YnNjcmliZUZuLCBTdGF0ZSB9IGZyb20gJy4vc3RvcmUnXG5cbmltcG9ydCAnLi9saW5rL2hwLWxpbmsnXG5cbkBjdXN0b21FbGVtZW50KCdocC1zZWFyY2gnKVxuZXhwb3J0IGNsYXNzIEhwU2VhcmNoIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSh7IHR5cGU6IEFycmF5IH0pXG4gIGxpbmtzOiBMaW5rW10gPSBbXVxuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4gfSlcbiAgaXNMb2FkaW5nOiBib29sZWFuID0gdHJ1ZVxuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IE51bWJlciB9KVxuICBob3ZlcmVkOiBudW1iZXIgPSAwXG5cbiAgQHByb3BlcnR5KHsgdHlwZTogQXJyYXkgfSlcbiAgcmVzdWx0czogTGlua1tdID0gW11cblxuICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbiAgdmFsdWU6IHN0cmluZyA9ICcnXG5cbiAgaW5wdXQ/OiBIVE1MSW5wdXRFbGVtZW50XG4gIF91bnN1Yj86IFVuc3Vic2NyaWJlRm5cblxuICBzdGF0aWMgc3R5bGVzID0gWyBzdHlsZXMgXVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX3Vuc3ViID0gc3RvcmUuc3Vic2NyaWJlKHRoaXMuX3N0YXRlQ2hhbmdlZClcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpXG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3Vuc3ViID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl91bnN1YigpXG4gICAgfVxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKVxuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKClcbiAgfVxuXG4gIGZpcnN0VXBkYXRlZCgpIHtcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5zaGFkb3dSb290IS5nZXRFbGVtZW50QnlJZCgnaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pXG4gIH1cblxuICB1cGRhdGVkKGNoYW5nZXM6IFByb3BlcnR5VmFsdWVzKSB7XG4gICAgaWYgKGNoYW5nZXMuaGFzKCdob3ZlcmVkJykpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5fdXBkYXRlUmVzdWx0c1Njcm9sbCwgMClcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5oYXMoJ3Jlc3VsdHMnKSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmhvdmVyZWQgPSAwLCAwKVxuICAgIH1cbiAgfVxuXG4gIF9zdGF0ZUNoYW5nZWQgPSAoc3RhdGU6IFN0YXRlKSA9PiB7XG4gICAgdGhpcy5saW5rcyA9IHN0YXRlLmxpbmtzXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBzdGF0ZS5pc0xvYWRpbmdcbiAgICB0aGlzLl91cGRhdGVSZXN1bHRzKClcbiAgfVxuXG4gIF91cGRhdGVSZXN1bHRzID0gKCkgPT4ge1xuICAgIGxldCBtYXRjaGVzID0gQXJyYXkuZnJvbSh0aGlzLnZhbHVlLm1hdGNoQWxsKC9eKFxcdys6ICkvZyksIG0gPT4gbVswXSlcbiAgICBpZiAobWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgIC8vIEFjdGlvbiBmb3VuZCFcbiAgICAgIHRoaXMucmVzdWx0cyA9IHRoaXMubGlua3MuZmlsdGVyKGwgPT4gbC5hY3Rpb24/LnByZWZpeCA9PT0gbWF0Y2hlc1swXSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCByZXMgPSB0aGlzLnZhbHVlLnNwbGl0KCcgJykucmVkdWNlKChyZXMsIHZhbCkgPT4ge1xuICAgICAgaWYgKCF2YWwpIHJldHVybiByZXNcblxuICAgICAgbGV0IGZ1c2UgPSBuZXcgRnVzZShyZXMsIHtcbiAgICAgICAga2V5czogWyd0YWdzJywgJ25hbWUnXSxcbiAgICAgICAgdGhyZXNob2xkOiAwLjQsXG4gICAgICAgIGZpbmRBbGxNYXRjaGVzOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIHJlcyA9IGZ1c2Uuc2VhcmNoKHZhbCkubWFwKHIgPT4gci5pdGVtKVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH0sIHRoaXMubGlua3MgfHwgW10pXG5cbiAgICB0aGlzLnJlc3VsdHMgPSByZXNcbiAgfVxuXG4gIF9vbktleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIGxldCBtYXRjaGVkID0gZmFsc2VcbiAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5ID09PSAnaicgfHwgZS5rZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICB0aGlzLmhvdmVyZWQrK1xuICAgICAgbWF0Y2hlZCA9IHRydWVcbiAgICB9XG4gICAgaWYgKGUuY3RybEtleSAmJiBlLmtleSA9PT0gJ2snIHx8IGUua2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIHRoaXMuaG92ZXJlZC0tXG4gICAgICBtYXRjaGVkID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAoZS5rZXkgPT09ICdUYWInKSB7XG4gICAgICBsZXQgcmVzID0gdGhpcy5yZXN1bHRzW3RoaXMuaG92ZXJlZF1cbiAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgaWYgKHJlcy5hY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLmlucHV0IS52YWx1ZSA9IHJlcy5hY3Rpb24ucHJlZml4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1hdGNoZWQgPSB0cnVlXG4gICAgfVxuICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgbGV0IHJlcyA9IHRoaXMucmVzdWx0c1t0aGlzLmhvdmVyZWRdXG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIGlmIChyZXMuYWN0aW9uKSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy52YWx1ZS5zbGljZShyZXMuYWN0aW9uLnByZWZpeC5sZW5ndGgpXG4gICAgICAgICAgaWYgKHJlcy5hY3Rpb24uaW50ZXJuYWwpICB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25GbiA9IHRoaXNbYF8ke3Jlcy5uYW1lfV9hY3Rpb25gXVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25GbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBhY3Rpb25Gbih2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5hY3Rpb24udXJsKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke3Jlcy5hY3Rpb24udXJsfSR7dmFsdWV9YFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXMudXJsKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSByZXMudXJsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1hdGNoZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvdmVyZWQgPj0gdGhpcy5yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5ob3ZlcmVkID0gdGhpcy5yZXN1bHRzLmxlbmd0aCAtIDFcbiAgICB9XG4gICAgaWYgKHRoaXMuaG92ZXJlZCA8IDApIHtcbiAgICAgIHRoaXMuaG92ZXJlZCA9IDBcbiAgICB9XG4gIH1cblxuICBfbG9hZF9hY3Rpb24gPSBhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHN0b3JlLmxvYWQodmFsdWUpXG4gICAgdGhpcy52YWx1ZSA9ICcnXG4gICAgdGhpcy5pbnB1dCEudmFsdWUgPSAnJ1xuICAgIHRoaXMuX3VwZGF0ZVJlc3VsdHMoKVxuICB9XG5cbiAgX29uSW5wdXQgPSAoZTogSW5wdXRFdmVudCkgPT4ge1xuICAgIHRoaXMudmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCk/LnZhbHVlXG4gICAgdGhpcy5fdXBkYXRlUmVzdWx0cygpXG4gIH1cblxuICBfdXBkYXRlUmVzdWx0c1Njcm9sbCA9ICgpID0+IHtcbiAgICBjb25zdCByZXMgPSB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoJy5yZXN1bHRzJylcbiAgICBjb25zdCBpdGVtID0gdGhpcy5zaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yKCdocC1saW5rW2hvdmVyZWRdJylcblxuICAgIGNvbnN0IHJlc1JlY3QgPSByZXM/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgaXRlbVJlY3QgPSBpdGVtPy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgaWYgKCFyZXNSZWN0IHx8ICFpdGVtUmVjdCkgcmV0dXJuXG5cbiAgICBjb25zdCB0b3BEaWZmID0gaXRlbVJlY3Q/LnRvcCAtIHJlc1JlY3Q/LnRvcFxuICAgIGlmICh0b3BEaWZmIDwgMCkge1xuICAgICAgcmVzPy5zY3JvbGxCeSh7IHRvcDogdG9wRGlmZiwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBib3R0b21EaWZmID0gaXRlbVJlY3Q/LmJvdHRvbSAtIHJlc1JlY3Q/LmJvdHRvbVxuICAgIGlmIChib3R0b21EaWZmID4gMCkge1xuICAgICAgcmVzPy5zY3JvbGxCeSh7IHRvcDogYm90dG9tRGlmZiwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cInNob3J0Y3V0c1wiPlxuICAgICAgICA8c3Bhbj5DVFJMLUo9JiM4NTk1Ozwvc3Bhbj5cbiAgICAgICAgPHNwYW4+Q1RSTC1LPSYjODU5Mzs8L3NwYW4+XG4gICAgICAgIDxzcGFuPlRBQj1BdXRvY29tcGxldGU8L3NwYW4+XG4gICAgICAgIDxzcGFuPkVOVEVSPUFjY2VwdDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8bXdjLXRleHRmaWVsZFxuICAgICAgICBpZD1cImlucHV0XCJcbiAgICAgICAgY2xhc3M9XCJzZWFyY2gtaW5wdXRcIlxuICAgICAgICBhdXRvZm9jdXNcbiAgICAgICAgQGlucHV0PSR7dGhpcy5fb25JbnB1dH1cbiAgICAgID48L213Yy10ZXh0ZmllbGQ+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bHRzXCI+XG4gICAgICAgICR7dGhpcy5pc0xvYWRpbmdcbiAgICAgICAgICA/IG5ldyBBcnJheSgxMCkuZmlsbCgwKS5tYXAoXG4gICAgICAgICAgICAgIF8gPT4gaHRtbGBcbiAgICAgICAgICAgICAgICA8aHAtbGluayBwbGFjZWhvbGRlcj48L2hwLWxpbms+XG4gICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHRoaXMucmVzdWx0cy5tYXAoXG4gICAgICAgICAgICAgIGwgPT4gaHRtbGBcbiAgICAgICAgICAgICAgICA8aHAtbGlua1xuICAgICAgICAgICAgICAgICAgLmxpbms9JHtsfVxuICAgICAgICAgICAgICAgICAgP2hvdmVyZWQ9JHt0aGlzLnJlc3VsdHMuaW5kZXhPZihsKSA9PT0gdGhpcy5ob3ZlcmVkfVxuICAgICAgICAgICAgICAgID48L2hwLWxpbms+XG4gICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgJHt0aGlzLnJlc3VsdHMubGVuZ3RoID09PSAwXG4gICAgICAgICAgPyBodG1sYFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm8tcmVzdWx0c1wiPk5vIG1hdGNoZXM8L2Rpdj5cbiAgICAgICAgICAgIGBcbiAgICAgICAgICA6ICcnfVxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCwgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tICdsaXQtZWxlbWVudCdcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2hwLWFwcC5zYXNzJ1xuXG5pbXBvcnQgJ2NvbXBvbmVudHMvc2VhcmNoL2hwLXNlYXJjaCdcblxuXG5AY3VzdG9tRWxlbWVudCgnaHAtYXBwJylcbmV4cG9ydCBjbGFzcyBIcEFwcCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gWyBzdHlsZXMgXVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGhwLXNlYXJjaD48L2hwLXNlYXJjaD5cbiAgICBgXG4gIH1cbn1cbiIsImltcG9ydCAnLi9jb21wb25lbnRzL2FwcC9ocC1hcHAnO1xuXG5pZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlclxuICAgIC5yZWdpc3RlcignLi9zZXJ2aWNlLXdvcmtlci5qcycpXG4gICAgICAudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnU1cgcmVnaXN0ZXJlZDogJywgcmVnaXN0cmF0aW9uKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2gocmVnaXN0cmF0aW9uRXJyb3IgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnU1cgcmVnaXN0cmF0aW9uIGZhaWxlZDogJywgcmVnaXN0cmF0aW9uRXJyb3IpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==